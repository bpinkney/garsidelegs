
data_collection_init_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eec  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000748  080080d0  080080d0  000090d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008818  08008818  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008818  08008818  00009818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008820  08008820  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008820  08008820  00009820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008824  08008824  00009824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008828  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000824  200001d4  080089fc  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f8  080089fc  0000a9f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014011  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd2  00000000  00000000  0001e215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00020de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3b  00000000  00000000  00021f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024464  00000000  00000000  00022c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cf5  00000000  00000000  000470a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9a1e  00000000  00000000  0005dd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001377ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005808  00000000  00000000  00137800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0013d008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	080080b4 	.word	0x080080b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	080080b4 	.word	0x080080b4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <garsidelegs_get_gyro_scale>:
// imu params
const uint8_t gyro_odr  = ICM20649_GYRO_RANGE_4000_DPS;
const uint8_t accel_odr = ICM20649_ACCEL_RANGE_30_G;

float garsidelegs_get_gyro_scale(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
	float gyro_scale = 1;
 8000eee:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000ef2:	607b      	str	r3, [r7, #4]

  if (gyro_odr == ICM20649_GYRO_RANGE_500_DPS)
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <garsidelegs_get_gyro_scale+0x16>
    gyro_scale = 1.0/65.5;
 8000efa:	4b0d      	ldr	r3, [pc, #52]	@ (8000f30 <garsidelegs_get_gyro_scale+0x48>)
 8000efc:	607b      	str	r3, [r7, #4]
  if (gyro_odr == ICM20649_GYRO_RANGE_1000_DPS)
 8000efe:	2303      	movs	r3, #3
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d101      	bne.n	8000f08 <garsidelegs_get_gyro_scale+0x20>
    gyro_scale = 1.0/32.8;
 8000f04:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <garsidelegs_get_gyro_scale+0x4c>)
 8000f06:	607b      	str	r3, [r7, #4]
  if (gyro_odr == ICM20649_GYRO_RANGE_2000_DPS)
 8000f08:	2303      	movs	r3, #3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d101      	bne.n	8000f12 <garsidelegs_get_gyro_scale+0x2a>
    gyro_scale = 1.0/16.4;
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <garsidelegs_get_gyro_scale+0x50>)
 8000f10:	607b      	str	r3, [r7, #4]
  if (gyro_odr == ICM20649_GYRO_RANGE_4000_DPS)
 8000f12:	2303      	movs	r3, #3
 8000f14:	2b03      	cmp	r3, #3
 8000f16:	d101      	bne.n	8000f1c <garsidelegs_get_gyro_scale+0x34>
    gyro_scale = 1.0/8.2;
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <garsidelegs_get_gyro_scale+0x54>)
 8000f1a:	607b      	str	r3, [r7, #4]

  return gyro_scale;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	ee07 3a90 	vmov	s15, r3
}
 8000f22:	eeb0 0a67 	vmov.f32	s0, s15
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	3c7a232d 	.word	0x3c7a232d
 8000f34:	3cf9c190 	.word	0x3cf9c190
 8000f38:	3d79c190 	.word	0x3d79c190
 8000f3c:	3df9c190 	.word	0x3df9c190

08000f40 <HAL_I2C_write_poll>:
Timeout
uint32_t
Timeout duration*/

void HAL_I2C_write_poll(const int8_t address, const uint8_t reg, const uint8_t data)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af04      	add	r7, sp, #16
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	71bb      	strb	r3, [r7, #6]
 8000f4e:	4613      	mov	r3, r2
 8000f50:	717b      	strb	r3, [r7, #5]
  // Blocking mode
	// Note: the buffer must be on the heap (no unsized pointers allowed) (I2C2_TX_Buffer)
  if(HAL_I2C_IsDeviceReady(&hi2c2, address, 3, 1000))
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	b299      	uxth	r1, r3
 8000f58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	4816      	ldr	r0, [pc, #88]	@ (8000fb8 <HAL_I2C_write_poll+0x78>)
 8000f60:	f001 fd3e 	bl	80029e0 <HAL_I2C_IsDeviceReady>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d01f      	beq.n	8000faa <HAL_I2C_write_poll+0x6a>
	{
		//printf("** I2C write start TX ** \n\r");
		memset(&I2C2_TX_Buffer, 0, sizeof(I2C2_TX_Buffer));
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4813      	ldr	r0, [pc, #76]	@ (8000fbc <HAL_I2C_write_poll+0x7c>)
 8000f70:	f005 f97b 	bl	800626a <memset>

		// set register and data to set
		I2C2_TX_Buffer[0] = data;
 8000f74:	4a11      	ldr	r2, [pc, #68]	@ (8000fbc <HAL_I2C_write_poll+0x7c>)
 8000f76:	797b      	ldrb	r3, [r7, #5]
 8000f78:	7013      	strb	r3, [r2, #0]
		//I2C2_TX_Buffer[1] = data;

		// for bad reasons, we need to shift the address by one for reads and writes
		if(HAL_I2C_Mem_Write(&hi2c2, address<<1, reg, 1, I2C2_TX_Buffer, 1, 50) != HAL_OK)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	b299      	uxth	r1, r3
 8000f84:	79bb      	ldrb	r3, [r7, #6]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	2332      	movs	r3, #50	@ 0x32
 8000f8a:	9302      	str	r3, [sp, #8]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	9301      	str	r3, [sp, #4]
 8000f90:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <HAL_I2C_write_poll+0x7c>)
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	4808      	ldr	r0, [pc, #32]	@ (8000fb8 <HAL_I2C_write_poll+0x78>)
 8000f98:	f001 faf4 	bl	8002584 <HAL_I2C_Mem_Write>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <HAL_I2C_write_poll+0x70>
		{
	    /* Error_Handler() function is called when Timeout error occurs.
	       When Acknowledge failure occurs (Slave don't acknowledge its address)
	       Master restarts communication */
			printf("** I2C write failed due to bad TX call! ** \n\r");
 8000fa2:	4807      	ldr	r0, [pc, #28]	@ (8000fc0 <HAL_I2C_write_poll+0x80>)
 8000fa4:	f005 f90c 	bl	80061c0 <iprintf>
/*	    if (HAL_I2C_GetError(&hi2c2) != HAL_I2C_ERROR_AF)
	    {
	      Error_Handler();
	      printf("** I2C read failed due to bad TX call! ** \n\r");
	    }*/
	    return;
 8000fa8:	e002      	b.n	8000fb0 <HAL_I2C_write_poll+0x70>
		}
	}
	else
	{
		printf("** I2C write failed due to bad HAL_I2C_IsDeviceReady call! ** \n\r");
 8000faa:	4806      	ldr	r0, [pc, #24]	@ (8000fc4 <HAL_I2C_write_poll+0x84>)
 8000fac:	f005 f908 	bl	80061c0 <iprintf>
	}
}
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000284 	.word	0x20000284
 8000fbc:	200001f0 	.word	0x200001f0
 8000fc0:	08008268 	.word	0x08008268
 8000fc4:	08008298 	.word	0x08008298

08000fc8 <HAL_I2C_read_poll>:

// I2C read abstraction for busypoll
void HAL_I2C_read_poll(const int8_t address, const int8_t reg, const uint8_t num_bytes)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af04      	add	r7, sp, #16
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	71bb      	strb	r3, [r7, #6]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	717b      	strb	r3, [r7, #5]
  // Blocking mode
	// Note: the buffer must be on the heap (no unsized pointers allowed) (I2C2_RX_Buffer)
  if(HAL_I2C_IsDeviceReady(&hi2c2, address, 3, 1000))
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	b299      	uxth	r1, r3
 8000fe0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	4813      	ldr	r0, [pc, #76]	@ (8001034 <HAL_I2C_read_poll+0x6c>)
 8000fe8:	f001 fcfa 	bl	80029e0 <HAL_I2C_IsDeviceReady>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d01a      	beq.n	8001028 <HAL_I2C_read_poll+0x60>
	{
		//printf("** I2C read start RX ** \n\r");
	  if(HAL_I2C_Mem_Read(&hi2c2, address<<1, reg, 1, I2C2_RX_Buffer, num_bytes, 1000) != HAL_OK)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	b299      	uxth	r1, r3
 8000ffc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001000:	b29a      	uxth	r2, r3
 8001002:	797b      	ldrb	r3, [r7, #5]
 8001004:	b29b      	uxth	r3, r3
 8001006:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800100a:	9002      	str	r0, [sp, #8]
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <HAL_I2C_read_poll+0x70>)
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	4807      	ldr	r0, [pc, #28]	@ (8001034 <HAL_I2C_read_poll+0x6c>)
 8001016:	f001 fbc9 	bl	80027ac <HAL_I2C_Mem_Read>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d006      	beq.n	800102e <HAL_I2C_read_poll+0x66>
	  {
	    /* Error_Handler() function is called when Timeout error occurs.
	       When Acknowledge failure occurs (Slave don't acknowledge it's address)
	       Master restarts communication */
	  	printf("** I2C read failed due to bad RX call! ** \n\r");
 8001020:	4806      	ldr	r0, [pc, #24]	@ (800103c <HAL_I2C_read_poll+0x74>)
 8001022:	f005 f8cd 	bl	80061c0 <iprintf>
/*	    if (HAL_I2C_GetError(&hi2c2) != HAL_I2C_ERROR_AF)
	    {
	      Error_Handler();
	      printf("** I2C read failed due to bad RX call! ** \n\r");
	    }*/
	    return;
 8001026:	e002      	b.n	800102e <HAL_I2C_read_poll+0x66>
	  }
	}
	else
	{
		printf("** I2C read failed due to bad HAL_I2C_IsDeviceReady call! ** \n\r");
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <HAL_I2C_read_poll+0x78>)
 800102a:	f005 f8c9 	bl	80061c0 <iprintf>
	}
}
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000284 	.word	0x20000284
 8001038:	20000210 	.word	0x20000210
 800103c:	080082dc 	.word	0x080082dc
 8001040:	0800830c 	.word	0x0800830c

08001044 <garsidelegs_hw_sensors_imu_init>:
shift	The number of bits that our bit-slice is shifted from LSB*/

#define ICM20649_DEVICE_ID 0xE1 // Correct content of WHO_AM_I register for IMU
#define ICM20649_BANK(bank) ((bank_number & 0b11) << 4)
uint8_t garsidelegs_hw_sensors_imu_init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
	// Note: bank number persists until changed
	uint8_t bank_number = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	71fb      	strb	r3, [r7, #7]
	//uint8_t num_bytes = 0;

	// check whoami for IMU
	HAL_I2C_write_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_REG_BANK_SEL, ICM20649_BANK(bank_number));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	b2db      	uxtb	r3, r3
 8001054:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001058:	b2db      	uxtb	r3, r3
 800105a:	461a      	mov	r2, r3
 800105c:	217f      	movs	r1, #127	@ 0x7f
 800105e:	2068      	movs	r0, #104	@ 0x68
 8001060:	f7ff ff6e 	bl	8000f40 <HAL_I2C_write_poll>
	HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_WHOAMI, 1);
 8001064:	2201      	movs	r2, #1
 8001066:	2100      	movs	r1, #0
 8001068:	2068      	movs	r0, #104	@ 0x68
 800106a:	f7ff ffad 	bl	8000fc8 <HAL_I2C_read_poll>
	// we expect 0xE1 back for WHOAMI
	printf("ICM20649 WHOAMI 0x%02X == 0x%02X\n\r", ICM20649_DEVICE_ID, I2C2_RX_Buffer[0]);
 800106e:	4b4d      	ldr	r3, [pc, #308]	@ (80011a4 <garsidelegs_hw_sensors_imu_init+0x160>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	21e1      	movs	r1, #225	@ 0xe1
 8001076:	484c      	ldr	r0, [pc, #304]	@ (80011a8 <garsidelegs_hw_sensors_imu_init+0x164>)
 8001078:	f005 f8a2 	bl	80061c0 <iprintf>

	// take the part out of (default) power saving mode by clearing bit 6
	// select default oscillator
	uint8_t pwr_mgmt_1 = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	71bb      	strb	r3, [r7, #6]
	pwr_mgmt_1 |= 0x01;
 8001080:	79bb      	ldrb	r3, [r7, #6]
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_write_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_PWR_MGMT_1, pwr_mgmt_1);
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	461a      	mov	r2, r3
 800108c:	2106      	movs	r1, #6
 800108e:	2068      	movs	r0, #104	@ 0x68
 8001090:	f7ff ff56 	bl	8000f40 <HAL_I2C_write_poll>
	HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_PWR_MGMT_1, 1);
 8001094:	2201      	movs	r2, #1
 8001096:	2106      	movs	r1, #6
 8001098:	2068      	movs	r0, #104	@ 0x68
 800109a:	f7ff ff95 	bl	8000fc8 <HAL_I2C_read_poll>
	printf("ICM20649 Clear Sleep Mode 0x%02X == 0x%02X \n\r", 0x00, I2C2_RX_Buffer[0]);
 800109e:	4b41      	ldr	r3, [pc, #260]	@ (80011a4 <garsidelegs_hw_sensors_imu_init+0x160>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	461a      	mov	r2, r3
 80010a4:	2100      	movs	r1, #0
 80010a6:	4841      	ldr	r0, [pc, #260]	@ (80011ac <garsidelegs_hw_sensors_imu_init+0x168>)
 80010a8:	f005 f88a 	bl	80061c0 <iprintf>

	HAL_I2C_write_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_PWR_MGMT_2, 0x00);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2107      	movs	r1, #7
 80010b0:	2068      	movs	r0, #104	@ 0x68
 80010b2:	f7ff ff45 	bl	8000f40 <HAL_I2C_write_poll>
	HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_PWR_MGMT_2, 1);
 80010b6:	2201      	movs	r2, #1
 80010b8:	2107      	movs	r1, #7
 80010ba:	2068      	movs	r0, #104	@ 0x68
 80010bc:	f7ff ff84 	bl	8000fc8 <HAL_I2C_read_poll>
	printf("ICM20649 Clear Accel Gyro Disable 0x%02X == 0x%02X \n\r", 0x00, I2C2_RX_Buffer[0]);
 80010c0:	4b38      	ldr	r3, [pc, #224]	@ (80011a4 <garsidelegs_hw_sensors_imu_init+0x160>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	461a      	mov	r2, r3
 80010c6:	2100      	movs	r1, #0
 80010c8:	4839      	ldr	r0, [pc, #228]	@ (80011b0 <garsidelegs_hw_sensors_imu_init+0x16c>)
 80010ca:	f005 f879 	bl	80061c0 <iprintf>

	//// Set gyro rate divisor (ODR) and LPFILT behaviour
	// For now, we'll pick a smoother filter for fun (change later if delay is too large)
	// set register bank to 2
	bank_number = 2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_write_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_REG_BANK_SEL, ICM20649_BANK(bank_number));
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	461a      	mov	r2, r3
 80010e0:	217f      	movs	r1, #127	@ 0x7f
 80010e2:	2068      	movs	r0, #104	@ 0x68
 80010e4:	f7ff ff2c 	bl	8000f40 <HAL_I2C_write_poll>
	// 00 = ±500 dps
	// 01= ±1000 dps
	// 10 = ±2000 dps
	// 11 = ±4000 dps
	// 0 GYRO_FCHOICE - Must be 1 for non-zero GYRO_DLPFCFG
	uint8_t gyro_config = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	717b      	strb	r3, [r7, #5]
	gyro_config |= 0x4 << 3; 		// GYRO_DLPFCFG
 80010ec:	797b      	ldrb	r3, [r7, #5]
 80010ee:	f043 0320 	orr.w	r3, r3, #32
 80010f2:	717b      	strb	r3, [r7, #5]
	gyro_config |= gyro_odr << 1;   // GYRO_FS_SEL
 80010f4:	2303      	movs	r3, #3
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	b25a      	sxtb	r2, r3
 80010fa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80010fe:	4313      	orrs	r3, r2
 8001100:	b25b      	sxtb	r3, r3
 8001102:	717b      	strb	r3, [r7, #5]
	gyro_config |= 0x1;         // GYRO_FCHOICE
 8001104:	797b      	ldrb	r3, [r7, #5]
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_write_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B2_GYRO_CONFIG_1, gyro_config);
 800110c:	797b      	ldrb	r3, [r7, #5]
 800110e:	461a      	mov	r2, r3
 8001110:	2101      	movs	r1, #1
 8001112:	2068      	movs	r0, #104	@ 0x68
 8001114:	f7ff ff14 	bl	8000f40 <HAL_I2C_write_poll>

	// verify gyro config was set correctly
	HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B2_GYRO_CONFIG_1, 1);
 8001118:	2201      	movs	r2, #1
 800111a:	2101      	movs	r1, #1
 800111c:	2068      	movs	r0, #104	@ 0x68
 800111e:	f7ff ff53 	bl	8000fc8 <HAL_I2C_read_poll>
	printf("ICM20649 Gyro Config 0x%02X == 0x%02X \n\r", gyro_config, I2C2_RX_Buffer[0]);
 8001122:	797b      	ldrb	r3, [r7, #5]
 8001124:	4a1f      	ldr	r2, [pc, #124]	@ (80011a4 <garsidelegs_hw_sensors_imu_init+0x160>)
 8001126:	7812      	ldrb	r2, [r2, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	4822      	ldr	r0, [pc, #136]	@ (80011b4 <garsidelegs_hw_sensors_imu_init+0x170>)
 800112c:	f005 f848 	bl	80061c0 <iprintf>
	// 00: ±4g
	// 01: ±8g
	// 10: ±16g
	// 11: ±30g
	// 0 ACCEL_FCHOICE  - Must be 1 for non-zero ACCEL_DLPFCFG
	uint8_t accel_config = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	713b      	strb	r3, [r7, #4]
	accel_config |= 0x4 << 3; 	 			// ACCEL_DLPFCFG
 8001134:	793b      	ldrb	r3, [r7, #4]
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	713b      	strb	r3, [r7, #4]
	accel_config |= accel_odr << 1;   // ACCEL_FS_SEL
 800113c:	2303      	movs	r3, #3
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	b25a      	sxtb	r2, r3
 8001142:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001146:	4313      	orrs	r3, r2
 8001148:	b25b      	sxtb	r3, r3
 800114a:	713b      	strb	r3, [r7, #4]
	accel_config |= 0x1;         			// ACCEL_FCHOICE
 800114c:	793b      	ldrb	r3, [r7, #4]
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	713b      	strb	r3, [r7, #4]
	HAL_I2C_write_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B2_ACCEL_CONFIG_1, accel_config);
 8001154:	793b      	ldrb	r3, [r7, #4]
 8001156:	461a      	mov	r2, r3
 8001158:	2114      	movs	r1, #20
 800115a:	2068      	movs	r0, #104	@ 0x68
 800115c:	f7ff fef0 	bl	8000f40 <HAL_I2C_write_poll>

	// verify accel config was set correctly
	HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B2_ACCEL_CONFIG_1, 1);
 8001160:	2201      	movs	r2, #1
 8001162:	2114      	movs	r1, #20
 8001164:	2068      	movs	r0, #104	@ 0x68
 8001166:	f7ff ff2f 	bl	8000fc8 <HAL_I2C_read_poll>
	printf("ICM20649 Accel Config 0x%02X == 0x%02X \n\r", accel_config, I2C2_RX_Buffer[0]);
 800116a:	793b      	ldrb	r3, [r7, #4]
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <garsidelegs_hw_sensors_imu_init+0x160>)
 800116e:	7812      	ldrb	r2, [r2, #0]
 8001170:	4619      	mov	r1, r3
 8001172:	4811      	ldr	r0, [pc, #68]	@ (80011b8 <garsidelegs_hw_sensors_imu_init+0x174>)
 8001174:	f005 f824 	bl	80061c0 <iprintf>

	// Revert bank number
	bank_number = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_write_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_REG_BANK_SEL, ICM20649_BANK(bank_number));
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	b2db      	uxtb	r3, r3
 8001182:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001186:	b2db      	uxtb	r3, r3
 8001188:	461a      	mov	r2, r3
 800118a:	217f      	movs	r1, #127	@ 0x7f
 800118c:	2068      	movs	r0, #104	@ 0x68
 800118e:	f7ff fed7 	bl	8000f40 <HAL_I2C_write_poll>
	printf("ICM20649 Done Init \n\r\n\r");
 8001192:	480a      	ldr	r0, [pc, #40]	@ (80011bc <garsidelegs_hw_sensors_imu_init+0x178>)
 8001194:	f005 f814 	bl	80061c0 <iprintf>
	return 0;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000210 	.word	0x20000210
 80011a8:	0800834c 	.word	0x0800834c
 80011ac:	08008370 	.word	0x08008370
 80011b0:	080083a0 	.word	0x080083a0
 80011b4:	080083d8 	.word	0x080083d8
 80011b8:	08008404 	.word	0x08008404
 80011bc:	08008430 	.word	0x08008430

080011c0 <garsidelegs_hw_sensors_imu_process_poll_sample>:

void garsidelegs_hw_sensors_imu_process_poll_sample(void)
{
 80011c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011c4:	ed2d 8b02 	vpush	{d8}
 80011c8:	b088      	sub	sp, #32
 80011ca:	af04      	add	r7, sp, #16
	//printf("** IMU read start ** \n\r");

	// Note: bank number persists until changed
	//uint8_t bank_number = 0;
	uint8_t num_bytes = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]
	//int16_t rawGyroXind = I2C2_RX_Buffer[0] << 8;
	//HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_GYRO_XOUT_L, 1);
	//rawGyroXind |= I2C2_RX_Buffer[0];

	// Read Accel 6 bytes, gyro 6 bytes, temp, and 9 bytes of mag
	num_bytes = 6+6+2;
 80011d0:	230e      	movs	r3, #14
 80011d2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_ACCEL_XOUT_H, num_bytes);
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
 80011d6:	461a      	mov	r2, r3
 80011d8:	212d      	movs	r1, #45	@ 0x2d
 80011da:	2068      	movs	r0, #104	@ 0x68
 80011dc:	f7ff fef4 	bl	8000fc8 <HAL_I2C_read_poll>

	int16_t rawAccX = I2C2_RX_Buffer[0] << 8 | I2C2_RX_Buffer[1];
 80011e0:	4b42      	ldr	r3, [pc, #264]	@ (80012ec <garsidelegs_hw_sensors_imu_process_poll_sample+0x12c>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	4b40      	ldr	r3, [pc, #256]	@ (80012ec <garsidelegs_hw_sensors_imu_process_poll_sample+0x12c>)
 80011ea:	785b      	ldrb	r3, [r3, #1]
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	81bb      	strh	r3, [r7, #12]
	int16_t rawAccY = I2C2_RX_Buffer[2] << 8 | I2C2_RX_Buffer[3];
 80011f2:	4b3e      	ldr	r3, [pc, #248]	@ (80012ec <garsidelegs_hw_sensors_imu_process_poll_sample+0x12c>)
 80011f4:	789b      	ldrb	r3, [r3, #2]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	b21a      	sxth	r2, r3
 80011fa:	4b3c      	ldr	r3, [pc, #240]	@ (80012ec <garsidelegs_hw_sensors_imu_process_poll_sample+0x12c>)
 80011fc:	78db      	ldrb	r3, [r3, #3]
 80011fe:	b21b      	sxth	r3, r3
 8001200:	4313      	orrs	r3, r2
 8001202:	817b      	strh	r3, [r7, #10]
	int16_t rawAccZ = I2C2_RX_Buffer[4] << 8 | I2C2_RX_Buffer[5];
 8001204:	4b39      	ldr	r3, [pc, #228]	@ (80012ec <garsidelegs_hw_sensors_imu_process_poll_sample+0x12c>)
 8001206:	791b      	ldrb	r3, [r3, #4]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b37      	ldr	r3, [pc, #220]	@ (80012ec <garsidelegs_hw_sensors_imu_process_poll_sample+0x12c>)
 800120e:	795b      	ldrb	r3, [r3, #5]
 8001210:	b21b      	sxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	813b      	strh	r3, [r7, #8]

	//HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_GYRO_XOUT_H, num_bytes, 0);

	int16_t rawGyroX = I2C2_RX_Buffer[6] << 8 | I2C2_RX_Buffer[7];
 8001216:	4b35      	ldr	r3, [pc, #212]	@ (80012ec <garsidelegs_hw_sensors_imu_process_poll_sample+0x12c>)
 8001218:	799b      	ldrb	r3, [r3, #6]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21a      	sxth	r2, r3
 800121e:	4b33      	ldr	r3, [pc, #204]	@ (80012ec <garsidelegs_hw_sensors_imu_process_poll_sample+0x12c>)
 8001220:	79db      	ldrb	r3, [r3, #7]
 8001222:	b21b      	sxth	r3, r3
 8001224:	4313      	orrs	r3, r2
 8001226:	80fb      	strh	r3, [r7, #6]
	int16_t rawGyroY = I2C2_RX_Buffer[8] << 8 | I2C2_RX_Buffer[9];
 8001228:	4b30      	ldr	r3, [pc, #192]	@ (80012ec <garsidelegs_hw_sensors_imu_process_poll_sample+0x12c>)
 800122a:	7a1b      	ldrb	r3, [r3, #8]
 800122c:	021b      	lsls	r3, r3, #8
 800122e:	b21a      	sxth	r2, r3
 8001230:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <garsidelegs_hw_sensors_imu_process_poll_sample+0x12c>)
 8001232:	7a5b      	ldrb	r3, [r3, #9]
 8001234:	b21b      	sxth	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	80bb      	strh	r3, [r7, #4]
	int16_t rawGyroZ = I2C2_RX_Buffer[10] << 8 | I2C2_RX_Buffer[11];
 800123a:	4b2c      	ldr	r3, [pc, #176]	@ (80012ec <garsidelegs_hw_sensors_imu_process_poll_sample+0x12c>)
 800123c:	7a9b      	ldrb	r3, [r3, #10]
 800123e:	021b      	lsls	r3, r3, #8
 8001240:	b21a      	sxth	r2, r3
 8001242:	4b2a      	ldr	r3, [pc, #168]	@ (80012ec <garsidelegs_hw_sensors_imu_process_poll_sample+0x12c>)
 8001244:	7adb      	ldrb	r3, [r3, #11]
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	807b      	strh	r3, [r7, #2]

	//HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_TEMP_OUT_H, num_bytes, 0);

	int16_t temperature = I2C2_RX_Buffer[12] << 8 | I2C2_RX_Buffer[13];
 800124c:	4b27      	ldr	r3, [pc, #156]	@ (80012ec <garsidelegs_hw_sensors_imu_process_poll_sample+0x12c>)
 800124e:	7b1b      	ldrb	r3, [r3, #12]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b21a      	sxth	r2, r3
 8001254:	4b25      	ldr	r3, [pc, #148]	@ (80012ec <garsidelegs_hw_sensors_imu_process_poll_sample+0x12c>)
 8001256:	7b5b      	ldrb	r3, [r3, #13]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	803b      	strh	r3, [r7, #0]
			(float)rawAccZ  * garsidelegs_get_accel_scale() * GRAV,
			(temperature / 333.87) + 21.0);
*/

	printf("%0.2f, %0.2f, %0.2f; ...\n\r",
			(float)rawGyroX * garsidelegs_get_gyro_scale(),
 800125e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001262:	ee07 3a90 	vmov	s15, r3
 8001266:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800126a:	f7ff fe3d 	bl	8000ee8 <garsidelegs_get_gyro_scale>
 800126e:	eef0 7a40 	vmov.f32	s15, s0
 8001272:	ee68 7a27 	vmul.f32	s15, s16, s15
	printf("%0.2f, %0.2f, %0.2f; ...\n\r",
 8001276:	ee17 0a90 	vmov	r0, s15
 800127a:	f7ff f98d 	bl	8000598 <__aeabi_f2d>
 800127e:	4680      	mov	r8, r0
 8001280:	4689      	mov	r9, r1
			(float)rawGyroY * garsidelegs_get_gyro_scale(),
 8001282:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800128e:	f7ff fe2b 	bl	8000ee8 <garsidelegs_get_gyro_scale>
 8001292:	eef0 7a40 	vmov.f32	s15, s0
 8001296:	ee68 7a27 	vmul.f32	s15, s16, s15
	printf("%0.2f, %0.2f, %0.2f; ...\n\r",
 800129a:	ee17 0a90 	vmov	r0, s15
 800129e:	f7ff f97b 	bl	8000598 <__aeabi_f2d>
 80012a2:	4604      	mov	r4, r0
 80012a4:	460d      	mov	r5, r1
			(float)rawGyroZ * garsidelegs_get_gyro_scale());
 80012a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80012b2:	f7ff fe19 	bl	8000ee8 <garsidelegs_get_gyro_scale>
 80012b6:	eef0 7a40 	vmov.f32	s15, s0
 80012ba:	ee68 7a27 	vmul.f32	s15, s16, s15
	printf("%0.2f, %0.2f, %0.2f; ...\n\r",
 80012be:	ee17 0a90 	vmov	r0, s15
 80012c2:	f7ff f969 	bl	8000598 <__aeabi_f2d>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012ce:	e9cd 4500 	strd	r4, r5, [sp]
 80012d2:	4642      	mov	r2, r8
 80012d4:	464b      	mov	r3, r9
 80012d6:	4806      	ldr	r0, [pc, #24]	@ (80012f0 <garsidelegs_hw_sensors_imu_process_poll_sample+0x130>)
 80012d8:	f004 ff72 	bl	80061c0 <iprintf>

	//num_bytes = 2;
	//HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_GYRO_XOUT_H, num_bytes, 1);


}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	ecbd 8b02 	vpop	{d8}
 80012e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012ea:	bf00      	nop
 80012ec:	20000210 	.word	0x20000210
 80012f0:	08008448 	.word	0x08008448

080012f4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80012fc:	1d39      	adds	r1, r7, #4
 80012fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001302:	2201      	movs	r2, #1
 8001304:	4803      	ldr	r0, [pc, #12]	@ (8001314 <__io_putchar+0x20>)
 8001306:	f003 fa58 	bl	80047ba <HAL_UART_Transmit>

  return ch;
 800130a:	687b      	ldr	r3, [r7, #4]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2000033c 	.word	0x2000033c

08001318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800131e:	f000 fd78 	bl	8001e12 <HAL_Init>

  /* USER CODE BEGIN Init */
  const uint32_t led_flash_delay_ms = 200;
 8001322:	23c8      	movs	r3, #200	@ 0xc8
 8001324:	607b      	str	r3, [r7, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001326:	f000 f81b 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800132a:	f000 f9a5 	bl	8001678 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800132e:	f000 f943 	bl	80015b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001332:	f000 f971 	bl	8001618 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001336:	f000 f881 	bl	800143c <MX_I2C1_Init>
  MX_SPI1_Init();
 800133a:	f000 f8ff 	bl	800153c <MX_SPI1_Init>
  MX_I2C2_Init();
 800133e:	f000 f8bd 	bl	80014bc <MX_I2C2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  printf("** Start While Loop ** \n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r");
 8001342:	4806      	ldr	r0, [pc, #24]	@ (800135c <main+0x44>)
 8001344:	f004 ff3c 	bl	80061c0 <iprintf>

  garsidelegs_hw_sensors_imu_init();
 8001348:	f7ff fe7c 	bl	8001044 <garsidelegs_hw_sensors_imu_init>

  while (1)
  {

  	garsidelegs_hw_sensors_imu_process_poll_sample();
 800134c:	f7ff ff38 	bl	80011c0 <garsidelegs_hw_sensors_imu_process_poll_sample>
  	HAL_Delay(10);
 8001350:	200a      	movs	r0, #10
 8001352:	f000 fdbb 	bl	8001ecc <HAL_Delay>
  	garsidelegs_hw_sensors_imu_process_poll_sample();
 8001356:	bf00      	nop
 8001358:	e7f8      	b.n	800134c <main+0x34>
 800135a:	bf00      	nop
 800135c:	08008464 	.word	0x08008464

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b094      	sub	sp, #80	@ 0x50
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	2230      	movs	r2, #48	@ 0x30
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f004 ff7b 	bl	800626a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001384:	f002 f8ac 	bl	80034e0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <SystemClock_Config+0xd4>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138c:	4a29      	ldr	r2, [pc, #164]	@ (8001434 <SystemClock_Config+0xd4>)
 800138e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001392:	6413      	str	r3, [r2, #64]	@ 0x40
 8001394:	4b27      	ldr	r3, [pc, #156]	@ (8001434 <SystemClock_Config+0xd4>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a0:	4b25      	ldr	r3, [pc, #148]	@ (8001438 <SystemClock_Config+0xd8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a24      	ldr	r2, [pc, #144]	@ (8001438 <SystemClock_Config+0xd8>)
 80013a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b22      	ldr	r3, [pc, #136]	@ (8001438 <SystemClock_Config+0xd8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b8:	2301      	movs	r3, #1
 80013ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013bc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c2:	2302      	movs	r3, #2
 80013c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013cc:	2304      	movs	r3, #4
 80013ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80013d0:	23d8      	movs	r3, #216	@ 0xd8
 80013d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d4:	2302      	movs	r3, #2
 80013d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80013d8:	2309      	movs	r3, #9
 80013da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	4618      	mov	r0, r3
 80013e2:	f002 f8dd 	bl	80035a0 <HAL_RCC_OscConfig>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80013ec:	f000 f9f2 	bl	80017d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013f0:	f002 f886 	bl	8003500 <HAL_PWREx_EnableOverDrive>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013fa:	f000 f9eb 	bl	80017d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fe:	230f      	movs	r3, #15
 8001400:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001402:	2302      	movs	r3, #2
 8001404:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800140a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800140e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001410:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001414:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001416:	f107 030c 	add.w	r3, r7, #12
 800141a:	2107      	movs	r1, #7
 800141c:	4618      	mov	r0, r3
 800141e:	f002 fb63 	bl	8003ae8 <HAL_RCC_ClockConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001428:	f000 f9d4 	bl	80017d4 <Error_Handler>
  }
}
 800142c:	bf00      	nop
 800142e:	3750      	adds	r7, #80	@ 0x50
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	40007000 	.word	0x40007000

0800143c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 1 */

	// define i2c address etc

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001440:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <MX_I2C1_Init+0x74>)
 8001442:	4a1c      	ldr	r2, [pc, #112]	@ (80014b4 <MX_I2C1_Init+0x78>)
 8001444:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8001446:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <MX_I2C1_Init+0x74>)
 8001448:	4a1b      	ldr	r2, [pc, #108]	@ (80014b8 <MX_I2C1_Init+0x7c>)
 800144a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800144c:	4b18      	ldr	r3, [pc, #96]	@ (80014b0 <MX_I2C1_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001452:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <MX_I2C1_Init+0x74>)
 8001454:	2201      	movs	r2, #1
 8001456:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001458:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <MX_I2C1_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800145e:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <MX_I2C1_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <MX_I2C1_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <MX_I2C1_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001470:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <MX_I2C1_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001476:	480e      	ldr	r0, [pc, #56]	@ (80014b0 <MX_I2C1_Init+0x74>)
 8001478:	f000 ffe8 	bl	800244c <HAL_I2C_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001482:	f000 f9a7 	bl	80017d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001486:	2100      	movs	r1, #0
 8001488:	4809      	ldr	r0, [pc, #36]	@ (80014b0 <MX_I2C1_Init+0x74>)
 800148a:	f001 fe57 	bl	800313c <HAL_I2CEx_ConfigAnalogFilter>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001494:	f000 f99e 	bl	80017d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001498:	2100      	movs	r1, #0
 800149a:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <MX_I2C1_Init+0x74>)
 800149c:	f001 fe99 	bl	80031d2 <HAL_I2CEx_ConfigDigitalFilter>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014a6:	f000 f995 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000230 	.word	0x20000230
 80014b4:	40005400 	.word	0x40005400
 80014b8:	20404768 	.word	0x20404768

080014bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001530 <MX_I2C2_Init+0x74>)
 80014c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001534 <MX_I2C2_Init+0x78>)
 80014c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <MX_I2C2_Init+0x74>)
 80014c8:	4a1b      	ldr	r2, [pc, #108]	@ (8001538 <MX_I2C2_Init+0x7c>)
 80014ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80014cc:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <MX_I2C2_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d2:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <MX_I2C2_Init+0x74>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d8:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <MX_I2C2_Init+0x74>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <MX_I2C2_Init+0x74>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <MX_I2C2_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ea:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <MX_I2C2_Init+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <MX_I2C2_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014f6:	480e      	ldr	r0, [pc, #56]	@ (8001530 <MX_I2C2_Init+0x74>)
 80014f8:	f000 ffa8 	bl	800244c <HAL_I2C_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001502:	f000 f967 	bl	80017d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001506:	2100      	movs	r1, #0
 8001508:	4809      	ldr	r0, [pc, #36]	@ (8001530 <MX_I2C2_Init+0x74>)
 800150a:	f001 fe17 	bl	800313c <HAL_I2CEx_ConfigAnalogFilter>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001514:	f000 f95e 	bl	80017d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001518:	2100      	movs	r1, #0
 800151a:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_I2C2_Init+0x74>)
 800151c:	f001 fe59 	bl	80031d2 <HAL_I2CEx_ConfigDigitalFilter>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001526:	f000 f955 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000284 	.word	0x20000284
 8001534:	40005800 	.word	0x40005800
 8001538:	20404768 	.word	0x20404768

0800153c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001540:	4b1b      	ldr	r3, [pc, #108]	@ (80015b0 <MX_SPI1_Init+0x74>)
 8001542:	4a1c      	ldr	r2, [pc, #112]	@ (80015b4 <MX_SPI1_Init+0x78>)
 8001544:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001546:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <MX_SPI1_Init+0x74>)
 8001548:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800154c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800154e:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <MX_SPI1_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001554:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <MX_SPI1_Init+0x74>)
 8001556:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800155a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <MX_SPI1_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001562:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <MX_SPI1_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001568:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_SPI1_Init+0x74>)
 800156a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800156e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_SPI1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_SPI1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_SPI1_Init+0x74>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <MX_SPI1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_SPI1_Init+0x74>)
 800158a:	2207      	movs	r2, #7
 800158c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800158e:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <MX_SPI1_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_SPI1_Init+0x74>)
 8001596:	2208      	movs	r2, #8
 8001598:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <MX_SPI1_Init+0x74>)
 800159c:	f003 f814 	bl	80045c8 <HAL_SPI_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015a6:	f000 f915 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200002d8 	.word	0x200002d8
 80015b4:	40013000 	.word	0x40013000

080015b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015bc:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <MX_USART3_UART_Init+0x58>)
 80015be:	4a15      	ldr	r2, [pc, #84]	@ (8001614 <MX_USART3_UART_Init+0x5c>)
 80015c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015c2:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <MX_USART3_UART_Init+0x58>)
 80015c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ca:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <MX_USART3_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <MX_USART3_UART_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <MX_USART3_UART_Init+0x58>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <MX_USART3_UART_Init+0x58>)
 80015de:	220c      	movs	r2, #12
 80015e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <MX_USART3_UART_Init+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e8:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <MX_USART3_UART_Init+0x58>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ee:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <MX_USART3_UART_Init+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <MX_USART3_UART_Init+0x58>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015fa:	4805      	ldr	r0, [pc, #20]	@ (8001610 <MX_USART3_UART_Init+0x58>)
 80015fc:	f003 f88f 	bl	800471e <HAL_UART_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001606:	f000 f8e5 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2000033c 	.word	0x2000033c
 8001614:	40004800 	.word	0x40004800

08001618 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800161c:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800161e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001622:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001624:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001626:	2206      	movs	r2, #6
 8001628:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800162a:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800162c:	2202      	movs	r2, #2
 800162e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001630:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001632:	2200      	movs	r2, #0
 8001634:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001636:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001638:	2202      	movs	r2, #2
 800163a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800163c:	4b0d      	ldr	r3, [pc, #52]	@ (8001674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800163e:	2201      	movs	r2, #1
 8001640:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001642:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001644:	2200      	movs	r2, #0
 8001646:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001648:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800164a:	2200      	movs	r2, #0
 800164c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001650:	2201      	movs	r2, #1
 8001652:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001654:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001656:	2201      	movs	r2, #1
 8001658:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800165c:	2200      	movs	r2, #0
 800165e:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	@ (8001674 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001662:	f001 fe02 	bl	800326a <HAL_PCD_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 800166c:	f000 f8b2 	bl	80017d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200003c4 	.word	0x200003c4

08001678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08c      	sub	sp, #48	@ 0x30
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	4b4d      	ldr	r3, [pc, #308]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a4c      	ldr	r2, [pc, #304]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b4a      	ldr	r3, [pc, #296]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	61bb      	str	r3, [r7, #24]
 80016a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016a6:	4b47      	ldr	r3, [pc, #284]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a46      	ldr	r2, [pc, #280]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 80016ac:	f043 0320 	orr.w	r3, r3, #32
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b44      	ldr	r3, [pc, #272]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016be:	4b41      	ldr	r3, [pc, #260]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a40      	ldr	r2, [pc, #256]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 80016c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b3e      	ldr	r3, [pc, #248]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	4b3b      	ldr	r3, [pc, #236]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a3a      	ldr	r2, [pc, #232]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b38      	ldr	r3, [pc, #224]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	60fb      	str	r3, [r7, #12]
 80016ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	4b35      	ldr	r3, [pc, #212]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a34      	ldr	r2, [pc, #208]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b32      	ldr	r3, [pc, #200]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001706:	4b2f      	ldr	r3, [pc, #188]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	4a2e      	ldr	r2, [pc, #184]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	6313      	str	r3, [r2, #48]	@ 0x30
 8001712:	4b2c      	ldr	r3, [pc, #176]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800171e:	4b29      	ldr	r3, [pc, #164]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a28      	ldr	r2, [pc, #160]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 8001724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b26      	ldr	r3, [pc, #152]	@ (80017c4 <MX_GPIO_Init+0x14c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	f244 0181 	movw	r1, #16513	@ 0x4081
 800173c:	4822      	ldr	r0, [pc, #136]	@ (80017c8 <MX_GPIO_Init+0x150>)
 800173e:	f000 fe6b 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	2140      	movs	r1, #64	@ 0x40
 8001746:	4821      	ldr	r0, [pc, #132]	@ (80017cc <MX_GPIO_Init+0x154>)
 8001748:	f000 fe66 	bl	8002418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800174c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001752:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	481b      	ldr	r0, [pc, #108]	@ (80017d0 <MX_GPIO_Init+0x158>)
 8001764:	f000 fcbc 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001768:	f244 0381 	movw	r3, #16513	@ 0x4081
 800176c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176e:	2301      	movs	r3, #1
 8001770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	4811      	ldr	r0, [pc, #68]	@ (80017c8 <MX_GPIO_Init+0x150>)
 8001782:	f000 fcad 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001786:	2340      	movs	r3, #64	@ 0x40
 8001788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	480b      	ldr	r0, [pc, #44]	@ (80017cc <MX_GPIO_Init+0x154>)
 800179e:	f000 fc9f 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017a2:	2380      	movs	r3, #128	@ 0x80
 80017a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a6:	2300      	movs	r3, #0
 80017a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	@ (80017cc <MX_GPIO_Init+0x154>)
 80017b6:	f000 fc93 	bl	80020e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ba:	bf00      	nop
 80017bc:	3730      	adds	r7, #48	@ 0x30
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020400 	.word	0x40020400
 80017cc:	40021800 	.word	0x40021800
 80017d0:	40020800 	.word	0x40020800

080017d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d8:	b672      	cpsid	i
}
 80017da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <Error_Handler+0x8>

080017e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <HAL_MspInit+0x44>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001824 <HAL_MspInit+0x44>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <HAL_MspInit+0x44>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fe:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <HAL_MspInit+0x44>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	4a08      	ldr	r2, [pc, #32]	@ (8001824 <HAL_MspInit+0x44>)
 8001804:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001808:	6453      	str	r3, [r2, #68]	@ 0x44
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_MspInit+0x44>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0ac      	sub	sp, #176	@ 0xb0
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001840:	f107 031c 	add.w	r3, r7, #28
 8001844:	2280      	movs	r2, #128	@ 0x80
 8001846:	2100      	movs	r1, #0
 8001848:	4618      	mov	r0, r3
 800184a:	f004 fd0e 	bl	800626a <memset>
  if(hi2c->Instance==I2C1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a43      	ldr	r2, [pc, #268]	@ (8001960 <HAL_I2C_MspInit+0x138>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d13d      	bne.n	80018d4 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001858:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800185c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800185e:	2300      	movs	r3, #0
 8001860:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4618      	mov	r0, r3
 8001868:	f002 fb64 	bl	8003f34 <HAL_RCCEx_PeriphCLKConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001872:	f7ff ffaf 	bl	80017d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	4b3b      	ldr	r3, [pc, #236]	@ (8001964 <HAL_I2C_MspInit+0x13c>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a3a      	ldr	r2, [pc, #232]	@ (8001964 <HAL_I2C_MspInit+0x13c>)
 800187c:	f043 0302 	orr.w	r3, r3, #2
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b38      	ldr	r3, [pc, #224]	@ (8001964 <HAL_I2C_MspInit+0x13c>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800188e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001892:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001896:	2312      	movs	r3, #18
 8001898:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	2303      	movs	r3, #3
 80018a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018a8:	2304      	movs	r3, #4
 80018aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018b2:	4619      	mov	r1, r3
 80018b4:	482c      	ldr	r0, [pc, #176]	@ (8001968 <HAL_I2C_MspInit+0x140>)
 80018b6:	f000 fc13 	bl	80020e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ba:	4b2a      	ldr	r3, [pc, #168]	@ (8001964 <HAL_I2C_MspInit+0x13c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	4a29      	ldr	r2, [pc, #164]	@ (8001964 <HAL_I2C_MspInit+0x13c>)
 80018c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c6:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <HAL_I2C_MspInit+0x13c>)
 80018c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80018d2:	e040      	b.n	8001956 <HAL_I2C_MspInit+0x12e>
  else if(hi2c->Instance==I2C2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a24      	ldr	r2, [pc, #144]	@ (800196c <HAL_I2C_MspInit+0x144>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d13b      	bne.n	8001956 <HAL_I2C_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80018de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018e2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	4618      	mov	r0, r3
 80018ee:	f002 fb21 	bl	8003f34 <HAL_RCCEx_PeriphCLKConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 80018f8:	f7ff ff6c 	bl	80017d4 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018fc:	4b19      	ldr	r3, [pc, #100]	@ (8001964 <HAL_I2C_MspInit+0x13c>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001900:	4a18      	ldr	r2, [pc, #96]	@ (8001964 <HAL_I2C_MspInit+0x13c>)
 8001902:	f043 0320 	orr.w	r3, r3, #32
 8001906:	6313      	str	r3, [r2, #48]	@ 0x30
 8001908:	4b16      	ldr	r3, [pc, #88]	@ (8001964 <HAL_I2C_MspInit+0x13c>)
 800190a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190c:	f003 0320 	and.w	r3, r3, #32
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001914:	2303      	movs	r3, #3
 8001916:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800191a:	2312      	movs	r3, #18
 800191c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001920:	2301      	movs	r3, #1
 8001922:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800192c:	2304      	movs	r3, #4
 800192e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001932:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001936:	4619      	mov	r1, r3
 8001938:	480d      	ldr	r0, [pc, #52]	@ (8001970 <HAL_I2C_MspInit+0x148>)
 800193a:	f000 fbd1 	bl	80020e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800193e:	4b09      	ldr	r3, [pc, #36]	@ (8001964 <HAL_I2C_MspInit+0x13c>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	4a08      	ldr	r2, [pc, #32]	@ (8001964 <HAL_I2C_MspInit+0x13c>)
 8001944:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001948:	6413      	str	r3, [r2, #64]	@ 0x40
 800194a:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_I2C_MspInit+0x13c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
}
 8001956:	bf00      	nop
 8001958:	37b0      	adds	r7, #176	@ 0xb0
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40005400 	.word	0x40005400
 8001964:	40023800 	.word	0x40023800
 8001968:	40020400 	.word	0x40020400
 800196c:	40005800 	.word	0x40005800
 8001970:	40021400 	.word	0x40021400

08001974 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a17      	ldr	r2, [pc, #92]	@ (80019f0 <HAL_SPI_MspInit+0x7c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d127      	bne.n	80019e6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001996:	4b17      	ldr	r3, [pc, #92]	@ (80019f4 <HAL_SPI_MspInit+0x80>)
 8001998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800199a:	4a16      	ldr	r2, [pc, #88]	@ (80019f4 <HAL_SPI_MspInit+0x80>)
 800199c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019a2:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <HAL_SPI_MspInit+0x80>)
 80019a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <HAL_SPI_MspInit+0x80>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b2:	4a10      	ldr	r2, [pc, #64]	@ (80019f4 <HAL_SPI_MspInit+0x80>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ba:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <HAL_SPI_MspInit+0x80>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80019c6:	23e0      	movs	r3, #224	@ 0xe0
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d2:	2303      	movs	r3, #3
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019d6:	2305      	movs	r3, #5
 80019d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4805      	ldr	r0, [pc, #20]	@ (80019f8 <HAL_SPI_MspInit+0x84>)
 80019e2:	f000 fb7d 	bl	80020e0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	@ 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40013000 	.word	0x40013000
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020000 	.word	0x40020000

080019fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b0aa      	sub	sp, #168	@ 0xa8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a04:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
 8001a0c:	605a      	str	r2, [r3, #4]
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	60da      	str	r2, [r3, #12]
 8001a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	2280      	movs	r2, #128	@ 0x80
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f004 fc24 	bl	800626a <memset>
  if(huart->Instance==USART3)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a22      	ldr	r2, [pc, #136]	@ (8001ab0 <HAL_UART_MspInit+0xb4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d13c      	bne.n	8001aa6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a30:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a36:	f107 0314 	add.w	r3, r7, #20
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 fa7a 	bl	8003f34 <HAL_RCCEx_PeriphCLKConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a46:	f7ff fec5 	bl	80017d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	4a19      	ldr	r2, [pc, #100]	@ (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a56:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a62:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	4a13      	ldr	r2, [pc, #76]	@ (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6e:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <HAL_UART_MspInit+0xb8>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a94:	2307      	movs	r3, #7
 8001a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a9a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <HAL_UART_MspInit+0xbc>)
 8001aa2:	f000 fb1d 	bl	80020e0 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001aa6:	bf00      	nop
 8001aa8:	37a8      	adds	r7, #168	@ 0xa8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40004800 	.word	0x40004800
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40020c00 	.word	0x40020c00

08001abc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b0aa      	sub	sp, #168	@ 0xa8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2280      	movs	r2, #128	@ 0x80
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 fbc4 	bl	800626a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001aea:	d159      	bne.n	8001ba0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001aec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001af0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	4618      	mov	r0, r3
 8001afe:	f002 fa19 	bl	8003f34 <HAL_RCCEx_PeriphCLKConfig>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001b08:	f7ff fe64 	bl	80017d4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ba8 <HAL_PCD_MspInit+0xec>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b10:	4a25      	ldr	r2, [pc, #148]	@ (8001ba8 <HAL_PCD_MspInit+0xec>)
 8001b12:	f043 0301 	orr.w	r3, r3, #1
 8001b16:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b18:	4b23      	ldr	r3, [pc, #140]	@ (8001ba8 <HAL_PCD_MspInit+0xec>)
 8001b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001b24:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001b28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b3e:	230a      	movs	r3, #10
 8001b40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b44:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4818      	ldr	r0, [pc, #96]	@ (8001bac <HAL_PCD_MspInit+0xf0>)
 8001b4c:	f000 fac8 	bl	80020e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001b50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b54:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4810      	ldr	r0, [pc, #64]	@ (8001bac <HAL_PCD_MspInit+0xf0>)
 8001b6c:	f000 fab8 	bl	80020e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b70:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba8 <HAL_PCD_MspInit+0xec>)
 8001b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b74:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba8 <HAL_PCD_MspInit+0xec>)
 8001b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b7a:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba8 <HAL_PCD_MspInit+0xec>)
 8001b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4b07      	ldr	r3, [pc, #28]	@ (8001ba8 <HAL_PCD_MspInit+0xec>)
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8c:	4a06      	ldr	r2, [pc, #24]	@ (8001ba8 <HAL_PCD_MspInit+0xec>)
 8001b8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b92:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b94:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <HAL_PCD_MspInit+0xec>)
 8001b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b9c:	60bb      	str	r3, [r7, #8]
 8001b9e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001ba0:	bf00      	nop
 8001ba2:	37a8      	adds	r7, #168	@ 0xa8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020000 	.word	0x40020000

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <NMI_Handler+0x4>

08001bb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <HardFault_Handler+0x4>

08001bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <MemManage_Handler+0x4>

08001bc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <BusFault_Handler+0x4>

08001bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <UsageFault_Handler+0x4>

08001bd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c06:	f000 f941 	bl	8001e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  return 1;
 8001c12:	2301      	movs	r3, #1
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <_kill>:

int _kill(int pid, int sig)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c28:	f004 fb72 	bl	8006310 <__errno>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2216      	movs	r2, #22
 8001c30:	601a      	str	r2, [r3, #0]
  return -1;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <_exit>:

void _exit (int status)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b082      	sub	sp, #8
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c46:	f04f 31ff 	mov.w	r1, #4294967295
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff ffe7 	bl	8001c1e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c50:	bf00      	nop
 8001c52:	e7fd      	b.n	8001c50 <_exit+0x12>

08001c54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	e00a      	b.n	8001c7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c66:	f3af 8000 	nop.w
 8001c6a:	4601      	mov	r1, r0
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	60ba      	str	r2, [r7, #8]
 8001c72:	b2ca      	uxtb	r2, r1
 8001c74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	dbf0      	blt.n	8001c66 <_read+0x12>
  }

  return len;
 8001c84:	687b      	ldr	r3, [r7, #4]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	e009      	b.n	8001cb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	60ba      	str	r2, [r7, #8]
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fb23 	bl	80012f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	dbf1      	blt.n	8001ca0 <_write+0x12>
  }
  return len;
 8001cbc:	687b      	ldr	r3, [r7, #4]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_close>:

int _close(int file)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
 8001ce6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cee:	605a      	str	r2, [r3, #4]
  return 0;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr

08001cfe <_isatty>:

int _isatty(int file)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d06:	2301      	movs	r3, #1
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3714      	adds	r7, #20
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
	...

08001d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d38:	4a14      	ldr	r2, [pc, #80]	@ (8001d8c <_sbrk+0x5c>)
 8001d3a:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <_sbrk+0x60>)
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d44:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <_sbrk+0x64>)
 8001d4e:	4a12      	ldr	r2, [pc, #72]	@ (8001d98 <_sbrk+0x68>)
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d207      	bcs.n	8001d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d60:	f004 fad6 	bl	8006310 <__errno>
 8001d64:	4603      	mov	r3, r0
 8001d66:	220c      	movs	r2, #12
 8001d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6e:	e009      	b.n	8001d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d76:	4b07      	ldr	r3, [pc, #28]	@ (8001d94 <_sbrk+0x64>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a05      	ldr	r2, [pc, #20]	@ (8001d94 <_sbrk+0x64>)
 8001d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d82:	68fb      	ldr	r3, [r7, #12]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20040000 	.word	0x20040000
 8001d90:	00000400 	.word	0x00000400
 8001d94:	200008a4 	.word	0x200008a4
 8001d98:	200009f8 	.word	0x200009f8

08001d9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da0:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <SystemInit+0x20>)
 8001da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001da6:	4a05      	ldr	r2, [pc, #20]	@ (8001dbc <SystemInit+0x20>)
 8001da8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001df8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001dc4:	f7ff ffea 	bl	8001d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dc8:	480c      	ldr	r0, [pc, #48]	@ (8001dfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dca:	490d      	ldr	r1, [pc, #52]	@ (8001e00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd0:	e002      	b.n	8001dd8 <LoopCopyDataInit>

08001dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd6:	3304      	adds	r3, #4

08001dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ddc:	d3f9      	bcc.n	8001dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dde:	4a0a      	ldr	r2, [pc, #40]	@ (8001e08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001de0:	4c0a      	ldr	r4, [pc, #40]	@ (8001e0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de4:	e001      	b.n	8001dea <LoopFillZerobss>

08001de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de8:	3204      	adds	r2, #4

08001dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dec:	d3fb      	bcc.n	8001de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dee:	f004 fa95 	bl	800631c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001df2:	f7ff fa91 	bl	8001318 <main>
  bx  lr    
 8001df6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001df8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e00:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001e04:	08008828 	.word	0x08008828
  ldr r2, =_sbss
 8001e08:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001e0c:	200009f8 	.word	0x200009f8

08001e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e10:	e7fe      	b.n	8001e10 <ADC_IRQHandler>

08001e12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e16:	2003      	movs	r0, #3
 8001e18:	f000 f92e 	bl	8002078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f000 f805 	bl	8001e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e22:	f7ff fcdd 	bl	80017e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e34:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <HAL_InitTick+0x54>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <HAL_InitTick+0x58>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f93b 	bl	80020c6 <HAL_SYSTICK_Config>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00e      	b.n	8001e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b0f      	cmp	r3, #15
 8001e5e:	d80a      	bhi.n	8001e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e60:	2200      	movs	r2, #0
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f000 f911 	bl	800208e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e6c:	4a06      	ldr	r2, [pc, #24]	@ (8001e88 <HAL_InitTick+0x5c>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e000      	b.n	8001e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000000 	.word	0x20000000
 8001e84:	20000008 	.word	0x20000008
 8001e88:	20000004 	.word	0x20000004

08001e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_IncTick+0x20>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_IncTick+0x24>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a04      	ldr	r2, [pc, #16]	@ (8001eb0 <HAL_IncTick+0x24>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000008 	.word	0x20000008
 8001eb0:	200008a8 	.word	0x200008a8

08001eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <HAL_GetTick+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	200008a8 	.word	0x200008a8

08001ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff ffee 	bl	8001eb4 <HAL_GetTick>
 8001ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d005      	beq.n	8001ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <HAL_Delay+0x44>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ef2:	bf00      	nop
 8001ef4:	f7ff ffde 	bl	8001eb4 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d8f7      	bhi.n	8001ef4 <HAL_Delay+0x28>
  {
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	20000008 	.word	0x20000008

08001f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	4b0b      	ldr	r3, [pc, #44]	@ (8001f54 <__NVIC_SetPriorityGrouping+0x40>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f3c:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f42:	4a04      	ldr	r2, [pc, #16]	@ (8001f54 <__NVIC_SetPriorityGrouping+0x40>)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	60d3      	str	r3, [r2, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00
 8001f58:	05fa0000 	.word	0x05fa0000

08001f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f60:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <__NVIC_GetPriorityGrouping+0x18>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0307 	and.w	r3, r3, #7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db0a      	blt.n	8001fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	490c      	ldr	r1, [pc, #48]	@ (8001fc4 <__NVIC_SetPriority+0x4c>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	0112      	lsls	r2, r2, #4
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa0:	e00a      	b.n	8001fb8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4908      	ldr	r1, [pc, #32]	@ (8001fc8 <__NVIC_SetPriority+0x50>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	761a      	strb	r2, [r3, #24]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	@ 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f1c3 0307 	rsb	r3, r3, #7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	bf28      	it	cs
 8001fea:	2304      	movcs	r3, #4
 8001fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d902      	bls.n	8001ffc <NVIC_EncodePriority+0x30>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3b03      	subs	r3, #3
 8001ffa:	e000      	b.n	8001ffe <NVIC_EncodePriority+0x32>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	f04f 32ff 	mov.w	r2, #4294967295
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	401a      	ands	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002014:	f04f 31ff 	mov.w	r1, #4294967295
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43d9      	mvns	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	4313      	orrs	r3, r2
         );
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	@ 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002044:	d301      	bcc.n	800204a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002046:	2301      	movs	r3, #1
 8002048:	e00f      	b.n	800206a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204a:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <SysTick_Config+0x40>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002052:	210f      	movs	r1, #15
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	f7ff ff8e 	bl	8001f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800205c:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <SysTick_Config+0x40>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002062:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <SysTick_Config+0x40>)
 8002064:	2207      	movs	r2, #7
 8002066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	e000e010 	.word	0xe000e010

08002078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ff47 	bl	8001f14 <__NVIC_SetPriorityGrouping>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a0:	f7ff ff5c 	bl	8001f5c <__NVIC_GetPriorityGrouping>
 80020a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	6978      	ldr	r0, [r7, #20]
 80020ac:	f7ff ff8e 	bl	8001fcc <NVIC_EncodePriority>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff5d 	bl	8001f78 <__NVIC_SetPriority>
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffb0 	bl	8002034 <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	@ 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80020f6:	2300      	movs	r3, #0
 80020f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	e169      	b.n	80023d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002100:	2201      	movs	r2, #1
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	4013      	ands	r3, r2
 8002112:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002114:	693a      	ldr	r2, [r7, #16]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	429a      	cmp	r2, r3
 800211a:	f040 8158 	bne.w	80023ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d005      	beq.n	8002136 <HAL_GPIO_Init+0x56>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 0303 	and.w	r3, r3, #3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d130      	bne.n	8002198 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	2203      	movs	r2, #3
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	68da      	ldr	r2, [r3, #12]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800216c:	2201      	movs	r2, #1
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 0201 	and.w	r2, r3, #1
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b03      	cmp	r3, #3
 80021a2:	d017      	beq.n	80021d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	69fb      	ldr	r3, [r7, #28]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d123      	bne.n	8002228 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	08da      	lsrs	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3208      	adds	r2, #8
 80021e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	220f      	movs	r2, #15
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	08da      	lsrs	r2, r3, #3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3208      	adds	r2, #8
 8002222:	69b9      	ldr	r1, [r7, #24]
 8002224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	4013      	ands	r3, r2
 800223e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 0203 	and.w	r2, r3, #3
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 80b2 	beq.w	80023ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800226a:	4b60      	ldr	r3, [pc, #384]	@ (80023ec <HAL_GPIO_Init+0x30c>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	4a5f      	ldr	r2, [pc, #380]	@ (80023ec <HAL_GPIO_Init+0x30c>)
 8002270:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002274:	6453      	str	r3, [r2, #68]	@ 0x44
 8002276:	4b5d      	ldr	r3, [pc, #372]	@ (80023ec <HAL_GPIO_Init+0x30c>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002282:	4a5b      	ldr	r2, [pc, #364]	@ (80023f0 <HAL_GPIO_Init+0x310>)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	220f      	movs	r2, #15
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a52      	ldr	r2, [pc, #328]	@ (80023f4 <HAL_GPIO_Init+0x314>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d02b      	beq.n	8002306 <HAL_GPIO_Init+0x226>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a51      	ldr	r2, [pc, #324]	@ (80023f8 <HAL_GPIO_Init+0x318>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d025      	beq.n	8002302 <HAL_GPIO_Init+0x222>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a50      	ldr	r2, [pc, #320]	@ (80023fc <HAL_GPIO_Init+0x31c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01f      	beq.n	80022fe <HAL_GPIO_Init+0x21e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4f      	ldr	r2, [pc, #316]	@ (8002400 <HAL_GPIO_Init+0x320>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d019      	beq.n	80022fa <HAL_GPIO_Init+0x21a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4e      	ldr	r2, [pc, #312]	@ (8002404 <HAL_GPIO_Init+0x324>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <HAL_GPIO_Init+0x216>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002408 <HAL_GPIO_Init+0x328>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00d      	beq.n	80022f2 <HAL_GPIO_Init+0x212>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4c      	ldr	r2, [pc, #304]	@ (800240c <HAL_GPIO_Init+0x32c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <HAL_GPIO_Init+0x20e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002410 <HAL_GPIO_Init+0x330>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d101      	bne.n	80022ea <HAL_GPIO_Init+0x20a>
 80022e6:	2307      	movs	r3, #7
 80022e8:	e00e      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022ea:	2308      	movs	r3, #8
 80022ec:	e00c      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022ee:	2306      	movs	r3, #6
 80022f0:	e00a      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022f2:	2305      	movs	r3, #5
 80022f4:	e008      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022f6:	2304      	movs	r3, #4
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022fa:	2303      	movs	r3, #3
 80022fc:	e004      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022fe:	2302      	movs	r3, #2
 8002300:	e002      	b.n	8002308 <HAL_GPIO_Init+0x228>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_GPIO_Init+0x228>
 8002306:	2300      	movs	r3, #0
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	f002 0203 	and.w	r2, r2, #3
 800230e:	0092      	lsls	r2, r2, #2
 8002310:	4093      	lsls	r3, r2
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002318:	4935      	ldr	r1, [pc, #212]	@ (80023f0 <HAL_GPIO_Init+0x310>)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	3302      	adds	r3, #2
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002326:	4b3b      	ldr	r3, [pc, #236]	@ (8002414 <HAL_GPIO_Init+0x334>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234a:	4a32      	ldr	r2, [pc, #200]	@ (8002414 <HAL_GPIO_Init+0x334>)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002350:	4b30      	ldr	r3, [pc, #192]	@ (8002414 <HAL_GPIO_Init+0x334>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002374:	4a27      	ldr	r2, [pc, #156]	@ (8002414 <HAL_GPIO_Init+0x334>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800237a:	4b26      	ldr	r3, [pc, #152]	@ (8002414 <HAL_GPIO_Init+0x334>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800239e:	4a1d      	ldr	r2, [pc, #116]	@ (8002414 <HAL_GPIO_Init+0x334>)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002414 <HAL_GPIO_Init+0x334>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c8:	4a12      	ldr	r2, [pc, #72]	@ (8002414 <HAL_GPIO_Init+0x334>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3301      	adds	r3, #1
 80023d2:	61fb      	str	r3, [r7, #28]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b0f      	cmp	r3, #15
 80023d8:	f67f ae92 	bls.w	8002100 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3724      	adds	r7, #36	@ 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40013800 	.word	0x40013800
 80023f4:	40020000 	.word	0x40020000
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020c00 	.word	0x40020c00
 8002404:	40021000 	.word	0x40021000
 8002408:	40021400 	.word	0x40021400
 800240c:	40021800 	.word	0x40021800
 8002410:	40021c00 	.word	0x40021c00
 8002414:	40013c00 	.word	0x40013c00

08002418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	807b      	strh	r3, [r7, #2]
 8002424:	4613      	mov	r3, r2
 8002426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002428:	787b      	ldrb	r3, [r7, #1]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800242e:	887a      	ldrh	r2, [r7, #2]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002434:	e003      	b.n	800243e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	041a      	lsls	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	619a      	str	r2, [r3, #24]
}
 800243e:	bf00      	nop
 8002440:	370c      	adds	r7, #12
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e08b      	b.n	8002576 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff f9d8 	bl	8001828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2224      	movs	r2, #36	@ 0x24
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0201 	bic.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800249c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d107      	bne.n	80024c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	e006      	b.n	80024d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689a      	ldr	r2, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80024d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d108      	bne.n	80024ee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	e007      	b.n	80024fe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4b1d      	ldr	r3, [pc, #116]	@ (8002580 <HAL_I2C_Init+0x134>)
 800250a:	430b      	orrs	r3, r1
 800250c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800251c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69d9      	ldr	r1, [r3, #28]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1a      	ldr	r2, [r3, #32]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	02008000 	.word	0x02008000

08002584 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af02      	add	r7, sp, #8
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	4608      	mov	r0, r1
 800258e:	4611      	mov	r1, r2
 8002590:	461a      	mov	r2, r3
 8002592:	4603      	mov	r3, r0
 8002594:	817b      	strh	r3, [r7, #10]
 8002596:	460b      	mov	r3, r1
 8002598:	813b      	strh	r3, [r7, #8]
 800259a:	4613      	mov	r3, r2
 800259c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b20      	cmp	r3, #32
 80025a8:	f040 80f9 	bne.w	800279e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <HAL_I2C_Mem_Write+0x34>
 80025b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d105      	bne.n	80025c4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025be:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0ed      	b.n	80027a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d101      	bne.n	80025d2 <HAL_I2C_Mem_Write+0x4e>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e0e6      	b.n	80027a0 <HAL_I2C_Mem_Write+0x21c>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025da:	f7ff fc6b 	bl	8001eb4 <HAL_GetTick>
 80025de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	2319      	movs	r3, #25
 80025e6:	2201      	movs	r2, #1
 80025e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 fbaf 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0d1      	b.n	80027a0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2221      	movs	r2, #33	@ 0x21
 8002600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2240      	movs	r2, #64	@ 0x40
 8002608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a3a      	ldr	r2, [r7, #32]
 8002616:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800261c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002624:	88f8      	ldrh	r0, [r7, #6]
 8002626:	893a      	ldrh	r2, [r7, #8]
 8002628:	8979      	ldrh	r1, [r7, #10]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	4603      	mov	r3, r0
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 fabf 	bl	8002bb8 <I2C_RequestMemoryWrite>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0a9      	b.n	80027a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002650:	b29b      	uxth	r3, r3
 8002652:	2bff      	cmp	r3, #255	@ 0xff
 8002654:	d90e      	bls.n	8002674 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	22ff      	movs	r2, #255	@ 0xff
 800265a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002660:	b2da      	uxtb	r2, r3
 8002662:	8979      	ldrh	r1, [r7, #10]
 8002664:	2300      	movs	r3, #0
 8002666:	9300      	str	r3, [sp, #0]
 8002668:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fd33 	bl	80030d8 <I2C_TransferConfig>
 8002672:	e00f      	b.n	8002694 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002678:	b29a      	uxth	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002682:	b2da      	uxtb	r2, r3
 8002684:	8979      	ldrh	r1, [r7, #10]
 8002686:	2300      	movs	r3, #0
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 fd22 	bl	80030d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f000 fbb2 	bl	8002e02 <I2C_WaitOnTXISFlagUntilTimeout>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e07b      	b.n	80027a0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	781a      	ldrb	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d034      	beq.n	800274c <HAL_I2C_Mem_Write+0x1c8>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d130      	bne.n	800274c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f0:	2200      	movs	r2, #0
 80026f2:	2180      	movs	r1, #128	@ 0x80
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 fb2b 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e04d      	b.n	80027a0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	2bff      	cmp	r3, #255	@ 0xff
 800270c:	d90e      	bls.n	800272c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	22ff      	movs	r2, #255	@ 0xff
 8002712:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002718:	b2da      	uxtb	r2, r3
 800271a:	8979      	ldrh	r1, [r7, #10]
 800271c:	2300      	movs	r3, #0
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fcd7 	bl	80030d8 <I2C_TransferConfig>
 800272a:	e00f      	b.n	800274c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800273a:	b2da      	uxtb	r2, r3
 800273c:	8979      	ldrh	r1, [r7, #10]
 800273e:	2300      	movs	r3, #0
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 fcc6 	bl	80030d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d19e      	bne.n	8002694 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fb98 	bl	8002e90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e01a      	b.n	80027a0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2220      	movs	r2, #32
 8002770:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b0a      	ldr	r3, [pc, #40]	@ (80027a8 <HAL_I2C_Mem_Write+0x224>)
 800277e:	400b      	ands	r3, r1
 8002780:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2220      	movs	r2, #32
 8002786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	e000      	b.n	80027a0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800279e:	2302      	movs	r3, #2
  }
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	fe00e800 	.word	0xfe00e800

080027ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	4608      	mov	r0, r1
 80027b6:	4611      	mov	r1, r2
 80027b8:	461a      	mov	r2, r3
 80027ba:	4603      	mov	r3, r0
 80027bc:	817b      	strh	r3, [r7, #10]
 80027be:	460b      	mov	r3, r1
 80027c0:	813b      	strh	r3, [r7, #8]
 80027c2:	4613      	mov	r3, r2
 80027c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	f040 80fd 	bne.w	80029ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <HAL_I2C_Mem_Read+0x34>
 80027da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0f1      	b.n	80029d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_I2C_Mem_Read+0x4e>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e0ea      	b.n	80029d0 <HAL_I2C_Mem_Read+0x224>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002802:	f7ff fb57 	bl	8001eb4 <HAL_GetTick>
 8002806:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2319      	movs	r3, #25
 800280e:	2201      	movs	r2, #1
 8002810:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 fa9b 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e0d5      	b.n	80029d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2222      	movs	r2, #34	@ 0x22
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2240      	movs	r2, #64	@ 0x40
 8002830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a3a      	ldr	r2, [r7, #32]
 800283e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002844:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800284c:	88f8      	ldrh	r0, [r7, #6]
 800284e:	893a      	ldrh	r2, [r7, #8]
 8002850:	8979      	ldrh	r1, [r7, #10]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	4603      	mov	r3, r0
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f9ff 	bl	8002c60 <I2C_RequestMemoryRead>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d005      	beq.n	8002874 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0ad      	b.n	80029d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002878:	b29b      	uxth	r3, r3
 800287a:	2bff      	cmp	r3, #255	@ 0xff
 800287c:	d90e      	bls.n	800289c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002888:	b2da      	uxtb	r2, r3
 800288a:	8979      	ldrh	r1, [r7, #10]
 800288c:	4b52      	ldr	r3, [pc, #328]	@ (80029d8 <HAL_I2C_Mem_Read+0x22c>)
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 fc1f 	bl	80030d8 <I2C_TransferConfig>
 800289a:	e00f      	b.n	80028bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	8979      	ldrh	r1, [r7, #10]
 80028ae:	4b4a      	ldr	r3, [pc, #296]	@ (80029d8 <HAL_I2C_Mem_Read+0x22c>)
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 fc0e 	bl	80030d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c2:	2200      	movs	r2, #0
 80028c4:	2104      	movs	r1, #4
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fa42 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e07c      	b.n	80029d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d034      	beq.n	800297c <HAL_I2C_Mem_Read+0x1d0>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002916:	2b00      	cmp	r3, #0
 8002918:	d130      	bne.n	800297c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002920:	2200      	movs	r2, #0
 8002922:	2180      	movs	r1, #128	@ 0x80
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 fa13 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e04d      	b.n	80029d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002938:	b29b      	uxth	r3, r3
 800293a:	2bff      	cmp	r3, #255	@ 0xff
 800293c:	d90e      	bls.n	800295c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002948:	b2da      	uxtb	r2, r3
 800294a:	8979      	ldrh	r1, [r7, #10]
 800294c:	2300      	movs	r3, #0
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fbbf 	bl	80030d8 <I2C_TransferConfig>
 800295a:	e00f      	b.n	800297c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296a:	b2da      	uxtb	r2, r3
 800296c:	8979      	ldrh	r1, [r7, #10]
 800296e:	2300      	movs	r3, #0
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002976:	68f8      	ldr	r0, [r7, #12]
 8002978:	f000 fbae 	bl	80030d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d19a      	bne.n	80028bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 fa80 	bl	8002e90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e01a      	b.n	80029d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2220      	movs	r2, #32
 80029a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6859      	ldr	r1, [r3, #4]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4b0b      	ldr	r3, [pc, #44]	@ (80029dc <HAL_I2C_Mem_Read+0x230>)
 80029ae:	400b      	ands	r3, r1
 80029b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e000      	b.n	80029d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80029ce:	2302      	movs	r3, #2
  }
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	80002400 	.word	0x80002400
 80029dc:	fe00e800 	.word	0xfe00e800

080029e0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	@ 0x28
 80029e4:	af02      	add	r7, sp, #8
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	460b      	mov	r3, r1
 80029ee:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	f040 80d2 	bne.w	8002ba6 <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a10:	d101      	bne.n	8002a16 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002a12:	2302      	movs	r3, #2
 8002a14:	e0c8      	b.n	8002ba8 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_I2C_IsDeviceReady+0x44>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e0c1      	b.n	8002ba8 <HAL_I2C_IsDeviceReady+0x1c8>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2224      	movs	r2, #36	@ 0x24
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <HAL_I2C_IsDeviceReady+0x6e>
 8002a42:	897b      	ldrh	r3, [r7, #10]
 8002a44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a48:	4b59      	ldr	r3, [pc, #356]	@ (8002bb0 <HAL_I2C_IsDeviceReady+0x1d0>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	e004      	b.n	8002a58 <HAL_I2C_IsDeviceReady+0x78>
 8002a4e:	897b      	ldrh	r3, [r7, #10]
 8002a50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a54:	4b57      	ldr	r3, [pc, #348]	@ (8002bb4 <HAL_I2C_IsDeviceReady+0x1d4>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	6812      	ldr	r2, [r2, #0]
 8002a5c:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002a5e:	f7ff fa29 	bl	8001eb4 <HAL_GetTick>
 8002a62:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	bf0c      	ite	eq
 8002a72:	2301      	moveq	r3, #1
 8002a74:	2300      	movne	r3, #0
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f003 0310 	and.w	r3, r3, #16
 8002a84:	2b10      	cmp	r3, #16
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002a90:	e034      	b.n	8002afc <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a98:	d01a      	beq.n	8002ad0 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a9a:	f7ff fa0b 	bl	8001eb4 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d302      	bcc.n	8002ab0 <HAL_I2C_IsDeviceReady+0xd0>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10f      	bne.n	8002ad0 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e06b      	b.n	8002ba8 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b20      	cmp	r3, #32
 8002adc:	bf0c      	ite	eq
 8002ade:	2301      	moveq	r3, #1
 8002ae0:	2300      	movne	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	bf0c      	ite	eq
 8002af4:	2301      	moveq	r3, #1
 8002af6:	2300      	movne	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002afc:	7ffb      	ldrb	r3, [r7, #31]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d102      	bne.n	8002b08 <HAL_I2C_IsDeviceReady+0x128>
 8002b02:	7fbb      	ldrb	r3, [r7, #30]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0c4      	beq.n	8002a92 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	f003 0310 	and.w	r3, r3, #16
 8002b12:	2b10      	cmp	r3, #16
 8002b14:	d01a      	beq.n	8002b4c <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2120      	movs	r1, #32
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f915 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e03b      	b.n	8002ba8 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2220      	movs	r2, #32
 8002b36:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e02d      	b.n	8002ba8 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2200      	movs	r2, #0
 8002b54:	2120      	movs	r1, #32
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 f8fa 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e020      	b.n	8002ba8 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2220      	movs	r2, #32
 8002b74:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	f63f af5a 	bhi.w	8002a3a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2220      	movs	r2, #32
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	f043 0220 	orr.w	r2, r3, #32
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8002ba6:	2302      	movs	r3, #2
  }
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3720      	adds	r7, #32
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	02002000 	.word	0x02002000
 8002bb4:	02002800 	.word	0x02002800

08002bb8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	4608      	mov	r0, r1
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	817b      	strh	r3, [r7, #10]
 8002bca:	460b      	mov	r3, r1
 8002bcc:	813b      	strh	r3, [r7, #8]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002bd2:	88fb      	ldrh	r3, [r7, #6]
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	8979      	ldrh	r1, [r7, #10]
 8002bd8:	4b20      	ldr	r3, [pc, #128]	@ (8002c5c <I2C_RequestMemoryWrite+0xa4>)
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 fa79 	bl	80030d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be6:	69fa      	ldr	r2, [r7, #28]
 8002be8:	69b9      	ldr	r1, [r7, #24]
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f909 	bl	8002e02 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e02c      	b.n	8002c54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c00:	893b      	ldrh	r3, [r7, #8]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c0a:	e015      	b.n	8002c38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c0c:	893b      	ldrh	r3, [r7, #8]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	69b9      	ldr	r1, [r7, #24]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f8ef 	bl	8002e02 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e012      	b.n	8002c54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c2e:	893b      	ldrh	r3, [r7, #8]
 8002c30:	b2da      	uxtb	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2180      	movs	r1, #128	@ 0x80
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f884 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	80002000 	.word	0x80002000

08002c60 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	4608      	mov	r0, r1
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	817b      	strh	r3, [r7, #10]
 8002c72:	460b      	mov	r3, r1
 8002c74:	813b      	strh	r3, [r7, #8]
 8002c76:	4613      	mov	r3, r2
 8002c78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	8979      	ldrh	r1, [r7, #10]
 8002c80:	4b20      	ldr	r3, [pc, #128]	@ (8002d04 <I2C_RequestMemoryRead+0xa4>)
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	2300      	movs	r3, #0
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 fa26 	bl	80030d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c8c:	69fa      	ldr	r2, [r7, #28]
 8002c8e:	69b9      	ldr	r1, [r7, #24]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f8b6 	bl	8002e02 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e02c      	b.n	8002cfa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d105      	bne.n	8002cb2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ca6:	893b      	ldrh	r3, [r7, #8]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cb0:	e015      	b.n	8002cde <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cb2:	893b      	ldrh	r3, [r7, #8]
 8002cb4:	0a1b      	lsrs	r3, r3, #8
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	69b9      	ldr	r1, [r7, #24]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f89c 	bl	8002e02 <I2C_WaitOnTXISFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e012      	b.n	8002cfa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cd4:	893b      	ldrh	r3, [r7, #8]
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2140      	movs	r1, #64	@ 0x40
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 f831 	bl	8002d50 <I2C_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	80002000 	.word	0x80002000

08002d08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d103      	bne.n	8002d26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2200      	movs	r2, #0
 8002d24:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d007      	beq.n	8002d44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	619a      	str	r2, [r3, #24]
  }
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d60:	e03b      	b.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	6839      	ldr	r1, [r7, #0]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f8d6 	bl	8002f18 <I2C_IsErrorOccurred>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e041      	b.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d02d      	beq.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7e:	f7ff f899 	bl	8001eb4 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d302      	bcc.n	8002d94 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d122      	bne.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699a      	ldr	r2, [r3, #24]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	bf0c      	ite	eq
 8002da4:	2301      	moveq	r3, #1
 8002da6:	2300      	movne	r3, #0
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d113      	bne.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002db6:	f043 0220 	orr.w	r2, r3, #32
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e00f      	b.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699a      	ldr	r2, [r3, #24]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4013      	ands	r3, r2
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	bf0c      	ite	eq
 8002dea:	2301      	moveq	r3, #1
 8002dec:	2300      	movne	r3, #0
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d0b4      	beq.n	8002d62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3710      	adds	r7, #16
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e0e:	e033      	b.n	8002e78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	68b9      	ldr	r1, [r7, #8]
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f87f 	bl	8002f18 <I2C_IsErrorOccurred>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e031      	b.n	8002e88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2a:	d025      	beq.n	8002e78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e2c:	f7ff f842 	bl	8001eb4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d302      	bcc.n	8002e42 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d11a      	bne.n	8002e78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d013      	beq.n	8002e78 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e007      	b.n	8002e88 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d1c4      	bne.n	8002e10 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e9c:	e02f      	b.n	8002efe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f000 f838 	bl	8002f18 <I2C_IsErrorOccurred>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e02d      	b.n	8002f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb2:	f7fe ffff 	bl	8001eb4 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d302      	bcc.n	8002ec8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d11a      	bne.n	8002efe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	2b20      	cmp	r3, #32
 8002ed4:	d013      	beq.n	8002efe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eda:	f043 0220 	orr.w	r2, r3, #32
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e007      	b.n	8002f0e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d1c8      	bne.n	8002e9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3710      	adds	r7, #16
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	@ 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d068      	beq.n	8003016 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2210      	movs	r2, #16
 8002f4a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f4c:	e049      	b.n	8002fe2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d045      	beq.n	8002fe2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f56:	f7fe ffad 	bl	8001eb4 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d302      	bcc.n	8002f6c <I2C_IsErrorOccurred+0x54>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d13a      	bne.n	8002fe2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f76:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f7e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f8e:	d121      	bne.n	8002fd4 <I2C_IsErrorOccurred+0xbc>
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f96:	d01d      	beq.n	8002fd4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	d01a      	beq.n	8002fd4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fae:	f7fe ff81 	bl	8001eb4 <HAL_GetTick>
 8002fb2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fb4:	e00e      	b.n	8002fd4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fb6:	f7fe ff7d 	bl	8001eb4 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	2b19      	cmp	r3, #25
 8002fc2:	d907      	bls.n	8002fd4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	f043 0320 	orr.w	r3, r3, #32
 8002fca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002fd2:	e006      	b.n	8002fe2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b20      	cmp	r3, #32
 8002fe0:	d1e9      	bne.n	8002fb6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	d003      	beq.n	8002ff8 <I2C_IsErrorOccurred+0xe0>
 8002ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0aa      	beq.n	8002f4e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d103      	bne.n	8003008 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2220      	movs	r2, #32
 8003006:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	f043 0304 	orr.w	r3, r3, #4
 800300e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00b      	beq.n	8003040 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003038:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	f043 0308 	orr.w	r3, r3, #8
 8003050:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800305a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00b      	beq.n	8003084 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	f043 0302 	orr.w	r3, r3, #2
 8003072:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800307c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01c      	beq.n	80030c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f7ff fe3b 	bl	8002d08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6859      	ldr	r1, [r3, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	4b0d      	ldr	r3, [pc, #52]	@ (80030d4 <I2C_IsErrorOccurred+0x1bc>)
 800309e:	400b      	ands	r3, r1
 80030a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80030c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3728      	adds	r7, #40	@ 0x28
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	fe00e800 	.word	0xfe00e800

080030d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	607b      	str	r3, [r7, #4]
 80030e2:	460b      	mov	r3, r1
 80030e4:	817b      	strh	r3, [r7, #10]
 80030e6:	4613      	mov	r3, r2
 80030e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030ea:	897b      	ldrh	r3, [r7, #10]
 80030ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030f0:	7a7b      	ldrb	r3, [r7, #9]
 80030f2:	041b      	lsls	r3, r3, #16
 80030f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	4313      	orrs	r3, r2
 8003102:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003106:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	0d5b      	lsrs	r3, r3, #21
 8003112:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003116:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <I2C_TransferConfig+0x60>)
 8003118:	430b      	orrs	r3, r1
 800311a:	43db      	mvns	r3, r3
 800311c:	ea02 0103 	and.w	r1, r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800312a:	bf00      	nop
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	03ff63ff 	.word	0x03ff63ff

0800313c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b20      	cmp	r3, #32
 8003150:	d138      	bne.n	80031c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800315c:	2302      	movs	r3, #2
 800315e:	e032      	b.n	80031c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2224      	movs	r2, #36	@ 0x24
 800316c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0201 	bic.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800318e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6819      	ldr	r1, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e000      	b.n	80031c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
  }
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	370c      	adds	r7, #12
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031d2:	b480      	push	{r7}
 80031d4:	b085      	sub	sp, #20
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b20      	cmp	r3, #32
 80031e6:	d139      	bne.n	800325c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e033      	b.n	800325e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2224      	movs	r2, #36	@ 0x24
 8003202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0201 	bic.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003224:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	021b      	lsls	r3, r3, #8
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	e000      	b.n	800325e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800325c:	2302      	movs	r3, #2
  }
}
 800325e:	4618      	mov	r0, r3
 8003260:	3714      	adds	r7, #20
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b086      	sub	sp, #24
 800326e:	af02      	add	r7, sp, #8
 8003270:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e108      	b.n	800348e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d106      	bne.n	800329c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fe fc10 	bl	8001abc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2203      	movs	r2, #3
 80032a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032aa:	d102      	bne.n	80032b2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 ffc2 	bl	8005240 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	7c1a      	ldrb	r2, [r3, #16]
 80032c4:	f88d 2000 	strb.w	r2, [sp]
 80032c8:	3304      	adds	r3, #4
 80032ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032cc:	f001 ff2c 	bl	8005128 <USB_CoreInit>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e0d5      	b.n	800348e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2100      	movs	r1, #0
 80032e8:	4618      	mov	r0, r3
 80032ea:	f001 ffba 	bl	8005262 <USB_SetCurrentMode>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e0c6      	b.n	800348e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003300:	2300      	movs	r3, #0
 8003302:	73fb      	strb	r3, [r7, #15]
 8003304:	e04a      	b.n	800339c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003306:	7bfa      	ldrb	r2, [r7, #15]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	3315      	adds	r3, #21
 8003316:	2201      	movs	r2, #1
 8003318:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800331a:	7bfa      	ldrb	r2, [r7, #15]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	4413      	add	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	3314      	adds	r3, #20
 800332a:	7bfa      	ldrb	r2, [r7, #15]
 800332c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800332e:	7bfa      	ldrb	r2, [r7, #15]
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	b298      	uxth	r0, r3
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	4413      	add	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	332e      	adds	r3, #46	@ 0x2e
 8003342:	4602      	mov	r2, r0
 8003344:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003346:	7bfa      	ldrb	r2, [r7, #15]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	3318      	adds	r3, #24
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800335a:	7bfa      	ldrb	r2, [r7, #15]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4413      	add	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	331c      	adds	r3, #28
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	3320      	adds	r3, #32
 800337e:	2200      	movs	r2, #0
 8003380:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003382:	7bfa      	ldrb	r2, [r7, #15]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	3324      	adds	r3, #36	@ 0x24
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	3301      	adds	r3, #1
 800339a:	73fb      	strb	r3, [r7, #15]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	791b      	ldrb	r3, [r3, #4]
 80033a0:	7bfa      	ldrb	r2, [r7, #15]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d3af      	bcc.n	8003306 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
 80033aa:	e044      	b.n	8003436 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033ac:	7bfa      	ldrb	r2, [r7, #15]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033c2:	7bfa      	ldrb	r2, [r7, #15]
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	4413      	add	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033ee:	7bfa      	ldrb	r2, [r7, #15]
 80033f0:	6879      	ldr	r1, [r7, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	4413      	add	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	440b      	add	r3, r1
 80033fc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	4613      	mov	r3, r2
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	440b      	add	r3, r1
 8003412:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003416:	2200      	movs	r2, #0
 8003418:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800341a:	7bfa      	ldrb	r2, [r7, #15]
 800341c:	6879      	ldr	r1, [r7, #4]
 800341e:	4613      	mov	r3, r2
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	4413      	add	r3, r2
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	440b      	add	r3, r1
 8003428:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800342c:	2200      	movs	r2, #0
 800342e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003430:	7bfb      	ldrb	r3, [r7, #15]
 8003432:	3301      	adds	r3, #1
 8003434:	73fb      	strb	r3, [r7, #15]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	791b      	ldrb	r3, [r3, #4]
 800343a:	7bfa      	ldrb	r2, [r7, #15]
 800343c:	429a      	cmp	r2, r3
 800343e:	d3b5      	bcc.n	80033ac <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7c1a      	ldrb	r2, [r3, #16]
 8003448:	f88d 2000 	strb.w	r2, [sp]
 800344c:	3304      	adds	r3, #4
 800344e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003450:	f001 ff54 	bl	80052fc <USB_DevInit>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2202      	movs	r2, #2
 800345e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e013      	b.n	800348e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	7b1b      	ldrb	r3, [r3, #12]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d102      	bne.n	8003482 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f000 f80b 	bl	8003498 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f002 f921 	bl	80056ce <USB_DevDisconnect>

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
	...

08003498 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034c6:	4b05      	ldr	r3, [pc, #20]	@ (80034dc <HAL_PCDEx_ActivateLPM+0x44>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	10000003 	.word	0x10000003

080034e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034e4:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a04      	ldr	r2, [pc, #16]	@ (80034fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80034ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ee:	6013      	str	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	40007000 	.word	0x40007000

08003500 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	4b23      	ldr	r3, [pc, #140]	@ (8003598 <HAL_PWREx_EnableOverDrive+0x98>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800350e:	4a22      	ldr	r2, [pc, #136]	@ (8003598 <HAL_PWREx_EnableOverDrive+0x98>)
 8003510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003514:	6413      	str	r3, [r2, #64]	@ 0x40
 8003516:	4b20      	ldr	r3, [pc, #128]	@ (8003598 <HAL_PWREx_EnableOverDrive+0x98>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003522:	4b1e      	ldr	r3, [pc, #120]	@ (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a1d      	ldr	r2, [pc, #116]	@ (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800352c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800352e:	f7fe fcc1 	bl	8001eb4 <HAL_GetTick>
 8003532:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003534:	e009      	b.n	800354a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003536:	f7fe fcbd 	bl	8001eb4 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003544:	d901      	bls.n	800354a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e022      	b.n	8003590 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800354a:	4b14      	ldr	r3, [pc, #80]	@ (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003552:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003556:	d1ee      	bne.n	8003536 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003558:	4b10      	ldr	r3, [pc, #64]	@ (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0f      	ldr	r2, [pc, #60]	@ (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 800355e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003562:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003564:	f7fe fca6 	bl	8001eb4 <HAL_GetTick>
 8003568:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800356a:	e009      	b.n	8003580 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800356c:	f7fe fca2 	bl	8001eb4 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800357a:	d901      	bls.n	8003580 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e007      	b.n	8003590 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003580:	4b06      	ldr	r3, [pc, #24]	@ (800359c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003588:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800358c:	d1ee      	bne.n	800356c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40023800 	.word	0x40023800
 800359c:	40007000 	.word	0x40007000

080035a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035a8:	2300      	movs	r3, #0
 80035aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e291      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8087 	beq.w	80036d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035c4:	4b96      	ldr	r3, [pc, #600]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d00c      	beq.n	80035ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d0:	4b93      	ldr	r3, [pc, #588]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f003 030c 	and.w	r3, r3, #12
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d112      	bne.n	8003602 <HAL_RCC_OscConfig+0x62>
 80035dc:	4b90      	ldr	r3, [pc, #576]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035e8:	d10b      	bne.n	8003602 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d06c      	beq.n	80036d0 <HAL_RCC_OscConfig+0x130>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d168      	bne.n	80036d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e26b      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800360a:	d106      	bne.n	800361a <HAL_RCC_OscConfig+0x7a>
 800360c:	4b84      	ldr	r3, [pc, #528]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a83      	ldr	r2, [pc, #524]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	e02e      	b.n	8003678 <HAL_RCC_OscConfig+0xd8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10c      	bne.n	800363c <HAL_RCC_OscConfig+0x9c>
 8003622:	4b7f      	ldr	r3, [pc, #508]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a7e      	ldr	r2, [pc, #504]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003628:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	4b7c      	ldr	r3, [pc, #496]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a7b      	ldr	r2, [pc, #492]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003634:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	e01d      	b.n	8003678 <HAL_RCC_OscConfig+0xd8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003644:	d10c      	bne.n	8003660 <HAL_RCC_OscConfig+0xc0>
 8003646:	4b76      	ldr	r3, [pc, #472]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a75      	ldr	r2, [pc, #468]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800364c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	4b73      	ldr	r3, [pc, #460]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a72      	ldr	r2, [pc, #456]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	e00b      	b.n	8003678 <HAL_RCC_OscConfig+0xd8>
 8003660:	4b6f      	ldr	r3, [pc, #444]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a6e      	ldr	r2, [pc, #440]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003666:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800366a:	6013      	str	r3, [r2, #0]
 800366c:	4b6c      	ldr	r3, [pc, #432]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a6b      	ldr	r2, [pc, #428]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003672:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d013      	beq.n	80036a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003680:	f7fe fc18 	bl	8001eb4 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003688:	f7fe fc14 	bl	8001eb4 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	@ 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e21f      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369a:	4b61      	ldr	r3, [pc, #388]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f0      	beq.n	8003688 <HAL_RCC_OscConfig+0xe8>
 80036a6:	e014      	b.n	80036d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fe fc04 	bl	8001eb4 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b0:	f7fe fc00 	bl	8001eb4 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b64      	cmp	r3, #100	@ 0x64
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e20b      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c2:	4b57      	ldr	r3, [pc, #348]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x110>
 80036ce:	e000      	b.n	80036d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d069      	beq.n	80037b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80036de:	4b50      	ldr	r3, [pc, #320]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 030c 	and.w	r3, r3, #12
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00b      	beq.n	8003702 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ea:	4b4d      	ldr	r3, [pc, #308]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f003 030c 	and.w	r3, r3, #12
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d11c      	bne.n	8003730 <HAL_RCC_OscConfig+0x190>
 80036f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d116      	bne.n	8003730 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003702:	4b47      	ldr	r3, [pc, #284]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d005      	beq.n	800371a <HAL_RCC_OscConfig+0x17a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d001      	beq.n	800371a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e1df      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371a:	4b41      	ldr	r3, [pc, #260]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	493d      	ldr	r1, [pc, #244]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372e:	e040      	b.n	80037b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d023      	beq.n	8003780 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003738:	4b39      	ldr	r3, [pc, #228]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a38      	ldr	r2, [pc, #224]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800373e:	f043 0301 	orr.w	r3, r3, #1
 8003742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fe fbb6 	bl	8001eb4 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374c:	f7fe fbb2 	bl	8001eb4 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e1bd      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375e:	4b30      	ldr	r3, [pc, #192]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376a:	4b2d      	ldr	r3, [pc, #180]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	691b      	ldr	r3, [r3, #16]
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4929      	ldr	r1, [pc, #164]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 800377a:	4313      	orrs	r3, r2
 800377c:	600b      	str	r3, [r1, #0]
 800377e:	e018      	b.n	80037b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003780:	4b27      	ldr	r3, [pc, #156]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a26      	ldr	r2, [pc, #152]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7fe fb92 	bl	8001eb4 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003794:	f7fe fb8e 	bl	8001eb4 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e199      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0308 	and.w	r3, r3, #8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d038      	beq.n	8003830 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d019      	beq.n	80037fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c6:	4b16      	ldr	r3, [pc, #88]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80037c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037ca:	4a15      	ldr	r2, [pc, #84]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80037cc:	f043 0301 	orr.w	r3, r3, #1
 80037d0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d2:	f7fe fb6f 	bl	8001eb4 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037da:	f7fe fb6b 	bl	8001eb4 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e176      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80037ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f0      	beq.n	80037da <HAL_RCC_OscConfig+0x23a>
 80037f8:	e01a      	b.n	8003830 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037fa:	4b09      	ldr	r3, [pc, #36]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 80037fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037fe:	4a08      	ldr	r2, [pc, #32]	@ (8003820 <HAL_RCC_OscConfig+0x280>)
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003806:	f7fe fb55 	bl	8001eb4 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380c:	e00a      	b.n	8003824 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800380e:	f7fe fb51 	bl	8001eb4 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d903      	bls.n	8003824 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e15c      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
 8003820:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	4b91      	ldr	r3, [pc, #580]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1ee      	bne.n	800380e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80a4 	beq.w	8003986 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383e:	4b8b      	ldr	r3, [pc, #556]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10d      	bne.n	8003866 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	4b88      	ldr	r3, [pc, #544]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	4a87      	ldr	r2, [pc, #540]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003854:	6413      	str	r3, [r2, #64]	@ 0x40
 8003856:	4b85      	ldr	r3, [pc, #532]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003862:	2301      	movs	r3, #1
 8003864:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003866:	4b82      	ldr	r3, [pc, #520]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d118      	bne.n	80038a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003872:	4b7f      	ldr	r3, [pc, #508]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a7e      	ldr	r2, [pc, #504]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800387c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387e:	f7fe fb19 	bl	8001eb4 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003886:	f7fe fb15 	bl	8001eb4 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b64      	cmp	r3, #100	@ 0x64
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e120      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003898:	4b75      	ldr	r3, [pc, #468]	@ (8003a70 <HAL_RCC_OscConfig+0x4d0>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d106      	bne.n	80038ba <HAL_RCC_OscConfig+0x31a>
 80038ac:	4b6f      	ldr	r3, [pc, #444]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b0:	4a6e      	ldr	r2, [pc, #440]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b8:	e02d      	b.n	8003916 <HAL_RCC_OscConfig+0x376>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0x33c>
 80038c2:	4b6a      	ldr	r3, [pc, #424]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c6:	4a69      	ldr	r2, [pc, #420]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ce:	4b67      	ldr	r3, [pc, #412]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d2:	4a66      	ldr	r2, [pc, #408]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038d4:	f023 0304 	bic.w	r3, r3, #4
 80038d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038da:	e01c      	b.n	8003916 <HAL_RCC_OscConfig+0x376>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b05      	cmp	r3, #5
 80038e2:	d10c      	bne.n	80038fe <HAL_RCC_OscConfig+0x35e>
 80038e4:	4b61      	ldr	r3, [pc, #388]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e8:	4a60      	ldr	r2, [pc, #384]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038ea:	f043 0304 	orr.w	r3, r3, #4
 80038ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80038f0:	4b5e      	ldr	r3, [pc, #376]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f4:	4a5d      	ldr	r2, [pc, #372]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80038fc:	e00b      	b.n	8003916 <HAL_RCC_OscConfig+0x376>
 80038fe:	4b5b      	ldr	r3, [pc, #364]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003902:	4a5a      	ldr	r2, [pc, #360]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003904:	f023 0301 	bic.w	r3, r3, #1
 8003908:	6713      	str	r3, [r2, #112]	@ 0x70
 800390a:	4b58      	ldr	r3, [pc, #352]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390e:	4a57      	ldr	r2, [pc, #348]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003910:	f023 0304 	bic.w	r3, r3, #4
 8003914:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d015      	beq.n	800394a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391e:	f7fe fac9 	bl	8001eb4 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003924:	e00a      	b.n	800393c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003926:	f7fe fac5 	bl	8001eb4 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003934:	4293      	cmp	r3, r2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e0ce      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800393c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0ee      	beq.n	8003926 <HAL_RCC_OscConfig+0x386>
 8003948:	e014      	b.n	8003974 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394a:	f7fe fab3 	bl	8001eb4 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003950:	e00a      	b.n	8003968 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003952:	f7fe faaf 	bl	8001eb4 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003960:	4293      	cmp	r3, r2
 8003962:	d901      	bls.n	8003968 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e0b8      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003968:	4b40      	ldr	r3, [pc, #256]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d1ee      	bne.n	8003952 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003974:	7dfb      	ldrb	r3, [r7, #23]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d105      	bne.n	8003986 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397a:	4b3c      	ldr	r3, [pc, #240]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 800397c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397e:	4a3b      	ldr	r2, [pc, #236]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003980:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003984:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	2b00      	cmp	r3, #0
 800398c:	f000 80a4 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003990:	4b36      	ldr	r3, [pc, #216]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b08      	cmp	r3, #8
 800399a:	d06b      	beq.n	8003a74 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d149      	bne.n	8003a38 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039a4:	4b31      	ldr	r3, [pc, #196]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a30      	ldr	r2, [pc, #192]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80039aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe fa80 	bl	8001eb4 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b8:	f7fe fa7c 	bl	8001eb4 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e087      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	4b28      	ldr	r3, [pc, #160]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	019b      	lsls	r3, r3, #6
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	3b01      	subs	r3, #1
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f8:	061b      	lsls	r3, r3, #24
 80039fa:	4313      	orrs	r3, r2
 80039fc:	4a1b      	ldr	r2, [pc, #108]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 80039fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003a02:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a04:	4b19      	ldr	r3, [pc, #100]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a18      	ldr	r2, [pc, #96]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003a0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fe fa50 	bl	8001eb4 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fe fa4c 	bl	8001eb4 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e057      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a2a:	4b10      	ldr	r3, [pc, #64]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x478>
 8003a36:	e04f      	b.n	8003ad8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a38:	4b0c      	ldr	r3, [pc, #48]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003a3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fe fa36 	bl	8001eb4 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4c:	f7fe fa32 	bl	8001eb4 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e03d      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	4b03      	ldr	r3, [pc, #12]	@ (8003a6c <HAL_RCC_OscConfig+0x4cc>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x4ac>
 8003a6a:	e035      	b.n	8003ad8 <HAL_RCC_OscConfig+0x538>
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003a74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae4 <HAL_RCC_OscConfig+0x544>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d028      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d121      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d11a      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003aaa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d111      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	3b01      	subs	r3, #1
 8003abe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d107      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ace:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d001      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3718      	adds	r7, #24
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800

08003ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0d0      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b00:	4b6a      	ldr	r3, [pc, #424]	@ (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 030f 	and.w	r3, r3, #15
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d910      	bls.n	8003b30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b67      	ldr	r3, [pc, #412]	@ (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f023 020f 	bic.w	r2, r3, #15
 8003b16:	4965      	ldr	r1, [pc, #404]	@ (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1e:	4b63      	ldr	r3, [pc, #396]	@ (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 030f 	and.w	r3, r3, #15
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d001      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e0b8      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d020      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0304 	and.w	r3, r3, #4
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d005      	beq.n	8003b54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b48:	4b59      	ldr	r3, [pc, #356]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4a58      	ldr	r2, [pc, #352]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d005      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b60:	4b53      	ldr	r3, [pc, #332]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	4a52      	ldr	r2, [pc, #328]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b6c:	4b50      	ldr	r3, [pc, #320]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	494d      	ldr	r1, [pc, #308]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d040      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b92:	4b47      	ldr	r3, [pc, #284]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d115      	bne.n	8003bca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e07f      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d107      	bne.n	8003bba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003baa:	4b41      	ldr	r3, [pc, #260]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d109      	bne.n	8003bca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e073      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bba:	4b3d      	ldr	r3, [pc, #244]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e06b      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bca:	4b39      	ldr	r3, [pc, #228]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f023 0203 	bic.w	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4936      	ldr	r1, [pc, #216]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bdc:	f7fe f96a 	bl	8001eb4 <HAL_GetTick>
 8003be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be2:	e00a      	b.n	8003bfa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003be4:	f7fe f966 	bl	8001eb4 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d901      	bls.n	8003bfa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e053      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bfa:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 020c 	and.w	r2, r3, #12
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d1eb      	bne.n	8003be4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c0c:	4b27      	ldr	r3, [pc, #156]	@ (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 030f 	and.w	r3, r3, #15
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d210      	bcs.n	8003c3c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c1a:	4b24      	ldr	r3, [pc, #144]	@ (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f023 020f 	bic.w	r2, r3, #15
 8003c22:	4922      	ldr	r1, [pc, #136]	@ (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2a:	4b20      	ldr	r3, [pc, #128]	@ (8003cac <HAL_RCC_ClockConfig+0x1c4>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d001      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e032      	b.n	8003ca2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c48:	4b19      	ldr	r3, [pc, #100]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4916      	ldr	r1, [pc, #88]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c66:	4b12      	ldr	r3, [pc, #72]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	490e      	ldr	r1, [pc, #56]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c7a:	f000 f821 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	490a      	ldr	r1, [pc, #40]	@ (8003cb4 <HAL_RCC_ClockConfig+0x1cc>)
 8003c8c:	5ccb      	ldrb	r3, [r1, r3]
 8003c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c92:	4a09      	ldr	r2, [pc, #36]	@ (8003cb8 <HAL_RCC_ClockConfig+0x1d0>)
 8003c94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c96:	4b09      	ldr	r3, [pc, #36]	@ (8003cbc <HAL_RCC_ClockConfig+0x1d4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe f8c6 	bl	8001e2c <HAL_InitTick>

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40023c00 	.word	0x40023c00
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	08008490 	.word	0x08008490
 8003cb8:	20000000 	.word	0x20000000
 8003cbc:	20000004 	.word	0x20000004

08003cc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cc4:	b094      	sub	sp, #80	@ 0x50
 8003cc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ccc:	2300      	movs	r3, #0
 8003cce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cd8:	4b79      	ldr	r3, [pc, #484]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 030c 	and.w	r3, r3, #12
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d00d      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0x40>
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	f200 80e1 	bhi.w	8003eac <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x34>
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d003      	beq.n	8003cfa <HAL_RCC_GetSysClockFreq+0x3a>
 8003cf2:	e0db      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cf4:	4b73      	ldr	r3, [pc, #460]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cf8:	e0db      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cfa:	4b73      	ldr	r3, [pc, #460]	@ (8003ec8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cfe:	e0d8      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d00:	4b6f      	ldr	r3, [pc, #444]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d08:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d063      	beq.n	8003dde <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d16:	4b6a      	ldr	r3, [pc, #424]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	099b      	lsrs	r3, r3, #6
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003d32:	4622      	mov	r2, r4
 8003d34:	462b      	mov	r3, r5
 8003d36:	f04f 0000 	mov.w	r0, #0
 8003d3a:	f04f 0100 	mov.w	r1, #0
 8003d3e:	0159      	lsls	r1, r3, #5
 8003d40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d44:	0150      	lsls	r0, r2, #5
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	1a51      	subs	r1, r2, r1
 8003d4e:	6139      	str	r1, [r7, #16]
 8003d50:	4629      	mov	r1, r5
 8003d52:	eb63 0301 	sbc.w	r3, r3, r1
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d64:	4659      	mov	r1, fp
 8003d66:	018b      	lsls	r3, r1, #6
 8003d68:	4651      	mov	r1, sl
 8003d6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d6e:	4651      	mov	r1, sl
 8003d70:	018a      	lsls	r2, r1, #6
 8003d72:	4651      	mov	r1, sl
 8003d74:	ebb2 0801 	subs.w	r8, r2, r1
 8003d78:	4659      	mov	r1, fp
 8003d7a:	eb63 0901 	sbc.w	r9, r3, r1
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d92:	4690      	mov	r8, r2
 8003d94:	4699      	mov	r9, r3
 8003d96:	4623      	mov	r3, r4
 8003d98:	eb18 0303 	adds.w	r3, r8, r3
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	462b      	mov	r3, r5
 8003da0:	eb49 0303 	adc.w	r3, r9, r3
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003db2:	4629      	mov	r1, r5
 8003db4:	024b      	lsls	r3, r1, #9
 8003db6:	4621      	mov	r1, r4
 8003db8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	024a      	lsls	r2, r1, #9
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003dd0:	f7fc ff12 	bl	8000bf8 <__aeabi_uldivmod>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4613      	mov	r3, r2
 8003dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ddc:	e058      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dde:	4b38      	ldr	r3, [pc, #224]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	099b      	lsrs	r3, r3, #6
 8003de4:	2200      	movs	r2, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	4611      	mov	r1, r2
 8003dea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dee:	623b      	str	r3, [r7, #32]
 8003df0:	2300      	movs	r3, #0
 8003df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003df4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003df8:	4642      	mov	r2, r8
 8003dfa:	464b      	mov	r3, r9
 8003dfc:	f04f 0000 	mov.w	r0, #0
 8003e00:	f04f 0100 	mov.w	r1, #0
 8003e04:	0159      	lsls	r1, r3, #5
 8003e06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e0a:	0150      	lsls	r0, r2, #5
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4641      	mov	r1, r8
 8003e12:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e16:	4649      	mov	r1, r9
 8003e18:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e1c:	f04f 0200 	mov.w	r2, #0
 8003e20:	f04f 0300 	mov.w	r3, #0
 8003e24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e30:	ebb2 040a 	subs.w	r4, r2, sl
 8003e34:	eb63 050b 	sbc.w	r5, r3, fp
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	00eb      	lsls	r3, r5, #3
 8003e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e46:	00e2      	lsls	r2, r4, #3
 8003e48:	4614      	mov	r4, r2
 8003e4a:	461d      	mov	r5, r3
 8003e4c:	4643      	mov	r3, r8
 8003e4e:	18e3      	adds	r3, r4, r3
 8003e50:	603b      	str	r3, [r7, #0]
 8003e52:	464b      	mov	r3, r9
 8003e54:	eb45 0303 	adc.w	r3, r5, r3
 8003e58:	607b      	str	r3, [r7, #4]
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e66:	4629      	mov	r1, r5
 8003e68:	028b      	lsls	r3, r1, #10
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e70:	4621      	mov	r1, r4
 8003e72:	028a      	lsls	r2, r1, #10
 8003e74:	4610      	mov	r0, r2
 8003e76:	4619      	mov	r1, r3
 8003e78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	61fa      	str	r2, [r7, #28]
 8003e80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e84:	f7fc feb8 	bl	8000bf8 <__aeabi_uldivmod>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003e90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	0c1b      	lsrs	r3, r3, #16
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ea0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ea2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eaa:	e002      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eac:	4b05      	ldr	r3, [pc, #20]	@ (8003ec4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3750      	adds	r7, #80	@ 0x50
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	00f42400 	.word	0x00f42400
 8003ec8:	007a1200 	.word	0x007a1200

08003ecc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed0:	4b03      	ldr	r3, [pc, #12]	@ (8003ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	20000000 	.word	0x20000000

08003ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ee8:	f7ff fff0 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b05      	ldr	r3, [pc, #20]	@ (8003f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	0a9b      	lsrs	r3, r3, #10
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	4903      	ldr	r1, [pc, #12]	@ (8003f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40023800 	.word	0x40023800
 8003f08:	080084a0 	.word	0x080084a0

08003f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f10:	f7ff ffdc 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4b05      	ldr	r3, [pc, #20]	@ (8003f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	0b5b      	lsrs	r3, r3, #13
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	4903      	ldr	r1, [pc, #12]	@ (8003f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f22:	5ccb      	ldrb	r3, [r1, r3]
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	080084a0 	.word	0x080084a0

08003f34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b088      	sub	sp, #32
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003f44:	2300      	movs	r3, #0
 8003f46:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d012      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f58:	4b65      	ldr	r3, [pc, #404]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4a64      	ldr	r2, [pc, #400]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f5e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003f62:	6093      	str	r3, [r2, #8]
 8003f64:	4b62      	ldr	r3, [pc, #392]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6c:	4960      	ldr	r1, [pc, #384]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d017      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f8a:	4b59      	ldr	r3, [pc, #356]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f90:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f98:	4955      	ldr	r1, [pc, #340]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003fa8:	d101      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8003faa:	2301      	movs	r3, #1
 8003fac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d017      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fc6:	4b4a      	ldr	r3, [pc, #296]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fcc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd4:	4946      	ldr	r1, [pc, #280]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fe4:	d101      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0320 	and.w	r3, r3, #32
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 808b 	beq.w	800411a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004004:	4b3a      	ldr	r3, [pc, #232]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	4a39      	ldr	r2, [pc, #228]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800400a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800400e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004010:	4b37      	ldr	r3, [pc, #220]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004014:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800401c:	4b35      	ldr	r3, [pc, #212]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a34      	ldr	r2, [pc, #208]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004026:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004028:	f7fd ff44 	bl	8001eb4 <HAL_GetTick>
 800402c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004030:	f7fd ff40 	bl	8001eb4 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	@ 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e2bc      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004042:	4b2c      	ldr	r3, [pc, #176]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d0f0      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800404e:	4b28      	ldr	r3, [pc, #160]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004056:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d035      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	429a      	cmp	r2, r3
 800406a:	d02e      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800406c:	4b20      	ldr	r3, [pc, #128]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800406e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004074:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004076:	4b1e      	ldr	r3, [pc, #120]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407a:	4a1d      	ldr	r2, [pc, #116]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800407c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004080:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004082:	4b1b      	ldr	r3, [pc, #108]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004086:	4a1a      	ldr	r2, [pc, #104]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004088:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800408c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800408e:	4a18      	ldr	r2, [pc, #96]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004094:	4b16      	ldr	r3, [pc, #88]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d114      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a0:	f7fd ff08 	bl	8001eb4 <HAL_GetTick>
 80040a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040a6:	e00a      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a8:	f7fd ff04 	bl	8001eb4 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e27e      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040be:	4b0c      	ldr	r3, [pc, #48]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0ee      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040d6:	d111      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80040d8:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80040e4:	4b04      	ldr	r3, [pc, #16]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80040e6:	400b      	ands	r3, r1
 80040e8:	4901      	ldr	r1, [pc, #4]	@ (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
 80040ee:	e00b      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80040f0:	40023800 	.word	0x40023800
 80040f4:	40007000 	.word	0x40007000
 80040f8:	0ffffcff 	.word	0x0ffffcff
 80040fc:	4ba4      	ldr	r3, [pc, #656]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4aa3      	ldr	r2, [pc, #652]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004102:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004106:	6093      	str	r3, [r2, #8]
 8004108:	4ba1      	ldr	r3, [pc, #644]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800410a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004114:	499e      	ldr	r1, [pc, #632]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004116:	4313      	orrs	r3, r2
 8004118:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0310 	and.w	r3, r3, #16
 8004122:	2b00      	cmp	r3, #0
 8004124:	d010      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004126:	4b9a      	ldr	r3, [pc, #616]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004128:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800412c:	4a98      	ldr	r2, [pc, #608]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800412e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004132:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004136:	4b96      	ldr	r3, [pc, #600]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004138:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004140:	4993      	ldr	r1, [pc, #588]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004154:	4b8e      	ldr	r3, [pc, #568]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004162:	498b      	ldr	r1, [pc, #556]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004176:	4b86      	ldr	r3, [pc, #536]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004184:	4982      	ldr	r1, [pc, #520]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004198:	4b7d      	ldr	r3, [pc, #500]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041a6:	497a      	ldr	r1, [pc, #488]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041ba:	4b75      	ldr	r3, [pc, #468]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c0:	f023 0203 	bic.w	r2, r3, #3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c8:	4971      	ldr	r1, [pc, #452]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041dc:	4b6c      	ldr	r3, [pc, #432]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041e2:	f023 020c 	bic.w	r2, r3, #12
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	4969      	ldr	r1, [pc, #420]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041fe:	4b64      	ldr	r3, [pc, #400]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004204:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420c:	4960      	ldr	r1, [pc, #384]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004220:	4b5b      	ldr	r3, [pc, #364]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004226:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800422e:	4958      	ldr	r1, [pc, #352]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004242:	4b53      	ldr	r3, [pc, #332]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004248:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004250:	494f      	ldr	r1, [pc, #316]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00a      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004264:	4b4a      	ldr	r3, [pc, #296]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004272:	4947      	ldr	r1, [pc, #284]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00a      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004286:	4b42      	ldr	r3, [pc, #264]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004288:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800428c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004294:	493e      	ldr	r1, [pc, #248]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004296:	4313      	orrs	r3, r2
 8004298:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00a      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80042a8:	4b39      	ldr	r3, [pc, #228]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b6:	4936      	ldr	r1, [pc, #216]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d011      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80042ca:	4b31      	ldr	r3, [pc, #196]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042d8:	492d      	ldr	r1, [pc, #180]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042e8:	d101      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80042ea:	2301      	movs	r3, #1
 80042ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042fa:	4b25      	ldr	r3, [pc, #148]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80042fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004300:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004308:	4921      	ldr	r1, [pc, #132]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800431c:	4b1c      	ldr	r3, [pc, #112]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004322:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800432a:	4919      	ldr	r1, [pc, #100]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800433e:	4b14      	ldr	r3, [pc, #80]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004344:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800434c:	4910      	ldr	r1, [pc, #64]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d006      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 809d 	beq.w	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004368:	4b09      	ldr	r3, [pc, #36]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a08      	ldr	r2, [pc, #32]	@ (8004390 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800436e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004374:	f7fd fd9e 	bl	8001eb4 <HAL_GetTick>
 8004378:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800437a:	e00b      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800437c:	f7fd fd9a 	bl	8001eb4 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	@ 0x64
 8004388:	d904      	bls.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e116      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x688>
 800438e:	bf00      	nop
 8004390:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004394:	4b8b      	ldr	r3, [pc, #556]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1ed      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d017      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d113      	bne.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043b4:	4b83      	ldr	r3, [pc, #524]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80043b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043ba:	0e1b      	lsrs	r3, r3, #24
 80043bc:	f003 030f 	and.w	r3, r3, #15
 80043c0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	019a      	lsls	r2, r3, #6
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	061b      	lsls	r3, r3, #24
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	071b      	lsls	r3, r3, #28
 80043d4:	497b      	ldr	r1, [pc, #492]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043f0:	d00a      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d024      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004402:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004406:	d11f      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004408:	4b6e      	ldr	r3, [pc, #440]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800440a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800440e:	0f1b      	lsrs	r3, r3, #28
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	019a      	lsls	r2, r3, #6
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	061b      	lsls	r3, r3, #24
 8004422:	431a      	orrs	r2, r3
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	071b      	lsls	r3, r3, #28
 8004428:	4966      	ldr	r1, [pc, #408]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800442a:	4313      	orrs	r3, r2
 800442c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004430:	4b64      	ldr	r3, [pc, #400]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004432:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004436:	f023 021f 	bic.w	r2, r3, #31
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	3b01      	subs	r3, #1
 8004440:	4960      	ldr	r1, [pc, #384]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00d      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	019a      	lsls	r2, r3, #6
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	061b      	lsls	r3, r3, #24
 8004460:	431a      	orrs	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	071b      	lsls	r3, r3, #28
 8004468:	4956      	ldr	r1, [pc, #344]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004470:	4b54      	ldr	r3, [pc, #336]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a53      	ldr	r2, [pc, #332]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004476:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800447a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800447c:	f7fd fd1a 	bl	8001eb4 <HAL_GetTick>
 8004480:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004482:	e008      	b.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004484:	f7fd fd16 	bl	8001eb4 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b64      	cmp	r3, #100	@ 0x64
 8004490:	d901      	bls.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e092      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004496:	4b4b      	ldr	r3, [pc, #300]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	f040 8088 	bne.w	80045ba <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80044aa:	4b46      	ldr	r3, [pc, #280]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a45      	ldr	r2, [pc, #276]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b6:	f7fd fcfd 	bl	8001eb4 <HAL_GetTick>
 80044ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044bc:	e008      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044be:	f7fd fcf9 	bl	8001eb4 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b64      	cmp	r3, #100	@ 0x64
 80044ca:	d901      	bls.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e075      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044d0:	4b3c      	ldr	r3, [pc, #240]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044dc:	d0ef      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d009      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d024      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004502:	2b00      	cmp	r3, #0
 8004504:	d120      	bne.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004506:	4b2f      	ldr	r3, [pc, #188]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	019a      	lsls	r2, r3, #6
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	041b      	lsls	r3, r3, #16
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	061b      	lsls	r3, r3, #24
 8004526:	4927      	ldr	r1, [pc, #156]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800452e:	4b25      	ldr	r3, [pc, #148]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004534:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	3b01      	subs	r3, #1
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	4920      	ldr	r1, [pc, #128]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004542:	4313      	orrs	r3, r2
 8004544:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d018      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x652>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004558:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800455c:	d113      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800455e:	4b19      	ldr	r3, [pc, #100]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004560:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004564:	0e1b      	lsrs	r3, r3, #24
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	019a      	lsls	r2, r3, #6
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	041b      	lsls	r3, r3, #16
 8004578:	431a      	orrs	r2, r3
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	061b      	lsls	r3, r3, #24
 800457e:	4911      	ldr	r1, [pc, #68]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004586:	4b0f      	ldr	r3, [pc, #60]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a0e      	ldr	r2, [pc, #56]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800458c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004590:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004592:	f7fd fc8f 	bl	8001eb4 <HAL_GetTick>
 8004596:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004598:	e008      	b.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800459a:	f7fd fc8b 	bl	8001eb4 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	2b64      	cmp	r3, #100	@ 0x64
 80045a6:	d901      	bls.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e007      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80045ac:	4b05      	ldr	r3, [pc, #20]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80045b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80045b8:	d1ef      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40023800 	.word	0x40023800

080045c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e09d      	b.n	8004716 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d108      	bne.n	80045f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045ea:	d009      	beq.n	8004600 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	61da      	str	r2, [r3, #28]
 80045f2:	e005      	b.n	8004600 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d106      	bne.n	8004620 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7fd f9aa 	bl	8001974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004636:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004640:	d902      	bls.n	8004648 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	e002      	b.n	800464e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004648:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800464c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004656:	d007      	beq.n	8004668 <HAL_SPI_Init+0xa0>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004660:	d002      	beq.n	8004668 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	69db      	ldr	r3, [r3, #28]
 800469c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046aa:	ea42 0103 	orr.w	r1, r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	0c1b      	lsrs	r3, r3, #16
 80046c4:	f003 0204 	and.w	r2, r3, #4
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046cc:	f003 0310 	and.w	r3, r3, #16
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80046e4:	ea42 0103 	orr.w	r1, r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	430a      	orrs	r2, r1
 80046f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004704:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e040      	b.n	80047b2 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d106      	bne.n	8004746 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7fd f95b 	bl	80019fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2224      	movs	r2, #36	@ 0x24
 800474a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0201 	bic.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fb15 	bl	8004d94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f8ae 	bl	80048cc <UART_SetConfig>
 8004770:	4603      	mov	r3, r0
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e01b      	b.n	80047b2 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004788:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004798:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f042 0201 	orr.w	r2, r2, #1
 80047a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fb94 	bl	8004ed8 <UART_CheckIdleState>
 80047b0:	4603      	mov	r3, r0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b08a      	sub	sp, #40	@ 0x28
 80047be:	af02      	add	r7, sp, #8
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	603b      	str	r3, [r7, #0]
 80047c6:	4613      	mov	r3, r2
 80047c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d177      	bne.n	80048c2 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <HAL_UART_Transmit+0x24>
 80047d8:	88fb      	ldrh	r3, [r7, #6]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e070      	b.n	80048c4 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2221      	movs	r2, #33	@ 0x21
 80047ee:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047f0:	f7fd fb60 	bl	8001eb4 <HAL_GetTick>
 80047f4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	88fa      	ldrh	r2, [r7, #6]
 80047fa:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	88fa      	ldrh	r2, [r7, #6]
 8004802:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800480e:	d108      	bne.n	8004822 <HAL_UART_Transmit+0x68>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d104      	bne.n	8004822 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004818:	2300      	movs	r3, #0
 800481a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	e003      	b.n	800482a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004826:	2300      	movs	r3, #0
 8004828:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800482a:	e02f      	b.n	800488c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2200      	movs	r2, #0
 8004834:	2180      	movs	r1, #128	@ 0x80
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fba5 	bl	8004f86 <UART_WaitOnFlagUntilTimeout>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d004      	beq.n	800484c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e03b      	b.n	80048c4 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10b      	bne.n	800486a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	881b      	ldrh	r3, [r3, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004860:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	3302      	adds	r3, #2
 8004866:	61bb      	str	r3, [r7, #24]
 8004868:	e007      	b.n	800487a <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	781a      	ldrb	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	3301      	adds	r3, #1
 8004878:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004880:	b29b      	uxth	r3, r3
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1c9      	bne.n	800482c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	2200      	movs	r2, #0
 80048a0:	2140      	movs	r1, #64	@ 0x40
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fb6f 	bl	8004f86 <UART_WaitOnFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d004      	beq.n	80048b8 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2220      	movs	r2, #32
 80048b2:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e005      	b.n	80048c4 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2220      	movs	r2, #32
 80048bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	e000      	b.n	80048c4 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80048c2:	2302      	movs	r3, #2
  }
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3720      	adds	r7, #32
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	431a      	orrs	r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	69db      	ldr	r3, [r3, #28]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4ba6      	ldr	r3, [pc, #664]	@ (8004b90 <UART_SetConfig+0x2c4>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6812      	ldr	r2, [r2, #0]
 80048fe:	6979      	ldr	r1, [r7, #20]
 8004900:	430b      	orrs	r3, r1
 8004902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	697a      	ldr	r2, [r7, #20]
 800493a:	430a      	orrs	r2, r1
 800493c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a94      	ldr	r2, [pc, #592]	@ (8004b94 <UART_SetConfig+0x2c8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d120      	bne.n	800498a <UART_SetConfig+0xbe>
 8004948:	4b93      	ldr	r3, [pc, #588]	@ (8004b98 <UART_SetConfig+0x2cc>)
 800494a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	2b03      	cmp	r3, #3
 8004954:	d816      	bhi.n	8004984 <UART_SetConfig+0xb8>
 8004956:	a201      	add	r2, pc, #4	@ (adr r2, 800495c <UART_SetConfig+0x90>)
 8004958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495c:	0800496d 	.word	0x0800496d
 8004960:	08004979 	.word	0x08004979
 8004964:	08004973 	.word	0x08004973
 8004968:	0800497f 	.word	0x0800497f
 800496c:	2301      	movs	r3, #1
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e150      	b.n	8004c14 <UART_SetConfig+0x348>
 8004972:	2302      	movs	r3, #2
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e14d      	b.n	8004c14 <UART_SetConfig+0x348>
 8004978:	2304      	movs	r3, #4
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	e14a      	b.n	8004c14 <UART_SetConfig+0x348>
 800497e:	2308      	movs	r3, #8
 8004980:	77fb      	strb	r3, [r7, #31]
 8004982:	e147      	b.n	8004c14 <UART_SetConfig+0x348>
 8004984:	2310      	movs	r3, #16
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	e144      	b.n	8004c14 <UART_SetConfig+0x348>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a83      	ldr	r2, [pc, #524]	@ (8004b9c <UART_SetConfig+0x2d0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d132      	bne.n	80049fa <UART_SetConfig+0x12e>
 8004994:	4b80      	ldr	r3, [pc, #512]	@ (8004b98 <UART_SetConfig+0x2cc>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	2b0c      	cmp	r3, #12
 80049a0:	d828      	bhi.n	80049f4 <UART_SetConfig+0x128>
 80049a2:	a201      	add	r2, pc, #4	@ (adr r2, 80049a8 <UART_SetConfig+0xdc>)
 80049a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a8:	080049dd 	.word	0x080049dd
 80049ac:	080049f5 	.word	0x080049f5
 80049b0:	080049f5 	.word	0x080049f5
 80049b4:	080049f5 	.word	0x080049f5
 80049b8:	080049e9 	.word	0x080049e9
 80049bc:	080049f5 	.word	0x080049f5
 80049c0:	080049f5 	.word	0x080049f5
 80049c4:	080049f5 	.word	0x080049f5
 80049c8:	080049e3 	.word	0x080049e3
 80049cc:	080049f5 	.word	0x080049f5
 80049d0:	080049f5 	.word	0x080049f5
 80049d4:	080049f5 	.word	0x080049f5
 80049d8:	080049ef 	.word	0x080049ef
 80049dc:	2300      	movs	r3, #0
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e118      	b.n	8004c14 <UART_SetConfig+0x348>
 80049e2:	2302      	movs	r3, #2
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	e115      	b.n	8004c14 <UART_SetConfig+0x348>
 80049e8:	2304      	movs	r3, #4
 80049ea:	77fb      	strb	r3, [r7, #31]
 80049ec:	e112      	b.n	8004c14 <UART_SetConfig+0x348>
 80049ee:	2308      	movs	r3, #8
 80049f0:	77fb      	strb	r3, [r7, #31]
 80049f2:	e10f      	b.n	8004c14 <UART_SetConfig+0x348>
 80049f4:	2310      	movs	r3, #16
 80049f6:	77fb      	strb	r3, [r7, #31]
 80049f8:	e10c      	b.n	8004c14 <UART_SetConfig+0x348>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a68      	ldr	r2, [pc, #416]	@ (8004ba0 <UART_SetConfig+0x2d4>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d120      	bne.n	8004a46 <UART_SetConfig+0x17a>
 8004a04:	4b64      	ldr	r3, [pc, #400]	@ (8004b98 <UART_SetConfig+0x2cc>)
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a0e:	2b30      	cmp	r3, #48	@ 0x30
 8004a10:	d013      	beq.n	8004a3a <UART_SetConfig+0x16e>
 8004a12:	2b30      	cmp	r3, #48	@ 0x30
 8004a14:	d814      	bhi.n	8004a40 <UART_SetConfig+0x174>
 8004a16:	2b20      	cmp	r3, #32
 8004a18:	d009      	beq.n	8004a2e <UART_SetConfig+0x162>
 8004a1a:	2b20      	cmp	r3, #32
 8004a1c:	d810      	bhi.n	8004a40 <UART_SetConfig+0x174>
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d002      	beq.n	8004a28 <UART_SetConfig+0x15c>
 8004a22:	2b10      	cmp	r3, #16
 8004a24:	d006      	beq.n	8004a34 <UART_SetConfig+0x168>
 8004a26:	e00b      	b.n	8004a40 <UART_SetConfig+0x174>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	77fb      	strb	r3, [r7, #31]
 8004a2c:	e0f2      	b.n	8004c14 <UART_SetConfig+0x348>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	77fb      	strb	r3, [r7, #31]
 8004a32:	e0ef      	b.n	8004c14 <UART_SetConfig+0x348>
 8004a34:	2304      	movs	r3, #4
 8004a36:	77fb      	strb	r3, [r7, #31]
 8004a38:	e0ec      	b.n	8004c14 <UART_SetConfig+0x348>
 8004a3a:	2308      	movs	r3, #8
 8004a3c:	77fb      	strb	r3, [r7, #31]
 8004a3e:	e0e9      	b.n	8004c14 <UART_SetConfig+0x348>
 8004a40:	2310      	movs	r3, #16
 8004a42:	77fb      	strb	r3, [r7, #31]
 8004a44:	e0e6      	b.n	8004c14 <UART_SetConfig+0x348>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a56      	ldr	r2, [pc, #344]	@ (8004ba4 <UART_SetConfig+0x2d8>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d120      	bne.n	8004a92 <UART_SetConfig+0x1c6>
 8004a50:	4b51      	ldr	r3, [pc, #324]	@ (8004b98 <UART_SetConfig+0x2cc>)
 8004a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a56:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a5a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a5c:	d013      	beq.n	8004a86 <UART_SetConfig+0x1ba>
 8004a5e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a60:	d814      	bhi.n	8004a8c <UART_SetConfig+0x1c0>
 8004a62:	2b80      	cmp	r3, #128	@ 0x80
 8004a64:	d009      	beq.n	8004a7a <UART_SetConfig+0x1ae>
 8004a66:	2b80      	cmp	r3, #128	@ 0x80
 8004a68:	d810      	bhi.n	8004a8c <UART_SetConfig+0x1c0>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <UART_SetConfig+0x1a8>
 8004a6e:	2b40      	cmp	r3, #64	@ 0x40
 8004a70:	d006      	beq.n	8004a80 <UART_SetConfig+0x1b4>
 8004a72:	e00b      	b.n	8004a8c <UART_SetConfig+0x1c0>
 8004a74:	2300      	movs	r3, #0
 8004a76:	77fb      	strb	r3, [r7, #31]
 8004a78:	e0cc      	b.n	8004c14 <UART_SetConfig+0x348>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	77fb      	strb	r3, [r7, #31]
 8004a7e:	e0c9      	b.n	8004c14 <UART_SetConfig+0x348>
 8004a80:	2304      	movs	r3, #4
 8004a82:	77fb      	strb	r3, [r7, #31]
 8004a84:	e0c6      	b.n	8004c14 <UART_SetConfig+0x348>
 8004a86:	2308      	movs	r3, #8
 8004a88:	77fb      	strb	r3, [r7, #31]
 8004a8a:	e0c3      	b.n	8004c14 <UART_SetConfig+0x348>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	77fb      	strb	r3, [r7, #31]
 8004a90:	e0c0      	b.n	8004c14 <UART_SetConfig+0x348>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a44      	ldr	r2, [pc, #272]	@ (8004ba8 <UART_SetConfig+0x2dc>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d125      	bne.n	8004ae8 <UART_SetConfig+0x21c>
 8004a9c:	4b3e      	ldr	r3, [pc, #248]	@ (8004b98 <UART_SetConfig+0x2cc>)
 8004a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aa6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aaa:	d017      	beq.n	8004adc <UART_SetConfig+0x210>
 8004aac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ab0:	d817      	bhi.n	8004ae2 <UART_SetConfig+0x216>
 8004ab2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ab6:	d00b      	beq.n	8004ad0 <UART_SetConfig+0x204>
 8004ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004abc:	d811      	bhi.n	8004ae2 <UART_SetConfig+0x216>
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <UART_SetConfig+0x1fe>
 8004ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ac6:	d006      	beq.n	8004ad6 <UART_SetConfig+0x20a>
 8004ac8:	e00b      	b.n	8004ae2 <UART_SetConfig+0x216>
 8004aca:	2300      	movs	r3, #0
 8004acc:	77fb      	strb	r3, [r7, #31]
 8004ace:	e0a1      	b.n	8004c14 <UART_SetConfig+0x348>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	77fb      	strb	r3, [r7, #31]
 8004ad4:	e09e      	b.n	8004c14 <UART_SetConfig+0x348>
 8004ad6:	2304      	movs	r3, #4
 8004ad8:	77fb      	strb	r3, [r7, #31]
 8004ada:	e09b      	b.n	8004c14 <UART_SetConfig+0x348>
 8004adc:	2308      	movs	r3, #8
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e098      	b.n	8004c14 <UART_SetConfig+0x348>
 8004ae2:	2310      	movs	r3, #16
 8004ae4:	77fb      	strb	r3, [r7, #31]
 8004ae6:	e095      	b.n	8004c14 <UART_SetConfig+0x348>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a2f      	ldr	r2, [pc, #188]	@ (8004bac <UART_SetConfig+0x2e0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d125      	bne.n	8004b3e <UART_SetConfig+0x272>
 8004af2:	4b29      	ldr	r3, [pc, #164]	@ (8004b98 <UART_SetConfig+0x2cc>)
 8004af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004afc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b00:	d017      	beq.n	8004b32 <UART_SetConfig+0x266>
 8004b02:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b06:	d817      	bhi.n	8004b38 <UART_SetConfig+0x26c>
 8004b08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b0c:	d00b      	beq.n	8004b26 <UART_SetConfig+0x25a>
 8004b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b12:	d811      	bhi.n	8004b38 <UART_SetConfig+0x26c>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d003      	beq.n	8004b20 <UART_SetConfig+0x254>
 8004b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b1c:	d006      	beq.n	8004b2c <UART_SetConfig+0x260>
 8004b1e:	e00b      	b.n	8004b38 <UART_SetConfig+0x26c>
 8004b20:	2301      	movs	r3, #1
 8004b22:	77fb      	strb	r3, [r7, #31]
 8004b24:	e076      	b.n	8004c14 <UART_SetConfig+0x348>
 8004b26:	2302      	movs	r3, #2
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	e073      	b.n	8004c14 <UART_SetConfig+0x348>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	77fb      	strb	r3, [r7, #31]
 8004b30:	e070      	b.n	8004c14 <UART_SetConfig+0x348>
 8004b32:	2308      	movs	r3, #8
 8004b34:	77fb      	strb	r3, [r7, #31]
 8004b36:	e06d      	b.n	8004c14 <UART_SetConfig+0x348>
 8004b38:	2310      	movs	r3, #16
 8004b3a:	77fb      	strb	r3, [r7, #31]
 8004b3c:	e06a      	b.n	8004c14 <UART_SetConfig+0x348>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb0 <UART_SetConfig+0x2e4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d138      	bne.n	8004bba <UART_SetConfig+0x2ee>
 8004b48:	4b13      	ldr	r3, [pc, #76]	@ (8004b98 <UART_SetConfig+0x2cc>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b4e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004b52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b56:	d017      	beq.n	8004b88 <UART_SetConfig+0x2bc>
 8004b58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b5c:	d82a      	bhi.n	8004bb4 <UART_SetConfig+0x2e8>
 8004b5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b62:	d00b      	beq.n	8004b7c <UART_SetConfig+0x2b0>
 8004b64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b68:	d824      	bhi.n	8004bb4 <UART_SetConfig+0x2e8>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <UART_SetConfig+0x2aa>
 8004b6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b72:	d006      	beq.n	8004b82 <UART_SetConfig+0x2b6>
 8004b74:	e01e      	b.n	8004bb4 <UART_SetConfig+0x2e8>
 8004b76:	2300      	movs	r3, #0
 8004b78:	77fb      	strb	r3, [r7, #31]
 8004b7a:	e04b      	b.n	8004c14 <UART_SetConfig+0x348>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	77fb      	strb	r3, [r7, #31]
 8004b80:	e048      	b.n	8004c14 <UART_SetConfig+0x348>
 8004b82:	2304      	movs	r3, #4
 8004b84:	77fb      	strb	r3, [r7, #31]
 8004b86:	e045      	b.n	8004c14 <UART_SetConfig+0x348>
 8004b88:	2308      	movs	r3, #8
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	e042      	b.n	8004c14 <UART_SetConfig+0x348>
 8004b8e:	bf00      	nop
 8004b90:	efff69f3 	.word	0xefff69f3
 8004b94:	40011000 	.word	0x40011000
 8004b98:	40023800 	.word	0x40023800
 8004b9c:	40004400 	.word	0x40004400
 8004ba0:	40004800 	.word	0x40004800
 8004ba4:	40004c00 	.word	0x40004c00
 8004ba8:	40005000 	.word	0x40005000
 8004bac:	40011400 	.word	0x40011400
 8004bb0:	40007800 	.word	0x40007800
 8004bb4:	2310      	movs	r3, #16
 8004bb6:	77fb      	strb	r3, [r7, #31]
 8004bb8:	e02c      	b.n	8004c14 <UART_SetConfig+0x348>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a72      	ldr	r2, [pc, #456]	@ (8004d88 <UART_SetConfig+0x4bc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d125      	bne.n	8004c10 <UART_SetConfig+0x344>
 8004bc4:	4b71      	ldr	r3, [pc, #452]	@ (8004d8c <UART_SetConfig+0x4c0>)
 8004bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bca:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004bce:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004bd2:	d017      	beq.n	8004c04 <UART_SetConfig+0x338>
 8004bd4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004bd8:	d817      	bhi.n	8004c0a <UART_SetConfig+0x33e>
 8004bda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bde:	d00b      	beq.n	8004bf8 <UART_SetConfig+0x32c>
 8004be0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004be4:	d811      	bhi.n	8004c0a <UART_SetConfig+0x33e>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <UART_SetConfig+0x326>
 8004bea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bee:	d006      	beq.n	8004bfe <UART_SetConfig+0x332>
 8004bf0:	e00b      	b.n	8004c0a <UART_SetConfig+0x33e>
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e00d      	b.n	8004c14 <UART_SetConfig+0x348>
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e00a      	b.n	8004c14 <UART_SetConfig+0x348>
 8004bfe:	2304      	movs	r3, #4
 8004c00:	77fb      	strb	r3, [r7, #31]
 8004c02:	e007      	b.n	8004c14 <UART_SetConfig+0x348>
 8004c04:	2308      	movs	r3, #8
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	e004      	b.n	8004c14 <UART_SetConfig+0x348>
 8004c0a:	2310      	movs	r3, #16
 8004c0c:	77fb      	strb	r3, [r7, #31]
 8004c0e:	e001      	b.n	8004c14 <UART_SetConfig+0x348>
 8004c10:	2310      	movs	r3, #16
 8004c12:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	69db      	ldr	r3, [r3, #28]
 8004c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c1c:	d15b      	bne.n	8004cd6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004c1e:	7ffb      	ldrb	r3, [r7, #31]
 8004c20:	2b08      	cmp	r3, #8
 8004c22:	d828      	bhi.n	8004c76 <UART_SetConfig+0x3aa>
 8004c24:	a201      	add	r2, pc, #4	@ (adr r2, 8004c2c <UART_SetConfig+0x360>)
 8004c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2a:	bf00      	nop
 8004c2c:	08004c51 	.word	0x08004c51
 8004c30:	08004c59 	.word	0x08004c59
 8004c34:	08004c61 	.word	0x08004c61
 8004c38:	08004c77 	.word	0x08004c77
 8004c3c:	08004c67 	.word	0x08004c67
 8004c40:	08004c77 	.word	0x08004c77
 8004c44:	08004c77 	.word	0x08004c77
 8004c48:	08004c77 	.word	0x08004c77
 8004c4c:	08004c6f 	.word	0x08004c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c50:	f7ff f948 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 8004c54:	61b8      	str	r0, [r7, #24]
        break;
 8004c56:	e013      	b.n	8004c80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c58:	f7ff f958 	bl	8003f0c <HAL_RCC_GetPCLK2Freq>
 8004c5c:	61b8      	str	r0, [r7, #24]
        break;
 8004c5e:	e00f      	b.n	8004c80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c60:	4b4b      	ldr	r3, [pc, #300]	@ (8004d90 <UART_SetConfig+0x4c4>)
 8004c62:	61bb      	str	r3, [r7, #24]
        break;
 8004c64:	e00c      	b.n	8004c80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c66:	f7ff f82b 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8004c6a:	61b8      	str	r0, [r7, #24]
        break;
 8004c6c:	e008      	b.n	8004c80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c72:	61bb      	str	r3, [r7, #24]
        break;
 8004c74:	e004      	b.n	8004c80 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d074      	beq.n	8004d70 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	005a      	lsls	r2, r3, #1
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	441a      	add	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b0f      	cmp	r3, #15
 8004ca0:	d916      	bls.n	8004cd0 <UART_SetConfig+0x404>
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ca8:	d212      	bcs.n	8004cd0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	f023 030f 	bic.w	r3, r3, #15
 8004cb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	085b      	lsrs	r3, r3, #1
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	89fb      	ldrh	r3, [r7, #14]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	89fa      	ldrh	r2, [r7, #14]
 8004ccc:	60da      	str	r2, [r3, #12]
 8004cce:	e04f      	b.n	8004d70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	77bb      	strb	r3, [r7, #30]
 8004cd4:	e04c      	b.n	8004d70 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cd6:	7ffb      	ldrb	r3, [r7, #31]
 8004cd8:	2b08      	cmp	r3, #8
 8004cda:	d828      	bhi.n	8004d2e <UART_SetConfig+0x462>
 8004cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce4 <UART_SetConfig+0x418>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004d09 	.word	0x08004d09
 8004ce8:	08004d11 	.word	0x08004d11
 8004cec:	08004d19 	.word	0x08004d19
 8004cf0:	08004d2f 	.word	0x08004d2f
 8004cf4:	08004d1f 	.word	0x08004d1f
 8004cf8:	08004d2f 	.word	0x08004d2f
 8004cfc:	08004d2f 	.word	0x08004d2f
 8004d00:	08004d2f 	.word	0x08004d2f
 8004d04:	08004d27 	.word	0x08004d27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d08:	f7ff f8ec 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 8004d0c:	61b8      	str	r0, [r7, #24]
        break;
 8004d0e:	e013      	b.n	8004d38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d10:	f7ff f8fc 	bl	8003f0c <HAL_RCC_GetPCLK2Freq>
 8004d14:	61b8      	str	r0, [r7, #24]
        break;
 8004d16:	e00f      	b.n	8004d38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d18:	4b1d      	ldr	r3, [pc, #116]	@ (8004d90 <UART_SetConfig+0x4c4>)
 8004d1a:	61bb      	str	r3, [r7, #24]
        break;
 8004d1c:	e00c      	b.n	8004d38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d1e:	f7fe ffcf 	bl	8003cc0 <HAL_RCC_GetSysClockFreq>
 8004d22:	61b8      	str	r0, [r7, #24]
        break;
 8004d24:	e008      	b.n	8004d38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d2a:	61bb      	str	r3, [r7, #24]
        break;
 8004d2c:	e004      	b.n	8004d38 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	77bb      	strb	r3, [r7, #30]
        break;
 8004d36:	bf00      	nop
    }

    if (pclk != 0U)
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d018      	beq.n	8004d70 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	085a      	lsrs	r2, r3, #1
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	441a      	add	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b0f      	cmp	r3, #15
 8004d56:	d909      	bls.n	8004d6c <UART_SetConfig+0x4a0>
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d5e:	d205      	bcs.n	8004d6c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	60da      	str	r2, [r3, #12]
 8004d6a:	e001      	b.n	8004d70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3720      	adds	r7, #32
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40007c00 	.word	0x40007c00
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	00f42400 	.word	0x00f42400

08004d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01a      	beq.n	8004eaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e92:	d10a      	bne.n	8004eaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	605a      	str	r2, [r3, #4]
  }
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08c      	sub	sp, #48	@ 0x30
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ee8:	f7fc ffe4 	bl	8001eb4 <HAL_GetTick>
 8004eec:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d12e      	bne.n	8004f5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004efc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	2200      	movs	r2, #0
 8004f06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f83b 	bl	8004f86 <UART_WaitOnFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d021      	beq.n	8004f5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f2a:	623b      	str	r3, [r7, #32]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	69b9      	ldr	r1, [r7, #24]
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	617b      	str	r3, [r7, #20]
   return(result);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e6      	bne.n	8004f16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e011      	b.n	8004f7e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2220      	movs	r2, #32
 8004f64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3728      	adds	r7, #40	@ 0x28
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	60f8      	str	r0, [r7, #12]
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	603b      	str	r3, [r7, #0]
 8004f92:	4613      	mov	r3, r2
 8004f94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f96:	e04f      	b.n	8005038 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9e:	d04b      	beq.n	8005038 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa0:	f7fc ff88 	bl	8001eb4 <HAL_GetTick>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d302      	bcc.n	8004fb6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fb6:	2303      	movs	r3, #3
 8004fb8:	e04e      	b.n	8005058 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d037      	beq.n	8005038 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b80      	cmp	r3, #128	@ 0x80
 8004fcc:	d034      	beq.n	8005038 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b40      	cmp	r3, #64	@ 0x40
 8004fd2:	d031      	beq.n	8005038 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d110      	bne.n	8005004 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2208      	movs	r2, #8
 8004fe8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f838 	bl	8005060 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2208      	movs	r2, #8
 8004ff4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e029      	b.n	8005058 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800500e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005012:	d111      	bne.n	8005038 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800501c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800501e:	68f8      	ldr	r0, [r7, #12]
 8005020:	f000 f81e 	bl	8005060 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e00f      	b.n	8005058 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4013      	ands	r3, r2
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	429a      	cmp	r2, r3
 8005046:	bf0c      	ite	eq
 8005048:	2301      	moveq	r3, #1
 800504a:	2300      	movne	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	461a      	mov	r2, r3
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	429a      	cmp	r2, r3
 8005054:	d0a0      	beq.n	8004f98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005060:	b480      	push	{r7}
 8005062:	b095      	sub	sp, #84	@ 0x54
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005078:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800507c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005086:	643b      	str	r3, [r7, #64]	@ 0x40
 8005088:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800508c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e6      	bne.n	8005068 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3308      	adds	r3, #8
 80050a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	f023 0301 	bic.w	r3, r3, #1
 80050b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3308      	adds	r3, #8
 80050b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e5      	bne.n	800509a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d118      	bne.n	8005108 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	e853 3f00 	ldrex	r3, [r3]
 80050e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f023 0310 	bic.w	r3, r3, #16
 80050ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	461a      	mov	r2, r3
 80050f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050f4:	61bb      	str	r3, [r7, #24]
 80050f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f8:	6979      	ldr	r1, [r7, #20]
 80050fa:	69ba      	ldr	r2, [r7, #24]
 80050fc:	e841 2300 	strex	r3, r2, [r1]
 8005100:	613b      	str	r3, [r7, #16]
   return(result);
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1e6      	bne.n	80050d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800511c:	bf00      	nop
 800511e:	3754      	adds	r7, #84	@ 0x54
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005128:	b084      	sub	sp, #16
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	f107 001c 	add.w	r0, r7, #28
 8005136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800513a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800513e:	2b01      	cmp	r3, #1
 8005140:	d127      	bne.n	8005192 <USB_CoreInit+0x6a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005146:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	4b3a      	ldr	r3, [pc, #232]	@ (800523c <USB_CoreInit+0x114>)
 8005154:	4013      	ands	r3, r2
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	f043 0210 	orr.w	r2, r3, #16
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005172:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005176:	2b01      	cmp	r3, #1
 8005178:	d105      	bne.n	8005186 <USB_CoreInit+0x5e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fad0 	bl	800572c <USB_CoreReset>
 800518c:	4603      	mov	r3, r0
 800518e:	73fb      	strb	r3, [r7, #15]
 8005190:	e03c      	b.n	800520c <USB_CoreInit+0xe4>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8005192:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005196:	2b03      	cmp	r3, #3
 8005198:	d127      	bne.n	80051ea <USB_CoreInit+0xc2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68da      	ldr	r2, [r3, #12]
 80051aa:	4b24      	ldr	r3, [pc, #144]	@ (800523c <USB_CoreInit+0x114>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f023 0210 	bic.w	r2, r3, #16
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 80051ca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d105      	bne.n	80051de <USB_CoreInit+0xb6>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 faa4 	bl	800572c <USB_CoreReset>
 80051e4:	4603      	mov	r3, r0
 80051e6:	73fb      	strb	r3, [r7, #15]
 80051e8:	e010      	b.n	800520c <USB_CoreInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fa98 	bl	800572c <USB_CoreReset>
 80051fc:	4603      	mov	r3, r0
 80051fe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005204:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800520c:	7fbb      	ldrb	r3, [r7, #30]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d10b      	bne.n	800522a <USB_CoreInit+0x102>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f043 0206 	orr.w	r2, r3, #6
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f043 0220 	orr.w	r2, r3, #32
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800522a:	7bfb      	ldrb	r3, [r7, #15]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3710      	adds	r7, #16
 8005230:	46bd      	mov	sp, r7
 8005232:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005236:	b004      	add	sp, #16
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	ffbdffbf 	.word	0xffbdffbf

08005240 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f023 0201 	bic.w	r2, r3, #1
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
 800526a:	460b      	mov	r3, r1
 800526c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800526e:	2300      	movs	r3, #0
 8005270:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800527e:	78fb      	ldrb	r3, [r7, #3]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d115      	bne.n	80052b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005290:	200a      	movs	r0, #10
 8005292:	f7fc fe1b 	bl	8001ecc <HAL_Delay>
      ms += 10U;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	330a      	adds	r3, #10
 800529a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 fa37 	bl	8005710 <USB_GetMode>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d01e      	beq.n	80052e6 <USB_SetCurrentMode+0x84>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80052ac:	d9f0      	bls.n	8005290 <USB_SetCurrentMode+0x2e>
 80052ae:	e01a      	b.n	80052e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80052b0:	78fb      	ldrb	r3, [r7, #3]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d115      	bne.n	80052e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80052c2:	200a      	movs	r0, #10
 80052c4:	f7fc fe02 	bl	8001ecc <HAL_Delay>
      ms += 10U;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	330a      	adds	r3, #10
 80052cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80052ce:	6878      	ldr	r0, [r7, #4]
 80052d0:	f000 fa1e 	bl	8005710 <USB_GetMode>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d005      	beq.n	80052e6 <USB_SetCurrentMode+0x84>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2bc7      	cmp	r3, #199	@ 0xc7
 80052de:	d9f0      	bls.n	80052c2 <USB_SetCurrentMode+0x60>
 80052e0:	e001      	b.n	80052e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e005      	b.n	80052f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2bc8      	cmp	r3, #200	@ 0xc8
 80052ea:	d101      	bne.n	80052f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052fc:	b084      	sub	sp, #16
 80052fe:	b580      	push	{r7, lr}
 8005300:	b086      	sub	sp, #24
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800530a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800530e:	2300      	movs	r3, #0
 8005310:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005316:	2300      	movs	r3, #0
 8005318:	613b      	str	r3, [r7, #16]
 800531a:	e009      	b.n	8005330 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	3340      	adds	r3, #64	@ 0x40
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	4413      	add	r3, r2
 8005326:	2200      	movs	r2, #0
 8005328:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	3301      	adds	r3, #1
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b0e      	cmp	r3, #14
 8005334:	d9f2      	bls.n	800531c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005336:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800533a:	2b00      	cmp	r3, #0
 800533c:	d11c      	bne.n	8005378 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800534c:	f043 0302 	orr.w	r3, r3, #2
 8005350:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005356:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	e005      	b.n	8005384 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800538a:	461a      	mov	r2, r3
 800538c:	2300      	movs	r3, #0
 800538e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005390:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005394:	2b01      	cmp	r3, #1
 8005396:	d10d      	bne.n	80053b4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800539c:	2b00      	cmp	r3, #0
 800539e:	d104      	bne.n	80053aa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053a0:	2100      	movs	r1, #0
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f97a 	bl	800569c <USB_SetDevSpeed>
 80053a8:	e01a      	b.n	80053e0 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053aa:	2101      	movs	r1, #1
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f975 	bl	800569c <USB_SetDevSpeed>
 80053b2:	e015      	b.n	80053e0 <USB_DevInit+0xe4>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80053b4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d10d      	bne.n	80053d8 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80053bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d104      	bne.n	80053ce <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80053c4:	2100      	movs	r1, #0
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f968 	bl	800569c <USB_SetDevSpeed>
 80053cc:	e008      	b.n	80053e0 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80053ce:	2101      	movs	r1, #1
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f963 	bl	800569c <USB_SetDevSpeed>
 80053d6:	e003      	b.n	80053e0 <USB_DevInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80053d8:	2103      	movs	r1, #3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f95e 	bl	800569c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053e0:	2110      	movs	r1, #16
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f8fa 	bl	80055dc <USB_FlushTxFifo>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d001      	beq.n	80053f2 <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f000 f924 	bl	8005640 <USB_FlushRxFifo>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005408:	461a      	mov	r2, r3
 800540a:	2300      	movs	r3, #0
 800540c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005414:	461a      	mov	r2, r3
 8005416:	2300      	movs	r3, #0
 8005418:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005420:	461a      	mov	r2, r3
 8005422:	2300      	movs	r3, #0
 8005424:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005426:	2300      	movs	r3, #0
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	e043      	b.n	80054b4 <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800543e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005442:	d118      	bne.n	8005476 <USB_DevInit+0x17a>
    {
      if (i == 0U)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10a      	bne.n	8005460 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005456:	461a      	mov	r2, r3
 8005458:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	e013      	b.n	8005488 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	015a      	lsls	r2, r3, #5
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800546c:	461a      	mov	r2, r3
 800546e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	e008      	b.n	8005488 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	015a      	lsls	r2, r3, #5
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4413      	add	r3, r2
 800547e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005482:	461a      	mov	r2, r3
 8005484:	2300      	movs	r3, #0
 8005486:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005494:	461a      	mov	r2, r3
 8005496:	2300      	movs	r3, #0
 8005498:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a6:	461a      	mov	r2, r3
 80054a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80054ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	3301      	adds	r3, #1
 80054b2:	613b      	str	r3, [r7, #16]
 80054b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80054b8:	461a      	mov	r2, r3
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	4293      	cmp	r3, r2
 80054be:	d3b5      	bcc.n	800542c <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80054c0:	2300      	movs	r3, #0
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	e043      	b.n	800554e <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80054d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054dc:	d118      	bne.n	8005510 <USB_DevInit+0x214>
    {
      if (i == 0U)
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054f0:	461a      	mov	r2, r3
 80054f2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	e013      	b.n	8005522 <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005506:	461a      	mov	r2, r3
 8005508:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800550c:	6013      	str	r3, [r2, #0]
 800550e:	e008      	b.n	8005522 <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800551c:	461a      	mov	r2, r3
 800551e:	2300      	movs	r3, #0
 8005520:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800552e:	461a      	mov	r2, r3
 8005530:	2300      	movs	r3, #0
 8005532:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005540:	461a      	mov	r2, r3
 8005542:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005546:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	3301      	adds	r3, #1
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005552:	461a      	mov	r2, r3
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4293      	cmp	r3, r2
 8005558:	d3b5      	bcc.n	80054c6 <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005568:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800556c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2200      	movs	r2, #0
 8005572:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800557a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800557c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005580:	2b00      	cmp	r3, #0
 8005582:	d105      	bne.n	8005590 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	f043 0210 	orr.w	r2, r3, #16
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699a      	ldr	r2, [r3, #24]
 8005594:	4b0f      	ldr	r3, [pc, #60]	@ (80055d4 <USB_DevInit+0x2d8>)
 8005596:	4313      	orrs	r3, r2
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800559c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d005      	beq.n	80055b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	f043 0208 	orr.w	r2, r3, #8
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80055b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d105      	bne.n	80055c4 <USB_DevInit+0x2c8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699a      	ldr	r2, [r3, #24]
 80055bc:	4b06      	ldr	r3, [pc, #24]	@ (80055d8 <USB_DevInit+0x2dc>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80055c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3718      	adds	r7, #24
 80055ca:	46bd      	mov	sp, r7
 80055cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055d0:	b004      	add	sp, #16
 80055d2:	4770      	bx	lr
 80055d4:	803c3800 	.word	0x803c3800
 80055d8:	40000004 	.word	0x40000004

080055dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3301      	adds	r3, #1
 80055ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055f6:	d901      	bls.n	80055fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	e01b      	b.n	8005634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	daf2      	bge.n	80055ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005604:	2300      	movs	r3, #0
 8005606:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	019b      	lsls	r3, r3, #6
 800560c:	f043 0220 	orr.w	r2, r3, #32
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	3301      	adds	r3, #1
 8005618:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005620:	d901      	bls.n	8005626 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e006      	b.n	8005634 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0320 	and.w	r3, r3, #32
 800562e:	2b20      	cmp	r3, #32
 8005630:	d0f0      	beq.n	8005614 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3714      	adds	r7, #20
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	3301      	adds	r3, #1
 8005650:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005658:	d901      	bls.n	800565e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e018      	b.n	8005690 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b00      	cmp	r3, #0
 8005664:	daf2      	bge.n	800564c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005666:	2300      	movs	r3, #0
 8005668:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2210      	movs	r2, #16
 800566e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3301      	adds	r3, #1
 8005674:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800567c:	d901      	bls.n	8005682 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e006      	b.n	8005690 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	f003 0310 	and.w	r3, r3, #16
 800568a:	2b10      	cmp	r3, #16
 800568c:	d0f0      	beq.n	8005670 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	78fb      	ldrb	r3, [r7, #3]
 80056b6:	68f9      	ldr	r1, [r7, #12]
 80056b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056bc:	4313      	orrs	r3, r2
 80056be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3714      	adds	r7, #20
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b085      	sub	sp, #20
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80056e8:	f023 0303 	bic.w	r3, r3, #3
 80056ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056fc:	f043 0302 	orr.w	r3, r3, #2
 8005700:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	f003 0301 	and.w	r3, r3, #1
}
 8005720:	4618      	mov	r0, r3
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3301      	adds	r3, #1
 800573c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005744:	d901      	bls.n	800574a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e01b      	b.n	8005782 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	daf2      	bge.n	8005738 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f043 0201 	orr.w	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	3301      	adds	r3, #1
 8005766:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800576e:	d901      	bls.n	8005774 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e006      	b.n	8005782 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b01      	cmp	r3, #1
 800577e:	d0f0      	beq.n	8005762 <USB_CoreReset+0x36>

  return HAL_OK;
 8005780:	2300      	movs	r3, #0
}
 8005782:	4618      	mov	r0, r3
 8005784:	3714      	adds	r7, #20
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr

0800578e <__cvt>:
 800578e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005792:	ec57 6b10 	vmov	r6, r7, d0
 8005796:	2f00      	cmp	r7, #0
 8005798:	460c      	mov	r4, r1
 800579a:	4619      	mov	r1, r3
 800579c:	463b      	mov	r3, r7
 800579e:	bfbb      	ittet	lt
 80057a0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80057a4:	461f      	movlt	r7, r3
 80057a6:	2300      	movge	r3, #0
 80057a8:	232d      	movlt	r3, #45	@ 0x2d
 80057aa:	700b      	strb	r3, [r1, #0]
 80057ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057ae:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80057b2:	4691      	mov	r9, r2
 80057b4:	f023 0820 	bic.w	r8, r3, #32
 80057b8:	bfbc      	itt	lt
 80057ba:	4632      	movlt	r2, r6
 80057bc:	4616      	movlt	r6, r2
 80057be:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057c2:	d005      	beq.n	80057d0 <__cvt+0x42>
 80057c4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80057c8:	d100      	bne.n	80057cc <__cvt+0x3e>
 80057ca:	3401      	adds	r4, #1
 80057cc:	2102      	movs	r1, #2
 80057ce:	e000      	b.n	80057d2 <__cvt+0x44>
 80057d0:	2103      	movs	r1, #3
 80057d2:	ab03      	add	r3, sp, #12
 80057d4:	9301      	str	r3, [sp, #4]
 80057d6:	ab02      	add	r3, sp, #8
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	ec47 6b10 	vmov	d0, r6, r7
 80057de:	4653      	mov	r3, sl
 80057e0:	4622      	mov	r2, r4
 80057e2:	f000 fe4d 	bl	8006480 <_dtoa_r>
 80057e6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80057ea:	4605      	mov	r5, r0
 80057ec:	d119      	bne.n	8005822 <__cvt+0x94>
 80057ee:	f019 0f01 	tst.w	r9, #1
 80057f2:	d00e      	beq.n	8005812 <__cvt+0x84>
 80057f4:	eb00 0904 	add.w	r9, r0, r4
 80057f8:	2200      	movs	r2, #0
 80057fa:	2300      	movs	r3, #0
 80057fc:	4630      	mov	r0, r6
 80057fe:	4639      	mov	r1, r7
 8005800:	f7fb f98a 	bl	8000b18 <__aeabi_dcmpeq>
 8005804:	b108      	cbz	r0, 800580a <__cvt+0x7c>
 8005806:	f8cd 900c 	str.w	r9, [sp, #12]
 800580a:	2230      	movs	r2, #48	@ 0x30
 800580c:	9b03      	ldr	r3, [sp, #12]
 800580e:	454b      	cmp	r3, r9
 8005810:	d31e      	bcc.n	8005850 <__cvt+0xc2>
 8005812:	9b03      	ldr	r3, [sp, #12]
 8005814:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005816:	1b5b      	subs	r3, r3, r5
 8005818:	4628      	mov	r0, r5
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	b004      	add	sp, #16
 800581e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005822:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005826:	eb00 0904 	add.w	r9, r0, r4
 800582a:	d1e5      	bne.n	80057f8 <__cvt+0x6a>
 800582c:	7803      	ldrb	r3, [r0, #0]
 800582e:	2b30      	cmp	r3, #48	@ 0x30
 8005830:	d10a      	bne.n	8005848 <__cvt+0xba>
 8005832:	2200      	movs	r2, #0
 8005834:	2300      	movs	r3, #0
 8005836:	4630      	mov	r0, r6
 8005838:	4639      	mov	r1, r7
 800583a:	f7fb f96d 	bl	8000b18 <__aeabi_dcmpeq>
 800583e:	b918      	cbnz	r0, 8005848 <__cvt+0xba>
 8005840:	f1c4 0401 	rsb	r4, r4, #1
 8005844:	f8ca 4000 	str.w	r4, [sl]
 8005848:	f8da 3000 	ldr.w	r3, [sl]
 800584c:	4499      	add	r9, r3
 800584e:	e7d3      	b.n	80057f8 <__cvt+0x6a>
 8005850:	1c59      	adds	r1, r3, #1
 8005852:	9103      	str	r1, [sp, #12]
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	e7d9      	b.n	800580c <__cvt+0x7e>

08005858 <__exponent>:
 8005858:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800585a:	2900      	cmp	r1, #0
 800585c:	bfba      	itte	lt
 800585e:	4249      	neglt	r1, r1
 8005860:	232d      	movlt	r3, #45	@ 0x2d
 8005862:	232b      	movge	r3, #43	@ 0x2b
 8005864:	2909      	cmp	r1, #9
 8005866:	7002      	strb	r2, [r0, #0]
 8005868:	7043      	strb	r3, [r0, #1]
 800586a:	dd29      	ble.n	80058c0 <__exponent+0x68>
 800586c:	f10d 0307 	add.w	r3, sp, #7
 8005870:	461d      	mov	r5, r3
 8005872:	270a      	movs	r7, #10
 8005874:	461a      	mov	r2, r3
 8005876:	fbb1 f6f7 	udiv	r6, r1, r7
 800587a:	fb07 1416 	mls	r4, r7, r6, r1
 800587e:	3430      	adds	r4, #48	@ 0x30
 8005880:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005884:	460c      	mov	r4, r1
 8005886:	2c63      	cmp	r4, #99	@ 0x63
 8005888:	f103 33ff 	add.w	r3, r3, #4294967295
 800588c:	4631      	mov	r1, r6
 800588e:	dcf1      	bgt.n	8005874 <__exponent+0x1c>
 8005890:	3130      	adds	r1, #48	@ 0x30
 8005892:	1e94      	subs	r4, r2, #2
 8005894:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005898:	1c41      	adds	r1, r0, #1
 800589a:	4623      	mov	r3, r4
 800589c:	42ab      	cmp	r3, r5
 800589e:	d30a      	bcc.n	80058b6 <__exponent+0x5e>
 80058a0:	f10d 0309 	add.w	r3, sp, #9
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	42ac      	cmp	r4, r5
 80058a8:	bf88      	it	hi
 80058aa:	2300      	movhi	r3, #0
 80058ac:	3302      	adds	r3, #2
 80058ae:	4403      	add	r3, r0
 80058b0:	1a18      	subs	r0, r3, r0
 80058b2:	b003      	add	sp, #12
 80058b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80058ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80058be:	e7ed      	b.n	800589c <__exponent+0x44>
 80058c0:	2330      	movs	r3, #48	@ 0x30
 80058c2:	3130      	adds	r1, #48	@ 0x30
 80058c4:	7083      	strb	r3, [r0, #2]
 80058c6:	70c1      	strb	r1, [r0, #3]
 80058c8:	1d03      	adds	r3, r0, #4
 80058ca:	e7f1      	b.n	80058b0 <__exponent+0x58>

080058cc <_printf_float>:
 80058cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058d0:	b08d      	sub	sp, #52	@ 0x34
 80058d2:	460c      	mov	r4, r1
 80058d4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80058d8:	4616      	mov	r6, r2
 80058da:	461f      	mov	r7, r3
 80058dc:	4605      	mov	r5, r0
 80058de:	f000 fccd 	bl	800627c <_localeconv_r>
 80058e2:	6803      	ldr	r3, [r0, #0]
 80058e4:	9304      	str	r3, [sp, #16]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f7fa fcea 	bl	80002c0 <strlen>
 80058ec:	2300      	movs	r3, #0
 80058ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80058f0:	f8d8 3000 	ldr.w	r3, [r8]
 80058f4:	9005      	str	r0, [sp, #20]
 80058f6:	3307      	adds	r3, #7
 80058f8:	f023 0307 	bic.w	r3, r3, #7
 80058fc:	f103 0208 	add.w	r2, r3, #8
 8005900:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005904:	f8d4 b000 	ldr.w	fp, [r4]
 8005908:	f8c8 2000 	str.w	r2, [r8]
 800590c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005910:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005914:	9307      	str	r3, [sp, #28]
 8005916:	f8cd 8018 	str.w	r8, [sp, #24]
 800591a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800591e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005922:	4b9c      	ldr	r3, [pc, #624]	@ (8005b94 <_printf_float+0x2c8>)
 8005924:	f04f 32ff 	mov.w	r2, #4294967295
 8005928:	f7fb f928 	bl	8000b7c <__aeabi_dcmpun>
 800592c:	bb70      	cbnz	r0, 800598c <_printf_float+0xc0>
 800592e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005932:	4b98      	ldr	r3, [pc, #608]	@ (8005b94 <_printf_float+0x2c8>)
 8005934:	f04f 32ff 	mov.w	r2, #4294967295
 8005938:	f7fb f902 	bl	8000b40 <__aeabi_dcmple>
 800593c:	bb30      	cbnz	r0, 800598c <_printf_float+0xc0>
 800593e:	2200      	movs	r2, #0
 8005940:	2300      	movs	r3, #0
 8005942:	4640      	mov	r0, r8
 8005944:	4649      	mov	r1, r9
 8005946:	f7fb f8f1 	bl	8000b2c <__aeabi_dcmplt>
 800594a:	b110      	cbz	r0, 8005952 <_printf_float+0x86>
 800594c:	232d      	movs	r3, #45	@ 0x2d
 800594e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005952:	4a91      	ldr	r2, [pc, #580]	@ (8005b98 <_printf_float+0x2cc>)
 8005954:	4b91      	ldr	r3, [pc, #580]	@ (8005b9c <_printf_float+0x2d0>)
 8005956:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800595a:	bf94      	ite	ls
 800595c:	4690      	movls	r8, r2
 800595e:	4698      	movhi	r8, r3
 8005960:	2303      	movs	r3, #3
 8005962:	6123      	str	r3, [r4, #16]
 8005964:	f02b 0304 	bic.w	r3, fp, #4
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	f04f 0900 	mov.w	r9, #0
 800596e:	9700      	str	r7, [sp, #0]
 8005970:	4633      	mov	r3, r6
 8005972:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005974:	4621      	mov	r1, r4
 8005976:	4628      	mov	r0, r5
 8005978:	f000 f9d2 	bl	8005d20 <_printf_common>
 800597c:	3001      	adds	r0, #1
 800597e:	f040 808d 	bne.w	8005a9c <_printf_float+0x1d0>
 8005982:	f04f 30ff 	mov.w	r0, #4294967295
 8005986:	b00d      	add	sp, #52	@ 0x34
 8005988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800598c:	4642      	mov	r2, r8
 800598e:	464b      	mov	r3, r9
 8005990:	4640      	mov	r0, r8
 8005992:	4649      	mov	r1, r9
 8005994:	f7fb f8f2 	bl	8000b7c <__aeabi_dcmpun>
 8005998:	b140      	cbz	r0, 80059ac <_printf_float+0xe0>
 800599a:	464b      	mov	r3, r9
 800599c:	2b00      	cmp	r3, #0
 800599e:	bfbc      	itt	lt
 80059a0:	232d      	movlt	r3, #45	@ 0x2d
 80059a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80059a6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ba0 <_printf_float+0x2d4>)
 80059a8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ba4 <_printf_float+0x2d8>)
 80059aa:	e7d4      	b.n	8005956 <_printf_float+0x8a>
 80059ac:	6863      	ldr	r3, [r4, #4]
 80059ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80059b2:	9206      	str	r2, [sp, #24]
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	d13b      	bne.n	8005a30 <_printf_float+0x164>
 80059b8:	2306      	movs	r3, #6
 80059ba:	6063      	str	r3, [r4, #4]
 80059bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80059c0:	2300      	movs	r3, #0
 80059c2:	6022      	str	r2, [r4, #0]
 80059c4:	9303      	str	r3, [sp, #12]
 80059c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80059c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80059cc:	ab09      	add	r3, sp, #36	@ 0x24
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	6861      	ldr	r1, [r4, #4]
 80059d2:	ec49 8b10 	vmov	d0, r8, r9
 80059d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80059da:	4628      	mov	r0, r5
 80059dc:	f7ff fed7 	bl	800578e <__cvt>
 80059e0:	9b06      	ldr	r3, [sp, #24]
 80059e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80059e4:	2b47      	cmp	r3, #71	@ 0x47
 80059e6:	4680      	mov	r8, r0
 80059e8:	d129      	bne.n	8005a3e <_printf_float+0x172>
 80059ea:	1cc8      	adds	r0, r1, #3
 80059ec:	db02      	blt.n	80059f4 <_printf_float+0x128>
 80059ee:	6863      	ldr	r3, [r4, #4]
 80059f0:	4299      	cmp	r1, r3
 80059f2:	dd41      	ble.n	8005a78 <_printf_float+0x1ac>
 80059f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80059f8:	fa5f fa8a 	uxtb.w	sl, sl
 80059fc:	3901      	subs	r1, #1
 80059fe:	4652      	mov	r2, sl
 8005a00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a04:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a06:	f7ff ff27 	bl	8005858 <__exponent>
 8005a0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a0c:	1813      	adds	r3, r2, r0
 8005a0e:	2a01      	cmp	r2, #1
 8005a10:	4681      	mov	r9, r0
 8005a12:	6123      	str	r3, [r4, #16]
 8005a14:	dc02      	bgt.n	8005a1c <_printf_float+0x150>
 8005a16:	6822      	ldr	r2, [r4, #0]
 8005a18:	07d2      	lsls	r2, r2, #31
 8005a1a:	d501      	bpl.n	8005a20 <_printf_float+0x154>
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	6123      	str	r3, [r4, #16]
 8005a20:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d0a2      	beq.n	800596e <_printf_float+0xa2>
 8005a28:	232d      	movs	r3, #45	@ 0x2d
 8005a2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a2e:	e79e      	b.n	800596e <_printf_float+0xa2>
 8005a30:	9a06      	ldr	r2, [sp, #24]
 8005a32:	2a47      	cmp	r2, #71	@ 0x47
 8005a34:	d1c2      	bne.n	80059bc <_printf_float+0xf0>
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1c0      	bne.n	80059bc <_printf_float+0xf0>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e7bd      	b.n	80059ba <_printf_float+0xee>
 8005a3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a42:	d9db      	bls.n	80059fc <_printf_float+0x130>
 8005a44:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a48:	d118      	bne.n	8005a7c <_printf_float+0x1b0>
 8005a4a:	2900      	cmp	r1, #0
 8005a4c:	6863      	ldr	r3, [r4, #4]
 8005a4e:	dd0b      	ble.n	8005a68 <_printf_float+0x19c>
 8005a50:	6121      	str	r1, [r4, #16]
 8005a52:	b913      	cbnz	r3, 8005a5a <_printf_float+0x18e>
 8005a54:	6822      	ldr	r2, [r4, #0]
 8005a56:	07d0      	lsls	r0, r2, #31
 8005a58:	d502      	bpl.n	8005a60 <_printf_float+0x194>
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	440b      	add	r3, r1
 8005a5e:	6123      	str	r3, [r4, #16]
 8005a60:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a62:	f04f 0900 	mov.w	r9, #0
 8005a66:	e7db      	b.n	8005a20 <_printf_float+0x154>
 8005a68:	b913      	cbnz	r3, 8005a70 <_printf_float+0x1a4>
 8005a6a:	6822      	ldr	r2, [r4, #0]
 8005a6c:	07d2      	lsls	r2, r2, #31
 8005a6e:	d501      	bpl.n	8005a74 <_printf_float+0x1a8>
 8005a70:	3302      	adds	r3, #2
 8005a72:	e7f4      	b.n	8005a5e <_printf_float+0x192>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e7f2      	b.n	8005a5e <_printf_float+0x192>
 8005a78:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a7e:	4299      	cmp	r1, r3
 8005a80:	db05      	blt.n	8005a8e <_printf_float+0x1c2>
 8005a82:	6823      	ldr	r3, [r4, #0]
 8005a84:	6121      	str	r1, [r4, #16]
 8005a86:	07d8      	lsls	r0, r3, #31
 8005a88:	d5ea      	bpl.n	8005a60 <_printf_float+0x194>
 8005a8a:	1c4b      	adds	r3, r1, #1
 8005a8c:	e7e7      	b.n	8005a5e <_printf_float+0x192>
 8005a8e:	2900      	cmp	r1, #0
 8005a90:	bfd4      	ite	le
 8005a92:	f1c1 0202 	rsble	r2, r1, #2
 8005a96:	2201      	movgt	r2, #1
 8005a98:	4413      	add	r3, r2
 8005a9a:	e7e0      	b.n	8005a5e <_printf_float+0x192>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	055a      	lsls	r2, r3, #21
 8005aa0:	d407      	bmi.n	8005ab2 <_printf_float+0x1e6>
 8005aa2:	6923      	ldr	r3, [r4, #16]
 8005aa4:	4642      	mov	r2, r8
 8005aa6:	4631      	mov	r1, r6
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	47b8      	blx	r7
 8005aac:	3001      	adds	r0, #1
 8005aae:	d12b      	bne.n	8005b08 <_printf_float+0x23c>
 8005ab0:	e767      	b.n	8005982 <_printf_float+0xb6>
 8005ab2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ab6:	f240 80dd 	bls.w	8005c74 <_printf_float+0x3a8>
 8005aba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	f7fb f829 	bl	8000b18 <__aeabi_dcmpeq>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	d033      	beq.n	8005b32 <_printf_float+0x266>
 8005aca:	4a37      	ldr	r2, [pc, #220]	@ (8005ba8 <_printf_float+0x2dc>)
 8005acc:	2301      	movs	r3, #1
 8005ace:	4631      	mov	r1, r6
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	47b8      	blx	r7
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	f43f af54 	beq.w	8005982 <_printf_float+0xb6>
 8005ada:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005ade:	4543      	cmp	r3, r8
 8005ae0:	db02      	blt.n	8005ae8 <_printf_float+0x21c>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	07d8      	lsls	r0, r3, #31
 8005ae6:	d50f      	bpl.n	8005b08 <_printf_float+0x23c>
 8005ae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005aec:	4631      	mov	r1, r6
 8005aee:	4628      	mov	r0, r5
 8005af0:	47b8      	blx	r7
 8005af2:	3001      	adds	r0, #1
 8005af4:	f43f af45 	beq.w	8005982 <_printf_float+0xb6>
 8005af8:	f04f 0900 	mov.w	r9, #0
 8005afc:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b00:	f104 0a1a 	add.w	sl, r4, #26
 8005b04:	45c8      	cmp	r8, r9
 8005b06:	dc09      	bgt.n	8005b1c <_printf_float+0x250>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	079b      	lsls	r3, r3, #30
 8005b0c:	f100 8103 	bmi.w	8005d16 <_printf_float+0x44a>
 8005b10:	68e0      	ldr	r0, [r4, #12]
 8005b12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b14:	4298      	cmp	r0, r3
 8005b16:	bfb8      	it	lt
 8005b18:	4618      	movlt	r0, r3
 8005b1a:	e734      	b.n	8005986 <_printf_float+0xba>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	4652      	mov	r2, sl
 8005b20:	4631      	mov	r1, r6
 8005b22:	4628      	mov	r0, r5
 8005b24:	47b8      	blx	r7
 8005b26:	3001      	adds	r0, #1
 8005b28:	f43f af2b 	beq.w	8005982 <_printf_float+0xb6>
 8005b2c:	f109 0901 	add.w	r9, r9, #1
 8005b30:	e7e8      	b.n	8005b04 <_printf_float+0x238>
 8005b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	dc39      	bgt.n	8005bac <_printf_float+0x2e0>
 8005b38:	4a1b      	ldr	r2, [pc, #108]	@ (8005ba8 <_printf_float+0x2dc>)
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	4631      	mov	r1, r6
 8005b3e:	4628      	mov	r0, r5
 8005b40:	47b8      	blx	r7
 8005b42:	3001      	adds	r0, #1
 8005b44:	f43f af1d 	beq.w	8005982 <_printf_float+0xb6>
 8005b48:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005b4c:	ea59 0303 	orrs.w	r3, r9, r3
 8005b50:	d102      	bne.n	8005b58 <_printf_float+0x28c>
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	07d9      	lsls	r1, r3, #31
 8005b56:	d5d7      	bpl.n	8005b08 <_printf_float+0x23c>
 8005b58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b5c:	4631      	mov	r1, r6
 8005b5e:	4628      	mov	r0, r5
 8005b60:	47b8      	blx	r7
 8005b62:	3001      	adds	r0, #1
 8005b64:	f43f af0d 	beq.w	8005982 <_printf_float+0xb6>
 8005b68:	f04f 0a00 	mov.w	sl, #0
 8005b6c:	f104 0b1a 	add.w	fp, r4, #26
 8005b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b72:	425b      	negs	r3, r3
 8005b74:	4553      	cmp	r3, sl
 8005b76:	dc01      	bgt.n	8005b7c <_printf_float+0x2b0>
 8005b78:	464b      	mov	r3, r9
 8005b7a:	e793      	b.n	8005aa4 <_printf_float+0x1d8>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	465a      	mov	r2, fp
 8005b80:	4631      	mov	r1, r6
 8005b82:	4628      	mov	r0, r5
 8005b84:	47b8      	blx	r7
 8005b86:	3001      	adds	r0, #1
 8005b88:	f43f aefb 	beq.w	8005982 <_printf_float+0xb6>
 8005b8c:	f10a 0a01 	add.w	sl, sl, #1
 8005b90:	e7ee      	b.n	8005b70 <_printf_float+0x2a4>
 8005b92:	bf00      	nop
 8005b94:	7fefffff 	.word	0x7fefffff
 8005b98:	080084a8 	.word	0x080084a8
 8005b9c:	080084ac 	.word	0x080084ac
 8005ba0:	080084b0 	.word	0x080084b0
 8005ba4:	080084b4 	.word	0x080084b4
 8005ba8:	080084b8 	.word	0x080084b8
 8005bac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005bb2:	4553      	cmp	r3, sl
 8005bb4:	bfa8      	it	ge
 8005bb6:	4653      	movge	r3, sl
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	4699      	mov	r9, r3
 8005bbc:	dc36      	bgt.n	8005c2c <_printf_float+0x360>
 8005bbe:	f04f 0b00 	mov.w	fp, #0
 8005bc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bc6:	f104 021a 	add.w	r2, r4, #26
 8005bca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bcc:	9306      	str	r3, [sp, #24]
 8005bce:	eba3 0309 	sub.w	r3, r3, r9
 8005bd2:	455b      	cmp	r3, fp
 8005bd4:	dc31      	bgt.n	8005c3a <_printf_float+0x36e>
 8005bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bd8:	459a      	cmp	sl, r3
 8005bda:	dc3a      	bgt.n	8005c52 <_printf_float+0x386>
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	07da      	lsls	r2, r3, #31
 8005be0:	d437      	bmi.n	8005c52 <_printf_float+0x386>
 8005be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005be4:	ebaa 0903 	sub.w	r9, sl, r3
 8005be8:	9b06      	ldr	r3, [sp, #24]
 8005bea:	ebaa 0303 	sub.w	r3, sl, r3
 8005bee:	4599      	cmp	r9, r3
 8005bf0:	bfa8      	it	ge
 8005bf2:	4699      	movge	r9, r3
 8005bf4:	f1b9 0f00 	cmp.w	r9, #0
 8005bf8:	dc33      	bgt.n	8005c62 <_printf_float+0x396>
 8005bfa:	f04f 0800 	mov.w	r8, #0
 8005bfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c02:	f104 0b1a 	add.w	fp, r4, #26
 8005c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c08:	ebaa 0303 	sub.w	r3, sl, r3
 8005c0c:	eba3 0309 	sub.w	r3, r3, r9
 8005c10:	4543      	cmp	r3, r8
 8005c12:	f77f af79 	ble.w	8005b08 <_printf_float+0x23c>
 8005c16:	2301      	movs	r3, #1
 8005c18:	465a      	mov	r2, fp
 8005c1a:	4631      	mov	r1, r6
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	47b8      	blx	r7
 8005c20:	3001      	adds	r0, #1
 8005c22:	f43f aeae 	beq.w	8005982 <_printf_float+0xb6>
 8005c26:	f108 0801 	add.w	r8, r8, #1
 8005c2a:	e7ec      	b.n	8005c06 <_printf_float+0x33a>
 8005c2c:	4642      	mov	r2, r8
 8005c2e:	4631      	mov	r1, r6
 8005c30:	4628      	mov	r0, r5
 8005c32:	47b8      	blx	r7
 8005c34:	3001      	adds	r0, #1
 8005c36:	d1c2      	bne.n	8005bbe <_printf_float+0x2f2>
 8005c38:	e6a3      	b.n	8005982 <_printf_float+0xb6>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	4631      	mov	r1, r6
 8005c3e:	4628      	mov	r0, r5
 8005c40:	9206      	str	r2, [sp, #24]
 8005c42:	47b8      	blx	r7
 8005c44:	3001      	adds	r0, #1
 8005c46:	f43f ae9c 	beq.w	8005982 <_printf_float+0xb6>
 8005c4a:	9a06      	ldr	r2, [sp, #24]
 8005c4c:	f10b 0b01 	add.w	fp, fp, #1
 8005c50:	e7bb      	b.n	8005bca <_printf_float+0x2fe>
 8005c52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c56:	4631      	mov	r1, r6
 8005c58:	4628      	mov	r0, r5
 8005c5a:	47b8      	blx	r7
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d1c0      	bne.n	8005be2 <_printf_float+0x316>
 8005c60:	e68f      	b.n	8005982 <_printf_float+0xb6>
 8005c62:	9a06      	ldr	r2, [sp, #24]
 8005c64:	464b      	mov	r3, r9
 8005c66:	4442      	add	r2, r8
 8005c68:	4631      	mov	r1, r6
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	47b8      	blx	r7
 8005c6e:	3001      	adds	r0, #1
 8005c70:	d1c3      	bne.n	8005bfa <_printf_float+0x32e>
 8005c72:	e686      	b.n	8005982 <_printf_float+0xb6>
 8005c74:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c78:	f1ba 0f01 	cmp.w	sl, #1
 8005c7c:	dc01      	bgt.n	8005c82 <_printf_float+0x3b6>
 8005c7e:	07db      	lsls	r3, r3, #31
 8005c80:	d536      	bpl.n	8005cf0 <_printf_float+0x424>
 8005c82:	2301      	movs	r3, #1
 8005c84:	4642      	mov	r2, r8
 8005c86:	4631      	mov	r1, r6
 8005c88:	4628      	mov	r0, r5
 8005c8a:	47b8      	blx	r7
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	f43f ae78 	beq.w	8005982 <_printf_float+0xb6>
 8005c92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c96:	4631      	mov	r1, r6
 8005c98:	4628      	mov	r0, r5
 8005c9a:	47b8      	blx	r7
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	f43f ae70 	beq.w	8005982 <_printf_float+0xb6>
 8005ca2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cae:	f7fa ff33 	bl	8000b18 <__aeabi_dcmpeq>
 8005cb2:	b9c0      	cbnz	r0, 8005ce6 <_printf_float+0x41a>
 8005cb4:	4653      	mov	r3, sl
 8005cb6:	f108 0201 	add.w	r2, r8, #1
 8005cba:	4631      	mov	r1, r6
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	47b8      	blx	r7
 8005cc0:	3001      	adds	r0, #1
 8005cc2:	d10c      	bne.n	8005cde <_printf_float+0x412>
 8005cc4:	e65d      	b.n	8005982 <_printf_float+0xb6>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	465a      	mov	r2, fp
 8005cca:	4631      	mov	r1, r6
 8005ccc:	4628      	mov	r0, r5
 8005cce:	47b8      	blx	r7
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	f43f ae56 	beq.w	8005982 <_printf_float+0xb6>
 8005cd6:	f108 0801 	add.w	r8, r8, #1
 8005cda:	45d0      	cmp	r8, sl
 8005cdc:	dbf3      	blt.n	8005cc6 <_printf_float+0x3fa>
 8005cde:	464b      	mov	r3, r9
 8005ce0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005ce4:	e6df      	b.n	8005aa6 <_printf_float+0x1da>
 8005ce6:	f04f 0800 	mov.w	r8, #0
 8005cea:	f104 0b1a 	add.w	fp, r4, #26
 8005cee:	e7f4      	b.n	8005cda <_printf_float+0x40e>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	4642      	mov	r2, r8
 8005cf4:	e7e1      	b.n	8005cba <_printf_float+0x3ee>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	464a      	mov	r2, r9
 8005cfa:	4631      	mov	r1, r6
 8005cfc:	4628      	mov	r0, r5
 8005cfe:	47b8      	blx	r7
 8005d00:	3001      	adds	r0, #1
 8005d02:	f43f ae3e 	beq.w	8005982 <_printf_float+0xb6>
 8005d06:	f108 0801 	add.w	r8, r8, #1
 8005d0a:	68e3      	ldr	r3, [r4, #12]
 8005d0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d0e:	1a5b      	subs	r3, r3, r1
 8005d10:	4543      	cmp	r3, r8
 8005d12:	dcf0      	bgt.n	8005cf6 <_printf_float+0x42a>
 8005d14:	e6fc      	b.n	8005b10 <_printf_float+0x244>
 8005d16:	f04f 0800 	mov.w	r8, #0
 8005d1a:	f104 0919 	add.w	r9, r4, #25
 8005d1e:	e7f4      	b.n	8005d0a <_printf_float+0x43e>

08005d20 <_printf_common>:
 8005d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d24:	4616      	mov	r6, r2
 8005d26:	4698      	mov	r8, r3
 8005d28:	688a      	ldr	r2, [r1, #8]
 8005d2a:	690b      	ldr	r3, [r1, #16]
 8005d2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d30:	4293      	cmp	r3, r2
 8005d32:	bfb8      	it	lt
 8005d34:	4613      	movlt	r3, r2
 8005d36:	6033      	str	r3, [r6, #0]
 8005d38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d3c:	4607      	mov	r7, r0
 8005d3e:	460c      	mov	r4, r1
 8005d40:	b10a      	cbz	r2, 8005d46 <_printf_common+0x26>
 8005d42:	3301      	adds	r3, #1
 8005d44:	6033      	str	r3, [r6, #0]
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	0699      	lsls	r1, r3, #26
 8005d4a:	bf42      	ittt	mi
 8005d4c:	6833      	ldrmi	r3, [r6, #0]
 8005d4e:	3302      	addmi	r3, #2
 8005d50:	6033      	strmi	r3, [r6, #0]
 8005d52:	6825      	ldr	r5, [r4, #0]
 8005d54:	f015 0506 	ands.w	r5, r5, #6
 8005d58:	d106      	bne.n	8005d68 <_printf_common+0x48>
 8005d5a:	f104 0a19 	add.w	sl, r4, #25
 8005d5e:	68e3      	ldr	r3, [r4, #12]
 8005d60:	6832      	ldr	r2, [r6, #0]
 8005d62:	1a9b      	subs	r3, r3, r2
 8005d64:	42ab      	cmp	r3, r5
 8005d66:	dc26      	bgt.n	8005db6 <_printf_common+0x96>
 8005d68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d6c:	6822      	ldr	r2, [r4, #0]
 8005d6e:	3b00      	subs	r3, #0
 8005d70:	bf18      	it	ne
 8005d72:	2301      	movne	r3, #1
 8005d74:	0692      	lsls	r2, r2, #26
 8005d76:	d42b      	bmi.n	8005dd0 <_printf_common+0xb0>
 8005d78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d7c:	4641      	mov	r1, r8
 8005d7e:	4638      	mov	r0, r7
 8005d80:	47c8      	blx	r9
 8005d82:	3001      	adds	r0, #1
 8005d84:	d01e      	beq.n	8005dc4 <_printf_common+0xa4>
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	6922      	ldr	r2, [r4, #16]
 8005d8a:	f003 0306 	and.w	r3, r3, #6
 8005d8e:	2b04      	cmp	r3, #4
 8005d90:	bf02      	ittt	eq
 8005d92:	68e5      	ldreq	r5, [r4, #12]
 8005d94:	6833      	ldreq	r3, [r6, #0]
 8005d96:	1aed      	subeq	r5, r5, r3
 8005d98:	68a3      	ldr	r3, [r4, #8]
 8005d9a:	bf0c      	ite	eq
 8005d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005da0:	2500      	movne	r5, #0
 8005da2:	4293      	cmp	r3, r2
 8005da4:	bfc4      	itt	gt
 8005da6:	1a9b      	subgt	r3, r3, r2
 8005da8:	18ed      	addgt	r5, r5, r3
 8005daa:	2600      	movs	r6, #0
 8005dac:	341a      	adds	r4, #26
 8005dae:	42b5      	cmp	r5, r6
 8005db0:	d11a      	bne.n	8005de8 <_printf_common+0xc8>
 8005db2:	2000      	movs	r0, #0
 8005db4:	e008      	b.n	8005dc8 <_printf_common+0xa8>
 8005db6:	2301      	movs	r3, #1
 8005db8:	4652      	mov	r2, sl
 8005dba:	4641      	mov	r1, r8
 8005dbc:	4638      	mov	r0, r7
 8005dbe:	47c8      	blx	r9
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	d103      	bne.n	8005dcc <_printf_common+0xac>
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dcc:	3501      	adds	r5, #1
 8005dce:	e7c6      	b.n	8005d5e <_printf_common+0x3e>
 8005dd0:	18e1      	adds	r1, r4, r3
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	2030      	movs	r0, #48	@ 0x30
 8005dd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005dda:	4422      	add	r2, r4
 8005ddc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005de0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005de4:	3302      	adds	r3, #2
 8005de6:	e7c7      	b.n	8005d78 <_printf_common+0x58>
 8005de8:	2301      	movs	r3, #1
 8005dea:	4622      	mov	r2, r4
 8005dec:	4641      	mov	r1, r8
 8005dee:	4638      	mov	r0, r7
 8005df0:	47c8      	blx	r9
 8005df2:	3001      	adds	r0, #1
 8005df4:	d0e6      	beq.n	8005dc4 <_printf_common+0xa4>
 8005df6:	3601      	adds	r6, #1
 8005df8:	e7d9      	b.n	8005dae <_printf_common+0x8e>
	...

08005dfc <_printf_i>:
 8005dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	7e0f      	ldrb	r7, [r1, #24]
 8005e02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e04:	2f78      	cmp	r7, #120	@ 0x78
 8005e06:	4691      	mov	r9, r2
 8005e08:	4680      	mov	r8, r0
 8005e0a:	460c      	mov	r4, r1
 8005e0c:	469a      	mov	sl, r3
 8005e0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e12:	d807      	bhi.n	8005e24 <_printf_i+0x28>
 8005e14:	2f62      	cmp	r7, #98	@ 0x62
 8005e16:	d80a      	bhi.n	8005e2e <_printf_i+0x32>
 8005e18:	2f00      	cmp	r7, #0
 8005e1a:	f000 80d2 	beq.w	8005fc2 <_printf_i+0x1c6>
 8005e1e:	2f58      	cmp	r7, #88	@ 0x58
 8005e20:	f000 80b9 	beq.w	8005f96 <_printf_i+0x19a>
 8005e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e2c:	e03a      	b.n	8005ea4 <_printf_i+0xa8>
 8005e2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e32:	2b15      	cmp	r3, #21
 8005e34:	d8f6      	bhi.n	8005e24 <_printf_i+0x28>
 8005e36:	a101      	add	r1, pc, #4	@ (adr r1, 8005e3c <_printf_i+0x40>)
 8005e38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e3c:	08005e95 	.word	0x08005e95
 8005e40:	08005ea9 	.word	0x08005ea9
 8005e44:	08005e25 	.word	0x08005e25
 8005e48:	08005e25 	.word	0x08005e25
 8005e4c:	08005e25 	.word	0x08005e25
 8005e50:	08005e25 	.word	0x08005e25
 8005e54:	08005ea9 	.word	0x08005ea9
 8005e58:	08005e25 	.word	0x08005e25
 8005e5c:	08005e25 	.word	0x08005e25
 8005e60:	08005e25 	.word	0x08005e25
 8005e64:	08005e25 	.word	0x08005e25
 8005e68:	08005fa9 	.word	0x08005fa9
 8005e6c:	08005ed3 	.word	0x08005ed3
 8005e70:	08005f63 	.word	0x08005f63
 8005e74:	08005e25 	.word	0x08005e25
 8005e78:	08005e25 	.word	0x08005e25
 8005e7c:	08005fcb 	.word	0x08005fcb
 8005e80:	08005e25 	.word	0x08005e25
 8005e84:	08005ed3 	.word	0x08005ed3
 8005e88:	08005e25 	.word	0x08005e25
 8005e8c:	08005e25 	.word	0x08005e25
 8005e90:	08005f6b 	.word	0x08005f6b
 8005e94:	6833      	ldr	r3, [r6, #0]
 8005e96:	1d1a      	adds	r2, r3, #4
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6032      	str	r2, [r6, #0]
 8005e9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ea0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e09d      	b.n	8005fe4 <_printf_i+0x1e8>
 8005ea8:	6833      	ldr	r3, [r6, #0]
 8005eaa:	6820      	ldr	r0, [r4, #0]
 8005eac:	1d19      	adds	r1, r3, #4
 8005eae:	6031      	str	r1, [r6, #0]
 8005eb0:	0606      	lsls	r6, r0, #24
 8005eb2:	d501      	bpl.n	8005eb8 <_printf_i+0xbc>
 8005eb4:	681d      	ldr	r5, [r3, #0]
 8005eb6:	e003      	b.n	8005ec0 <_printf_i+0xc4>
 8005eb8:	0645      	lsls	r5, r0, #25
 8005eba:	d5fb      	bpl.n	8005eb4 <_printf_i+0xb8>
 8005ebc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ec0:	2d00      	cmp	r5, #0
 8005ec2:	da03      	bge.n	8005ecc <_printf_i+0xd0>
 8005ec4:	232d      	movs	r3, #45	@ 0x2d
 8005ec6:	426d      	negs	r5, r5
 8005ec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ecc:	4859      	ldr	r0, [pc, #356]	@ (8006034 <_printf_i+0x238>)
 8005ece:	230a      	movs	r3, #10
 8005ed0:	e011      	b.n	8005ef6 <_printf_i+0xfa>
 8005ed2:	6821      	ldr	r1, [r4, #0]
 8005ed4:	6833      	ldr	r3, [r6, #0]
 8005ed6:	0608      	lsls	r0, r1, #24
 8005ed8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005edc:	d402      	bmi.n	8005ee4 <_printf_i+0xe8>
 8005ede:	0649      	lsls	r1, r1, #25
 8005ee0:	bf48      	it	mi
 8005ee2:	b2ad      	uxthmi	r5, r5
 8005ee4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ee6:	4853      	ldr	r0, [pc, #332]	@ (8006034 <_printf_i+0x238>)
 8005ee8:	6033      	str	r3, [r6, #0]
 8005eea:	bf14      	ite	ne
 8005eec:	230a      	movne	r3, #10
 8005eee:	2308      	moveq	r3, #8
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005ef6:	6866      	ldr	r6, [r4, #4]
 8005ef8:	60a6      	str	r6, [r4, #8]
 8005efa:	2e00      	cmp	r6, #0
 8005efc:	bfa2      	ittt	ge
 8005efe:	6821      	ldrge	r1, [r4, #0]
 8005f00:	f021 0104 	bicge.w	r1, r1, #4
 8005f04:	6021      	strge	r1, [r4, #0]
 8005f06:	b90d      	cbnz	r5, 8005f0c <_printf_i+0x110>
 8005f08:	2e00      	cmp	r6, #0
 8005f0a:	d04b      	beq.n	8005fa4 <_printf_i+0x1a8>
 8005f0c:	4616      	mov	r6, r2
 8005f0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f12:	fb03 5711 	mls	r7, r3, r1, r5
 8005f16:	5dc7      	ldrb	r7, [r0, r7]
 8005f18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f1c:	462f      	mov	r7, r5
 8005f1e:	42bb      	cmp	r3, r7
 8005f20:	460d      	mov	r5, r1
 8005f22:	d9f4      	bls.n	8005f0e <_printf_i+0x112>
 8005f24:	2b08      	cmp	r3, #8
 8005f26:	d10b      	bne.n	8005f40 <_printf_i+0x144>
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	07df      	lsls	r7, r3, #31
 8005f2c:	d508      	bpl.n	8005f40 <_printf_i+0x144>
 8005f2e:	6923      	ldr	r3, [r4, #16]
 8005f30:	6861      	ldr	r1, [r4, #4]
 8005f32:	4299      	cmp	r1, r3
 8005f34:	bfde      	ittt	le
 8005f36:	2330      	movle	r3, #48	@ 0x30
 8005f38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f40:	1b92      	subs	r2, r2, r6
 8005f42:	6122      	str	r2, [r4, #16]
 8005f44:	f8cd a000 	str.w	sl, [sp]
 8005f48:	464b      	mov	r3, r9
 8005f4a:	aa03      	add	r2, sp, #12
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	4640      	mov	r0, r8
 8005f50:	f7ff fee6 	bl	8005d20 <_printf_common>
 8005f54:	3001      	adds	r0, #1
 8005f56:	d14a      	bne.n	8005fee <_printf_i+0x1f2>
 8005f58:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5c:	b004      	add	sp, #16
 8005f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	f043 0320 	orr.w	r3, r3, #32
 8005f68:	6023      	str	r3, [r4, #0]
 8005f6a:	4833      	ldr	r0, [pc, #204]	@ (8006038 <_printf_i+0x23c>)
 8005f6c:	2778      	movs	r7, #120	@ 0x78
 8005f6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f72:	6823      	ldr	r3, [r4, #0]
 8005f74:	6831      	ldr	r1, [r6, #0]
 8005f76:	061f      	lsls	r7, r3, #24
 8005f78:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f7c:	d402      	bmi.n	8005f84 <_printf_i+0x188>
 8005f7e:	065f      	lsls	r7, r3, #25
 8005f80:	bf48      	it	mi
 8005f82:	b2ad      	uxthmi	r5, r5
 8005f84:	6031      	str	r1, [r6, #0]
 8005f86:	07d9      	lsls	r1, r3, #31
 8005f88:	bf44      	itt	mi
 8005f8a:	f043 0320 	orrmi.w	r3, r3, #32
 8005f8e:	6023      	strmi	r3, [r4, #0]
 8005f90:	b11d      	cbz	r5, 8005f9a <_printf_i+0x19e>
 8005f92:	2310      	movs	r3, #16
 8005f94:	e7ac      	b.n	8005ef0 <_printf_i+0xf4>
 8005f96:	4827      	ldr	r0, [pc, #156]	@ (8006034 <_printf_i+0x238>)
 8005f98:	e7e9      	b.n	8005f6e <_printf_i+0x172>
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	f023 0320 	bic.w	r3, r3, #32
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	e7f6      	b.n	8005f92 <_printf_i+0x196>
 8005fa4:	4616      	mov	r6, r2
 8005fa6:	e7bd      	b.n	8005f24 <_printf_i+0x128>
 8005fa8:	6833      	ldr	r3, [r6, #0]
 8005faa:	6825      	ldr	r5, [r4, #0]
 8005fac:	6961      	ldr	r1, [r4, #20]
 8005fae:	1d18      	adds	r0, r3, #4
 8005fb0:	6030      	str	r0, [r6, #0]
 8005fb2:	062e      	lsls	r6, r5, #24
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	d501      	bpl.n	8005fbc <_printf_i+0x1c0>
 8005fb8:	6019      	str	r1, [r3, #0]
 8005fba:	e002      	b.n	8005fc2 <_printf_i+0x1c6>
 8005fbc:	0668      	lsls	r0, r5, #25
 8005fbe:	d5fb      	bpl.n	8005fb8 <_printf_i+0x1bc>
 8005fc0:	8019      	strh	r1, [r3, #0]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	6123      	str	r3, [r4, #16]
 8005fc6:	4616      	mov	r6, r2
 8005fc8:	e7bc      	b.n	8005f44 <_printf_i+0x148>
 8005fca:	6833      	ldr	r3, [r6, #0]
 8005fcc:	1d1a      	adds	r2, r3, #4
 8005fce:	6032      	str	r2, [r6, #0]
 8005fd0:	681e      	ldr	r6, [r3, #0]
 8005fd2:	6862      	ldr	r2, [r4, #4]
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	4630      	mov	r0, r6
 8005fd8:	f7fa f922 	bl	8000220 <memchr>
 8005fdc:	b108      	cbz	r0, 8005fe2 <_printf_i+0x1e6>
 8005fde:	1b80      	subs	r0, r0, r6
 8005fe0:	6060      	str	r0, [r4, #4]
 8005fe2:	6863      	ldr	r3, [r4, #4]
 8005fe4:	6123      	str	r3, [r4, #16]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fec:	e7aa      	b.n	8005f44 <_printf_i+0x148>
 8005fee:	6923      	ldr	r3, [r4, #16]
 8005ff0:	4632      	mov	r2, r6
 8005ff2:	4649      	mov	r1, r9
 8005ff4:	4640      	mov	r0, r8
 8005ff6:	47d0      	blx	sl
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	d0ad      	beq.n	8005f58 <_printf_i+0x15c>
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	079b      	lsls	r3, r3, #30
 8006000:	d413      	bmi.n	800602a <_printf_i+0x22e>
 8006002:	68e0      	ldr	r0, [r4, #12]
 8006004:	9b03      	ldr	r3, [sp, #12]
 8006006:	4298      	cmp	r0, r3
 8006008:	bfb8      	it	lt
 800600a:	4618      	movlt	r0, r3
 800600c:	e7a6      	b.n	8005f5c <_printf_i+0x160>
 800600e:	2301      	movs	r3, #1
 8006010:	4632      	mov	r2, r6
 8006012:	4649      	mov	r1, r9
 8006014:	4640      	mov	r0, r8
 8006016:	47d0      	blx	sl
 8006018:	3001      	adds	r0, #1
 800601a:	d09d      	beq.n	8005f58 <_printf_i+0x15c>
 800601c:	3501      	adds	r5, #1
 800601e:	68e3      	ldr	r3, [r4, #12]
 8006020:	9903      	ldr	r1, [sp, #12]
 8006022:	1a5b      	subs	r3, r3, r1
 8006024:	42ab      	cmp	r3, r5
 8006026:	dcf2      	bgt.n	800600e <_printf_i+0x212>
 8006028:	e7eb      	b.n	8006002 <_printf_i+0x206>
 800602a:	2500      	movs	r5, #0
 800602c:	f104 0619 	add.w	r6, r4, #25
 8006030:	e7f5      	b.n	800601e <_printf_i+0x222>
 8006032:	bf00      	nop
 8006034:	080084ba 	.word	0x080084ba
 8006038:	080084cb 	.word	0x080084cb

0800603c <std>:
 800603c:	2300      	movs	r3, #0
 800603e:	b510      	push	{r4, lr}
 8006040:	4604      	mov	r4, r0
 8006042:	e9c0 3300 	strd	r3, r3, [r0]
 8006046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800604a:	6083      	str	r3, [r0, #8]
 800604c:	8181      	strh	r1, [r0, #12]
 800604e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006050:	81c2      	strh	r2, [r0, #14]
 8006052:	6183      	str	r3, [r0, #24]
 8006054:	4619      	mov	r1, r3
 8006056:	2208      	movs	r2, #8
 8006058:	305c      	adds	r0, #92	@ 0x5c
 800605a:	f000 f906 	bl	800626a <memset>
 800605e:	4b0d      	ldr	r3, [pc, #52]	@ (8006094 <std+0x58>)
 8006060:	6263      	str	r3, [r4, #36]	@ 0x24
 8006062:	4b0d      	ldr	r3, [pc, #52]	@ (8006098 <std+0x5c>)
 8006064:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006066:	4b0d      	ldr	r3, [pc, #52]	@ (800609c <std+0x60>)
 8006068:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800606a:	4b0d      	ldr	r3, [pc, #52]	@ (80060a0 <std+0x64>)
 800606c:	6323      	str	r3, [r4, #48]	@ 0x30
 800606e:	4b0d      	ldr	r3, [pc, #52]	@ (80060a4 <std+0x68>)
 8006070:	6224      	str	r4, [r4, #32]
 8006072:	429c      	cmp	r4, r3
 8006074:	d006      	beq.n	8006084 <std+0x48>
 8006076:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800607a:	4294      	cmp	r4, r2
 800607c:	d002      	beq.n	8006084 <std+0x48>
 800607e:	33d0      	adds	r3, #208	@ 0xd0
 8006080:	429c      	cmp	r4, r3
 8006082:	d105      	bne.n	8006090 <std+0x54>
 8006084:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800608c:	f000 b96a 	b.w	8006364 <__retarget_lock_init_recursive>
 8006090:	bd10      	pop	{r4, pc}
 8006092:	bf00      	nop
 8006094:	080061e5 	.word	0x080061e5
 8006098:	08006207 	.word	0x08006207
 800609c:	0800623f 	.word	0x0800623f
 80060a0:	08006263 	.word	0x08006263
 80060a4:	200008ac 	.word	0x200008ac

080060a8 <stdio_exit_handler>:
 80060a8:	4a02      	ldr	r2, [pc, #8]	@ (80060b4 <stdio_exit_handler+0xc>)
 80060aa:	4903      	ldr	r1, [pc, #12]	@ (80060b8 <stdio_exit_handler+0x10>)
 80060ac:	4803      	ldr	r0, [pc, #12]	@ (80060bc <stdio_exit_handler+0x14>)
 80060ae:	f000 b869 	b.w	8006184 <_fwalk_sglue>
 80060b2:	bf00      	nop
 80060b4:	2000000c 	.word	0x2000000c
 80060b8:	08007c99 	.word	0x08007c99
 80060bc:	2000001c 	.word	0x2000001c

080060c0 <cleanup_stdio>:
 80060c0:	6841      	ldr	r1, [r0, #4]
 80060c2:	4b0c      	ldr	r3, [pc, #48]	@ (80060f4 <cleanup_stdio+0x34>)
 80060c4:	4299      	cmp	r1, r3
 80060c6:	b510      	push	{r4, lr}
 80060c8:	4604      	mov	r4, r0
 80060ca:	d001      	beq.n	80060d0 <cleanup_stdio+0x10>
 80060cc:	f001 fde4 	bl	8007c98 <_fflush_r>
 80060d0:	68a1      	ldr	r1, [r4, #8]
 80060d2:	4b09      	ldr	r3, [pc, #36]	@ (80060f8 <cleanup_stdio+0x38>)
 80060d4:	4299      	cmp	r1, r3
 80060d6:	d002      	beq.n	80060de <cleanup_stdio+0x1e>
 80060d8:	4620      	mov	r0, r4
 80060da:	f001 fddd 	bl	8007c98 <_fflush_r>
 80060de:	68e1      	ldr	r1, [r4, #12]
 80060e0:	4b06      	ldr	r3, [pc, #24]	@ (80060fc <cleanup_stdio+0x3c>)
 80060e2:	4299      	cmp	r1, r3
 80060e4:	d004      	beq.n	80060f0 <cleanup_stdio+0x30>
 80060e6:	4620      	mov	r0, r4
 80060e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060ec:	f001 bdd4 	b.w	8007c98 <_fflush_r>
 80060f0:	bd10      	pop	{r4, pc}
 80060f2:	bf00      	nop
 80060f4:	200008ac 	.word	0x200008ac
 80060f8:	20000914 	.word	0x20000914
 80060fc:	2000097c 	.word	0x2000097c

08006100 <global_stdio_init.part.0>:
 8006100:	b510      	push	{r4, lr}
 8006102:	4b0b      	ldr	r3, [pc, #44]	@ (8006130 <global_stdio_init.part.0+0x30>)
 8006104:	4c0b      	ldr	r4, [pc, #44]	@ (8006134 <global_stdio_init.part.0+0x34>)
 8006106:	4a0c      	ldr	r2, [pc, #48]	@ (8006138 <global_stdio_init.part.0+0x38>)
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	4620      	mov	r0, r4
 800610c:	2200      	movs	r2, #0
 800610e:	2104      	movs	r1, #4
 8006110:	f7ff ff94 	bl	800603c <std>
 8006114:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006118:	2201      	movs	r2, #1
 800611a:	2109      	movs	r1, #9
 800611c:	f7ff ff8e 	bl	800603c <std>
 8006120:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006124:	2202      	movs	r2, #2
 8006126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800612a:	2112      	movs	r1, #18
 800612c:	f7ff bf86 	b.w	800603c <std>
 8006130:	200009e4 	.word	0x200009e4
 8006134:	200008ac 	.word	0x200008ac
 8006138:	080060a9 	.word	0x080060a9

0800613c <__sfp_lock_acquire>:
 800613c:	4801      	ldr	r0, [pc, #4]	@ (8006144 <__sfp_lock_acquire+0x8>)
 800613e:	f000 b912 	b.w	8006366 <__retarget_lock_acquire_recursive>
 8006142:	bf00      	nop
 8006144:	200009ed 	.word	0x200009ed

08006148 <__sfp_lock_release>:
 8006148:	4801      	ldr	r0, [pc, #4]	@ (8006150 <__sfp_lock_release+0x8>)
 800614a:	f000 b90d 	b.w	8006368 <__retarget_lock_release_recursive>
 800614e:	bf00      	nop
 8006150:	200009ed 	.word	0x200009ed

08006154 <__sinit>:
 8006154:	b510      	push	{r4, lr}
 8006156:	4604      	mov	r4, r0
 8006158:	f7ff fff0 	bl	800613c <__sfp_lock_acquire>
 800615c:	6a23      	ldr	r3, [r4, #32]
 800615e:	b11b      	cbz	r3, 8006168 <__sinit+0x14>
 8006160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006164:	f7ff bff0 	b.w	8006148 <__sfp_lock_release>
 8006168:	4b04      	ldr	r3, [pc, #16]	@ (800617c <__sinit+0x28>)
 800616a:	6223      	str	r3, [r4, #32]
 800616c:	4b04      	ldr	r3, [pc, #16]	@ (8006180 <__sinit+0x2c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1f5      	bne.n	8006160 <__sinit+0xc>
 8006174:	f7ff ffc4 	bl	8006100 <global_stdio_init.part.0>
 8006178:	e7f2      	b.n	8006160 <__sinit+0xc>
 800617a:	bf00      	nop
 800617c:	080060c1 	.word	0x080060c1
 8006180:	200009e4 	.word	0x200009e4

08006184 <_fwalk_sglue>:
 8006184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006188:	4607      	mov	r7, r0
 800618a:	4688      	mov	r8, r1
 800618c:	4614      	mov	r4, r2
 800618e:	2600      	movs	r6, #0
 8006190:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006194:	f1b9 0901 	subs.w	r9, r9, #1
 8006198:	d505      	bpl.n	80061a6 <_fwalk_sglue+0x22>
 800619a:	6824      	ldr	r4, [r4, #0]
 800619c:	2c00      	cmp	r4, #0
 800619e:	d1f7      	bne.n	8006190 <_fwalk_sglue+0xc>
 80061a0:	4630      	mov	r0, r6
 80061a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061a6:	89ab      	ldrh	r3, [r5, #12]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d907      	bls.n	80061bc <_fwalk_sglue+0x38>
 80061ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80061b0:	3301      	adds	r3, #1
 80061b2:	d003      	beq.n	80061bc <_fwalk_sglue+0x38>
 80061b4:	4629      	mov	r1, r5
 80061b6:	4638      	mov	r0, r7
 80061b8:	47c0      	blx	r8
 80061ba:	4306      	orrs	r6, r0
 80061bc:	3568      	adds	r5, #104	@ 0x68
 80061be:	e7e9      	b.n	8006194 <_fwalk_sglue+0x10>

080061c0 <iprintf>:
 80061c0:	b40f      	push	{r0, r1, r2, r3}
 80061c2:	b507      	push	{r0, r1, r2, lr}
 80061c4:	4906      	ldr	r1, [pc, #24]	@ (80061e0 <iprintf+0x20>)
 80061c6:	ab04      	add	r3, sp, #16
 80061c8:	6808      	ldr	r0, [r1, #0]
 80061ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ce:	6881      	ldr	r1, [r0, #8]
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	f001 fbc5 	bl	8007960 <_vfiprintf_r>
 80061d6:	b003      	add	sp, #12
 80061d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061dc:	b004      	add	sp, #16
 80061de:	4770      	bx	lr
 80061e0:	20000018 	.word	0x20000018

080061e4 <__sread>:
 80061e4:	b510      	push	{r4, lr}
 80061e6:	460c      	mov	r4, r1
 80061e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ec:	f000 f86c 	bl	80062c8 <_read_r>
 80061f0:	2800      	cmp	r0, #0
 80061f2:	bfab      	itete	ge
 80061f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80061f6:	89a3      	ldrhlt	r3, [r4, #12]
 80061f8:	181b      	addge	r3, r3, r0
 80061fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061fe:	bfac      	ite	ge
 8006200:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006202:	81a3      	strhlt	r3, [r4, #12]
 8006204:	bd10      	pop	{r4, pc}

08006206 <__swrite>:
 8006206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800620a:	461f      	mov	r7, r3
 800620c:	898b      	ldrh	r3, [r1, #12]
 800620e:	05db      	lsls	r3, r3, #23
 8006210:	4605      	mov	r5, r0
 8006212:	460c      	mov	r4, r1
 8006214:	4616      	mov	r6, r2
 8006216:	d505      	bpl.n	8006224 <__swrite+0x1e>
 8006218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800621c:	2302      	movs	r3, #2
 800621e:	2200      	movs	r2, #0
 8006220:	f000 f840 	bl	80062a4 <_lseek_r>
 8006224:	89a3      	ldrh	r3, [r4, #12]
 8006226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800622a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800622e:	81a3      	strh	r3, [r4, #12]
 8006230:	4632      	mov	r2, r6
 8006232:	463b      	mov	r3, r7
 8006234:	4628      	mov	r0, r5
 8006236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800623a:	f000 b857 	b.w	80062ec <_write_r>

0800623e <__sseek>:
 800623e:	b510      	push	{r4, lr}
 8006240:	460c      	mov	r4, r1
 8006242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006246:	f000 f82d 	bl	80062a4 <_lseek_r>
 800624a:	1c43      	adds	r3, r0, #1
 800624c:	89a3      	ldrh	r3, [r4, #12]
 800624e:	bf15      	itete	ne
 8006250:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006252:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006256:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800625a:	81a3      	strheq	r3, [r4, #12]
 800625c:	bf18      	it	ne
 800625e:	81a3      	strhne	r3, [r4, #12]
 8006260:	bd10      	pop	{r4, pc}

08006262 <__sclose>:
 8006262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006266:	f000 b80d 	b.w	8006284 <_close_r>

0800626a <memset>:
 800626a:	4402      	add	r2, r0
 800626c:	4603      	mov	r3, r0
 800626e:	4293      	cmp	r3, r2
 8006270:	d100      	bne.n	8006274 <memset+0xa>
 8006272:	4770      	bx	lr
 8006274:	f803 1b01 	strb.w	r1, [r3], #1
 8006278:	e7f9      	b.n	800626e <memset+0x4>
	...

0800627c <_localeconv_r>:
 800627c:	4800      	ldr	r0, [pc, #0]	@ (8006280 <_localeconv_r+0x4>)
 800627e:	4770      	bx	lr
 8006280:	20000158 	.word	0x20000158

08006284 <_close_r>:
 8006284:	b538      	push	{r3, r4, r5, lr}
 8006286:	4d06      	ldr	r5, [pc, #24]	@ (80062a0 <_close_r+0x1c>)
 8006288:	2300      	movs	r3, #0
 800628a:	4604      	mov	r4, r0
 800628c:	4608      	mov	r0, r1
 800628e:	602b      	str	r3, [r5, #0]
 8006290:	f7fb fd19 	bl	8001cc6 <_close>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d102      	bne.n	800629e <_close_r+0x1a>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	b103      	cbz	r3, 800629e <_close_r+0x1a>
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	bd38      	pop	{r3, r4, r5, pc}
 80062a0:	200009e8 	.word	0x200009e8

080062a4 <_lseek_r>:
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	4d07      	ldr	r5, [pc, #28]	@ (80062c4 <_lseek_r+0x20>)
 80062a8:	4604      	mov	r4, r0
 80062aa:	4608      	mov	r0, r1
 80062ac:	4611      	mov	r1, r2
 80062ae:	2200      	movs	r2, #0
 80062b0:	602a      	str	r2, [r5, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	f7fb fd2e 	bl	8001d14 <_lseek>
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	d102      	bne.n	80062c2 <_lseek_r+0x1e>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	b103      	cbz	r3, 80062c2 <_lseek_r+0x1e>
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	200009e8 	.word	0x200009e8

080062c8 <_read_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	4d07      	ldr	r5, [pc, #28]	@ (80062e8 <_read_r+0x20>)
 80062cc:	4604      	mov	r4, r0
 80062ce:	4608      	mov	r0, r1
 80062d0:	4611      	mov	r1, r2
 80062d2:	2200      	movs	r2, #0
 80062d4:	602a      	str	r2, [r5, #0]
 80062d6:	461a      	mov	r2, r3
 80062d8:	f7fb fcbc 	bl	8001c54 <_read>
 80062dc:	1c43      	adds	r3, r0, #1
 80062de:	d102      	bne.n	80062e6 <_read_r+0x1e>
 80062e0:	682b      	ldr	r3, [r5, #0]
 80062e2:	b103      	cbz	r3, 80062e6 <_read_r+0x1e>
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	bd38      	pop	{r3, r4, r5, pc}
 80062e8:	200009e8 	.word	0x200009e8

080062ec <_write_r>:
 80062ec:	b538      	push	{r3, r4, r5, lr}
 80062ee:	4d07      	ldr	r5, [pc, #28]	@ (800630c <_write_r+0x20>)
 80062f0:	4604      	mov	r4, r0
 80062f2:	4608      	mov	r0, r1
 80062f4:	4611      	mov	r1, r2
 80062f6:	2200      	movs	r2, #0
 80062f8:	602a      	str	r2, [r5, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	f7fb fcc7 	bl	8001c8e <_write>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d102      	bne.n	800630a <_write_r+0x1e>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	b103      	cbz	r3, 800630a <_write_r+0x1e>
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	bd38      	pop	{r3, r4, r5, pc}
 800630c:	200009e8 	.word	0x200009e8

08006310 <__errno>:
 8006310:	4b01      	ldr	r3, [pc, #4]	@ (8006318 <__errno+0x8>)
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	20000018 	.word	0x20000018

0800631c <__libc_init_array>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	4d0d      	ldr	r5, [pc, #52]	@ (8006354 <__libc_init_array+0x38>)
 8006320:	4c0d      	ldr	r4, [pc, #52]	@ (8006358 <__libc_init_array+0x3c>)
 8006322:	1b64      	subs	r4, r4, r5
 8006324:	10a4      	asrs	r4, r4, #2
 8006326:	2600      	movs	r6, #0
 8006328:	42a6      	cmp	r6, r4
 800632a:	d109      	bne.n	8006340 <__libc_init_array+0x24>
 800632c:	4d0b      	ldr	r5, [pc, #44]	@ (800635c <__libc_init_array+0x40>)
 800632e:	4c0c      	ldr	r4, [pc, #48]	@ (8006360 <__libc_init_array+0x44>)
 8006330:	f001 fec0 	bl	80080b4 <_init>
 8006334:	1b64      	subs	r4, r4, r5
 8006336:	10a4      	asrs	r4, r4, #2
 8006338:	2600      	movs	r6, #0
 800633a:	42a6      	cmp	r6, r4
 800633c:	d105      	bne.n	800634a <__libc_init_array+0x2e>
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	f855 3b04 	ldr.w	r3, [r5], #4
 8006344:	4798      	blx	r3
 8006346:	3601      	adds	r6, #1
 8006348:	e7ee      	b.n	8006328 <__libc_init_array+0xc>
 800634a:	f855 3b04 	ldr.w	r3, [r5], #4
 800634e:	4798      	blx	r3
 8006350:	3601      	adds	r6, #1
 8006352:	e7f2      	b.n	800633a <__libc_init_array+0x1e>
 8006354:	08008820 	.word	0x08008820
 8006358:	08008820 	.word	0x08008820
 800635c:	08008820 	.word	0x08008820
 8006360:	08008824 	.word	0x08008824

08006364 <__retarget_lock_init_recursive>:
 8006364:	4770      	bx	lr

08006366 <__retarget_lock_acquire_recursive>:
 8006366:	4770      	bx	lr

08006368 <__retarget_lock_release_recursive>:
 8006368:	4770      	bx	lr

0800636a <quorem>:
 800636a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636e:	6903      	ldr	r3, [r0, #16]
 8006370:	690c      	ldr	r4, [r1, #16]
 8006372:	42a3      	cmp	r3, r4
 8006374:	4607      	mov	r7, r0
 8006376:	db7e      	blt.n	8006476 <quorem+0x10c>
 8006378:	3c01      	subs	r4, #1
 800637a:	f101 0814 	add.w	r8, r1, #20
 800637e:	00a3      	lsls	r3, r4, #2
 8006380:	f100 0514 	add.w	r5, r0, #20
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800638a:	9301      	str	r3, [sp, #4]
 800638c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006390:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006394:	3301      	adds	r3, #1
 8006396:	429a      	cmp	r2, r3
 8006398:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800639c:	fbb2 f6f3 	udiv	r6, r2, r3
 80063a0:	d32e      	bcc.n	8006400 <quorem+0x96>
 80063a2:	f04f 0a00 	mov.w	sl, #0
 80063a6:	46c4      	mov	ip, r8
 80063a8:	46ae      	mov	lr, r5
 80063aa:	46d3      	mov	fp, sl
 80063ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063b0:	b298      	uxth	r0, r3
 80063b2:	fb06 a000 	mla	r0, r6, r0, sl
 80063b6:	0c02      	lsrs	r2, r0, #16
 80063b8:	0c1b      	lsrs	r3, r3, #16
 80063ba:	fb06 2303 	mla	r3, r6, r3, r2
 80063be:	f8de 2000 	ldr.w	r2, [lr]
 80063c2:	b280      	uxth	r0, r0
 80063c4:	b292      	uxth	r2, r2
 80063c6:	1a12      	subs	r2, r2, r0
 80063c8:	445a      	add	r2, fp
 80063ca:	f8de 0000 	ldr.w	r0, [lr]
 80063ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80063d8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80063dc:	b292      	uxth	r2, r2
 80063de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80063e2:	45e1      	cmp	r9, ip
 80063e4:	f84e 2b04 	str.w	r2, [lr], #4
 80063e8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80063ec:	d2de      	bcs.n	80063ac <quorem+0x42>
 80063ee:	9b00      	ldr	r3, [sp, #0]
 80063f0:	58eb      	ldr	r3, [r5, r3]
 80063f2:	b92b      	cbnz	r3, 8006400 <quorem+0x96>
 80063f4:	9b01      	ldr	r3, [sp, #4]
 80063f6:	3b04      	subs	r3, #4
 80063f8:	429d      	cmp	r5, r3
 80063fa:	461a      	mov	r2, r3
 80063fc:	d32f      	bcc.n	800645e <quorem+0xf4>
 80063fe:	613c      	str	r4, [r7, #16]
 8006400:	4638      	mov	r0, r7
 8006402:	f001 f97b 	bl	80076fc <__mcmp>
 8006406:	2800      	cmp	r0, #0
 8006408:	db25      	blt.n	8006456 <quorem+0xec>
 800640a:	4629      	mov	r1, r5
 800640c:	2000      	movs	r0, #0
 800640e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006412:	f8d1 c000 	ldr.w	ip, [r1]
 8006416:	fa1f fe82 	uxth.w	lr, r2
 800641a:	fa1f f38c 	uxth.w	r3, ip
 800641e:	eba3 030e 	sub.w	r3, r3, lr
 8006422:	4403      	add	r3, r0
 8006424:	0c12      	lsrs	r2, r2, #16
 8006426:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800642a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800642e:	b29b      	uxth	r3, r3
 8006430:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006434:	45c1      	cmp	r9, r8
 8006436:	f841 3b04 	str.w	r3, [r1], #4
 800643a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800643e:	d2e6      	bcs.n	800640e <quorem+0xa4>
 8006440:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006444:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006448:	b922      	cbnz	r2, 8006454 <quorem+0xea>
 800644a:	3b04      	subs	r3, #4
 800644c:	429d      	cmp	r5, r3
 800644e:	461a      	mov	r2, r3
 8006450:	d30b      	bcc.n	800646a <quorem+0x100>
 8006452:	613c      	str	r4, [r7, #16]
 8006454:	3601      	adds	r6, #1
 8006456:	4630      	mov	r0, r6
 8006458:	b003      	add	sp, #12
 800645a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800645e:	6812      	ldr	r2, [r2, #0]
 8006460:	3b04      	subs	r3, #4
 8006462:	2a00      	cmp	r2, #0
 8006464:	d1cb      	bne.n	80063fe <quorem+0x94>
 8006466:	3c01      	subs	r4, #1
 8006468:	e7c6      	b.n	80063f8 <quorem+0x8e>
 800646a:	6812      	ldr	r2, [r2, #0]
 800646c:	3b04      	subs	r3, #4
 800646e:	2a00      	cmp	r2, #0
 8006470:	d1ef      	bne.n	8006452 <quorem+0xe8>
 8006472:	3c01      	subs	r4, #1
 8006474:	e7ea      	b.n	800644c <quorem+0xe2>
 8006476:	2000      	movs	r0, #0
 8006478:	e7ee      	b.n	8006458 <quorem+0xee>
 800647a:	0000      	movs	r0, r0
 800647c:	0000      	movs	r0, r0
	...

08006480 <_dtoa_r>:
 8006480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006484:	69c7      	ldr	r7, [r0, #28]
 8006486:	b099      	sub	sp, #100	@ 0x64
 8006488:	ed8d 0b02 	vstr	d0, [sp, #8]
 800648c:	ec55 4b10 	vmov	r4, r5, d0
 8006490:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006492:	9109      	str	r1, [sp, #36]	@ 0x24
 8006494:	4683      	mov	fp, r0
 8006496:	920e      	str	r2, [sp, #56]	@ 0x38
 8006498:	9313      	str	r3, [sp, #76]	@ 0x4c
 800649a:	b97f      	cbnz	r7, 80064bc <_dtoa_r+0x3c>
 800649c:	2010      	movs	r0, #16
 800649e:	f000 fdfd 	bl	800709c <malloc>
 80064a2:	4602      	mov	r2, r0
 80064a4:	f8cb 001c 	str.w	r0, [fp, #28]
 80064a8:	b920      	cbnz	r0, 80064b4 <_dtoa_r+0x34>
 80064aa:	4ba7      	ldr	r3, [pc, #668]	@ (8006748 <_dtoa_r+0x2c8>)
 80064ac:	21ef      	movs	r1, #239	@ 0xef
 80064ae:	48a7      	ldr	r0, [pc, #668]	@ (800674c <_dtoa_r+0x2cc>)
 80064b0:	f001 fccc 	bl	8007e4c <__assert_func>
 80064b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80064b8:	6007      	str	r7, [r0, #0]
 80064ba:	60c7      	str	r7, [r0, #12]
 80064bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064c0:	6819      	ldr	r1, [r3, #0]
 80064c2:	b159      	cbz	r1, 80064dc <_dtoa_r+0x5c>
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	604a      	str	r2, [r1, #4]
 80064c8:	2301      	movs	r3, #1
 80064ca:	4093      	lsls	r3, r2
 80064cc:	608b      	str	r3, [r1, #8]
 80064ce:	4658      	mov	r0, fp
 80064d0:	f000 feda 	bl	8007288 <_Bfree>
 80064d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80064d8:	2200      	movs	r2, #0
 80064da:	601a      	str	r2, [r3, #0]
 80064dc:	1e2b      	subs	r3, r5, #0
 80064de:	bfb9      	ittee	lt
 80064e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80064e4:	9303      	strlt	r3, [sp, #12]
 80064e6:	2300      	movge	r3, #0
 80064e8:	6033      	strge	r3, [r6, #0]
 80064ea:	9f03      	ldr	r7, [sp, #12]
 80064ec:	4b98      	ldr	r3, [pc, #608]	@ (8006750 <_dtoa_r+0x2d0>)
 80064ee:	bfbc      	itt	lt
 80064f0:	2201      	movlt	r2, #1
 80064f2:	6032      	strlt	r2, [r6, #0]
 80064f4:	43bb      	bics	r3, r7
 80064f6:	d112      	bne.n	800651e <_dtoa_r+0x9e>
 80064f8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80064fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006504:	4323      	orrs	r3, r4
 8006506:	f000 854d 	beq.w	8006fa4 <_dtoa_r+0xb24>
 800650a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800650c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006764 <_dtoa_r+0x2e4>
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 854f 	beq.w	8006fb4 <_dtoa_r+0xb34>
 8006516:	f10a 0303 	add.w	r3, sl, #3
 800651a:	f000 bd49 	b.w	8006fb0 <_dtoa_r+0xb30>
 800651e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006522:	2200      	movs	r2, #0
 8006524:	ec51 0b17 	vmov	r0, r1, d7
 8006528:	2300      	movs	r3, #0
 800652a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800652e:	f7fa faf3 	bl	8000b18 <__aeabi_dcmpeq>
 8006532:	4680      	mov	r8, r0
 8006534:	b158      	cbz	r0, 800654e <_dtoa_r+0xce>
 8006536:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006538:	2301      	movs	r3, #1
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800653e:	b113      	cbz	r3, 8006546 <_dtoa_r+0xc6>
 8006540:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006542:	4b84      	ldr	r3, [pc, #528]	@ (8006754 <_dtoa_r+0x2d4>)
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006768 <_dtoa_r+0x2e8>
 800654a:	f000 bd33 	b.w	8006fb4 <_dtoa_r+0xb34>
 800654e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006552:	aa16      	add	r2, sp, #88	@ 0x58
 8006554:	a917      	add	r1, sp, #92	@ 0x5c
 8006556:	4658      	mov	r0, fp
 8006558:	f001 f980 	bl	800785c <__d2b>
 800655c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006560:	4681      	mov	r9, r0
 8006562:	2e00      	cmp	r6, #0
 8006564:	d077      	beq.n	8006656 <_dtoa_r+0x1d6>
 8006566:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006568:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800656c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006570:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006574:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006578:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800657c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006580:	4619      	mov	r1, r3
 8006582:	2200      	movs	r2, #0
 8006584:	4b74      	ldr	r3, [pc, #464]	@ (8006758 <_dtoa_r+0x2d8>)
 8006586:	f7f9 fea7 	bl	80002d8 <__aeabi_dsub>
 800658a:	a369      	add	r3, pc, #420	@ (adr r3, 8006730 <_dtoa_r+0x2b0>)
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	f7fa f85a 	bl	8000648 <__aeabi_dmul>
 8006594:	a368      	add	r3, pc, #416	@ (adr r3, 8006738 <_dtoa_r+0x2b8>)
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f7f9 fe9f 	bl	80002dc <__adddf3>
 800659e:	4604      	mov	r4, r0
 80065a0:	4630      	mov	r0, r6
 80065a2:	460d      	mov	r5, r1
 80065a4:	f7f9 ffe6 	bl	8000574 <__aeabi_i2d>
 80065a8:	a365      	add	r3, pc, #404	@ (adr r3, 8006740 <_dtoa_r+0x2c0>)
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	f7fa f84b 	bl	8000648 <__aeabi_dmul>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4620      	mov	r0, r4
 80065b8:	4629      	mov	r1, r5
 80065ba:	f7f9 fe8f 	bl	80002dc <__adddf3>
 80065be:	4604      	mov	r4, r0
 80065c0:	460d      	mov	r5, r1
 80065c2:	f7fa faf1 	bl	8000ba8 <__aeabi_d2iz>
 80065c6:	2200      	movs	r2, #0
 80065c8:	4607      	mov	r7, r0
 80065ca:	2300      	movs	r3, #0
 80065cc:	4620      	mov	r0, r4
 80065ce:	4629      	mov	r1, r5
 80065d0:	f7fa faac 	bl	8000b2c <__aeabi_dcmplt>
 80065d4:	b140      	cbz	r0, 80065e8 <_dtoa_r+0x168>
 80065d6:	4638      	mov	r0, r7
 80065d8:	f7f9 ffcc 	bl	8000574 <__aeabi_i2d>
 80065dc:	4622      	mov	r2, r4
 80065de:	462b      	mov	r3, r5
 80065e0:	f7fa fa9a 	bl	8000b18 <__aeabi_dcmpeq>
 80065e4:	b900      	cbnz	r0, 80065e8 <_dtoa_r+0x168>
 80065e6:	3f01      	subs	r7, #1
 80065e8:	2f16      	cmp	r7, #22
 80065ea:	d851      	bhi.n	8006690 <_dtoa_r+0x210>
 80065ec:	4b5b      	ldr	r3, [pc, #364]	@ (800675c <_dtoa_r+0x2dc>)
 80065ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065fa:	f7fa fa97 	bl	8000b2c <__aeabi_dcmplt>
 80065fe:	2800      	cmp	r0, #0
 8006600:	d048      	beq.n	8006694 <_dtoa_r+0x214>
 8006602:	3f01      	subs	r7, #1
 8006604:	2300      	movs	r3, #0
 8006606:	9312      	str	r3, [sp, #72]	@ 0x48
 8006608:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800660a:	1b9b      	subs	r3, r3, r6
 800660c:	1e5a      	subs	r2, r3, #1
 800660e:	bf44      	itt	mi
 8006610:	f1c3 0801 	rsbmi	r8, r3, #1
 8006614:	2300      	movmi	r3, #0
 8006616:	9208      	str	r2, [sp, #32]
 8006618:	bf54      	ite	pl
 800661a:	f04f 0800 	movpl.w	r8, #0
 800661e:	9308      	strmi	r3, [sp, #32]
 8006620:	2f00      	cmp	r7, #0
 8006622:	db39      	blt.n	8006698 <_dtoa_r+0x218>
 8006624:	9b08      	ldr	r3, [sp, #32]
 8006626:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006628:	443b      	add	r3, r7
 800662a:	9308      	str	r3, [sp, #32]
 800662c:	2300      	movs	r3, #0
 800662e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006632:	2b09      	cmp	r3, #9
 8006634:	d864      	bhi.n	8006700 <_dtoa_r+0x280>
 8006636:	2b05      	cmp	r3, #5
 8006638:	bfc4      	itt	gt
 800663a:	3b04      	subgt	r3, #4
 800663c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800663e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006640:	f1a3 0302 	sub.w	r3, r3, #2
 8006644:	bfcc      	ite	gt
 8006646:	2400      	movgt	r4, #0
 8006648:	2401      	movle	r4, #1
 800664a:	2b03      	cmp	r3, #3
 800664c:	d863      	bhi.n	8006716 <_dtoa_r+0x296>
 800664e:	e8df f003 	tbb	[pc, r3]
 8006652:	372a      	.short	0x372a
 8006654:	5535      	.short	0x5535
 8006656:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800665a:	441e      	add	r6, r3
 800665c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006660:	2b20      	cmp	r3, #32
 8006662:	bfc1      	itttt	gt
 8006664:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006668:	409f      	lslgt	r7, r3
 800666a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800666e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006672:	bfd6      	itet	le
 8006674:	f1c3 0320 	rsble	r3, r3, #32
 8006678:	ea47 0003 	orrgt.w	r0, r7, r3
 800667c:	fa04 f003 	lslle.w	r0, r4, r3
 8006680:	f7f9 ff68 	bl	8000554 <__aeabi_ui2d>
 8006684:	2201      	movs	r2, #1
 8006686:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800668a:	3e01      	subs	r6, #1
 800668c:	9214      	str	r2, [sp, #80]	@ 0x50
 800668e:	e777      	b.n	8006580 <_dtoa_r+0x100>
 8006690:	2301      	movs	r3, #1
 8006692:	e7b8      	b.n	8006606 <_dtoa_r+0x186>
 8006694:	9012      	str	r0, [sp, #72]	@ 0x48
 8006696:	e7b7      	b.n	8006608 <_dtoa_r+0x188>
 8006698:	427b      	negs	r3, r7
 800669a:	930a      	str	r3, [sp, #40]	@ 0x28
 800669c:	2300      	movs	r3, #0
 800669e:	eba8 0807 	sub.w	r8, r8, r7
 80066a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80066a4:	e7c4      	b.n	8006630 <_dtoa_r+0x1b0>
 80066a6:	2300      	movs	r3, #0
 80066a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	dc35      	bgt.n	800671c <_dtoa_r+0x29c>
 80066b0:	2301      	movs	r3, #1
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	9307      	str	r3, [sp, #28]
 80066b6:	461a      	mov	r2, r3
 80066b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80066ba:	e00b      	b.n	80066d4 <_dtoa_r+0x254>
 80066bc:	2301      	movs	r3, #1
 80066be:	e7f3      	b.n	80066a8 <_dtoa_r+0x228>
 80066c0:	2300      	movs	r3, #0
 80066c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066c6:	18fb      	adds	r3, r7, r3
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	3301      	adds	r3, #1
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	9307      	str	r3, [sp, #28]
 80066d0:	bfb8      	it	lt
 80066d2:	2301      	movlt	r3, #1
 80066d4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80066d8:	2100      	movs	r1, #0
 80066da:	2204      	movs	r2, #4
 80066dc:	f102 0514 	add.w	r5, r2, #20
 80066e0:	429d      	cmp	r5, r3
 80066e2:	d91f      	bls.n	8006724 <_dtoa_r+0x2a4>
 80066e4:	6041      	str	r1, [r0, #4]
 80066e6:	4658      	mov	r0, fp
 80066e8:	f000 fd8e 	bl	8007208 <_Balloc>
 80066ec:	4682      	mov	sl, r0
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d13c      	bne.n	800676c <_dtoa_r+0x2ec>
 80066f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006760 <_dtoa_r+0x2e0>)
 80066f4:	4602      	mov	r2, r0
 80066f6:	f240 11af 	movw	r1, #431	@ 0x1af
 80066fa:	e6d8      	b.n	80064ae <_dtoa_r+0x2e>
 80066fc:	2301      	movs	r3, #1
 80066fe:	e7e0      	b.n	80066c2 <_dtoa_r+0x242>
 8006700:	2401      	movs	r4, #1
 8006702:	2300      	movs	r3, #0
 8006704:	9309      	str	r3, [sp, #36]	@ 0x24
 8006706:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006708:	f04f 33ff 	mov.w	r3, #4294967295
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	9307      	str	r3, [sp, #28]
 8006710:	2200      	movs	r2, #0
 8006712:	2312      	movs	r3, #18
 8006714:	e7d0      	b.n	80066b8 <_dtoa_r+0x238>
 8006716:	2301      	movs	r3, #1
 8006718:	930b      	str	r3, [sp, #44]	@ 0x2c
 800671a:	e7f5      	b.n	8006708 <_dtoa_r+0x288>
 800671c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	9307      	str	r3, [sp, #28]
 8006722:	e7d7      	b.n	80066d4 <_dtoa_r+0x254>
 8006724:	3101      	adds	r1, #1
 8006726:	0052      	lsls	r2, r2, #1
 8006728:	e7d8      	b.n	80066dc <_dtoa_r+0x25c>
 800672a:	bf00      	nop
 800672c:	f3af 8000 	nop.w
 8006730:	636f4361 	.word	0x636f4361
 8006734:	3fd287a7 	.word	0x3fd287a7
 8006738:	8b60c8b3 	.word	0x8b60c8b3
 800673c:	3fc68a28 	.word	0x3fc68a28
 8006740:	509f79fb 	.word	0x509f79fb
 8006744:	3fd34413 	.word	0x3fd34413
 8006748:	080084e9 	.word	0x080084e9
 800674c:	08008500 	.word	0x08008500
 8006750:	7ff00000 	.word	0x7ff00000
 8006754:	080084b9 	.word	0x080084b9
 8006758:	3ff80000 	.word	0x3ff80000
 800675c:	080085f8 	.word	0x080085f8
 8006760:	08008558 	.word	0x08008558
 8006764:	080084e5 	.word	0x080084e5
 8006768:	080084b8 	.word	0x080084b8
 800676c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006770:	6018      	str	r0, [r3, #0]
 8006772:	9b07      	ldr	r3, [sp, #28]
 8006774:	2b0e      	cmp	r3, #14
 8006776:	f200 80a4 	bhi.w	80068c2 <_dtoa_r+0x442>
 800677a:	2c00      	cmp	r4, #0
 800677c:	f000 80a1 	beq.w	80068c2 <_dtoa_r+0x442>
 8006780:	2f00      	cmp	r7, #0
 8006782:	dd33      	ble.n	80067ec <_dtoa_r+0x36c>
 8006784:	4bad      	ldr	r3, [pc, #692]	@ (8006a3c <_dtoa_r+0x5bc>)
 8006786:	f007 020f 	and.w	r2, r7, #15
 800678a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800678e:	ed93 7b00 	vldr	d7, [r3]
 8006792:	05f8      	lsls	r0, r7, #23
 8006794:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006798:	ea4f 1427 	mov.w	r4, r7, asr #4
 800679c:	d516      	bpl.n	80067cc <_dtoa_r+0x34c>
 800679e:	4ba8      	ldr	r3, [pc, #672]	@ (8006a40 <_dtoa_r+0x5c0>)
 80067a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067a8:	f7fa f878 	bl	800089c <__aeabi_ddiv>
 80067ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067b0:	f004 040f 	and.w	r4, r4, #15
 80067b4:	2603      	movs	r6, #3
 80067b6:	4da2      	ldr	r5, [pc, #648]	@ (8006a40 <_dtoa_r+0x5c0>)
 80067b8:	b954      	cbnz	r4, 80067d0 <_dtoa_r+0x350>
 80067ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c2:	f7fa f86b 	bl	800089c <__aeabi_ddiv>
 80067c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067ca:	e028      	b.n	800681e <_dtoa_r+0x39e>
 80067cc:	2602      	movs	r6, #2
 80067ce:	e7f2      	b.n	80067b6 <_dtoa_r+0x336>
 80067d0:	07e1      	lsls	r1, r4, #31
 80067d2:	d508      	bpl.n	80067e6 <_dtoa_r+0x366>
 80067d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80067dc:	f7f9 ff34 	bl	8000648 <__aeabi_dmul>
 80067e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067e4:	3601      	adds	r6, #1
 80067e6:	1064      	asrs	r4, r4, #1
 80067e8:	3508      	adds	r5, #8
 80067ea:	e7e5      	b.n	80067b8 <_dtoa_r+0x338>
 80067ec:	f000 80d2 	beq.w	8006994 <_dtoa_r+0x514>
 80067f0:	427c      	negs	r4, r7
 80067f2:	4b92      	ldr	r3, [pc, #584]	@ (8006a3c <_dtoa_r+0x5bc>)
 80067f4:	4d92      	ldr	r5, [pc, #584]	@ (8006a40 <_dtoa_r+0x5c0>)
 80067f6:	f004 020f 	and.w	r2, r4, #15
 80067fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006802:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006806:	f7f9 ff1f 	bl	8000648 <__aeabi_dmul>
 800680a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800680e:	1124      	asrs	r4, r4, #4
 8006810:	2300      	movs	r3, #0
 8006812:	2602      	movs	r6, #2
 8006814:	2c00      	cmp	r4, #0
 8006816:	f040 80b2 	bne.w	800697e <_dtoa_r+0x4fe>
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1d3      	bne.n	80067c6 <_dtoa_r+0x346>
 800681e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006820:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 80b7 	beq.w	8006998 <_dtoa_r+0x518>
 800682a:	4b86      	ldr	r3, [pc, #536]	@ (8006a44 <_dtoa_r+0x5c4>)
 800682c:	2200      	movs	r2, #0
 800682e:	4620      	mov	r0, r4
 8006830:	4629      	mov	r1, r5
 8006832:	f7fa f97b 	bl	8000b2c <__aeabi_dcmplt>
 8006836:	2800      	cmp	r0, #0
 8006838:	f000 80ae 	beq.w	8006998 <_dtoa_r+0x518>
 800683c:	9b07      	ldr	r3, [sp, #28]
 800683e:	2b00      	cmp	r3, #0
 8006840:	f000 80aa 	beq.w	8006998 <_dtoa_r+0x518>
 8006844:	9b00      	ldr	r3, [sp, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	dd37      	ble.n	80068ba <_dtoa_r+0x43a>
 800684a:	1e7b      	subs	r3, r7, #1
 800684c:	9304      	str	r3, [sp, #16]
 800684e:	4620      	mov	r0, r4
 8006850:	4b7d      	ldr	r3, [pc, #500]	@ (8006a48 <_dtoa_r+0x5c8>)
 8006852:	2200      	movs	r2, #0
 8006854:	4629      	mov	r1, r5
 8006856:	f7f9 fef7 	bl	8000648 <__aeabi_dmul>
 800685a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800685e:	9c00      	ldr	r4, [sp, #0]
 8006860:	3601      	adds	r6, #1
 8006862:	4630      	mov	r0, r6
 8006864:	f7f9 fe86 	bl	8000574 <__aeabi_i2d>
 8006868:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800686c:	f7f9 feec 	bl	8000648 <__aeabi_dmul>
 8006870:	4b76      	ldr	r3, [pc, #472]	@ (8006a4c <_dtoa_r+0x5cc>)
 8006872:	2200      	movs	r2, #0
 8006874:	f7f9 fd32 	bl	80002dc <__adddf3>
 8006878:	4605      	mov	r5, r0
 800687a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800687e:	2c00      	cmp	r4, #0
 8006880:	f040 808d 	bne.w	800699e <_dtoa_r+0x51e>
 8006884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006888:	4b71      	ldr	r3, [pc, #452]	@ (8006a50 <_dtoa_r+0x5d0>)
 800688a:	2200      	movs	r2, #0
 800688c:	f7f9 fd24 	bl	80002d8 <__aeabi_dsub>
 8006890:	4602      	mov	r2, r0
 8006892:	460b      	mov	r3, r1
 8006894:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006898:	462a      	mov	r2, r5
 800689a:	4633      	mov	r3, r6
 800689c:	f7fa f964 	bl	8000b68 <__aeabi_dcmpgt>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	f040 828b 	bne.w	8006dbc <_dtoa_r+0x93c>
 80068a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068aa:	462a      	mov	r2, r5
 80068ac:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80068b0:	f7fa f93c 	bl	8000b2c <__aeabi_dcmplt>
 80068b4:	2800      	cmp	r0, #0
 80068b6:	f040 8128 	bne.w	8006b0a <_dtoa_r+0x68a>
 80068ba:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80068be:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80068c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f2c0 815a 	blt.w	8006b7e <_dtoa_r+0x6fe>
 80068ca:	2f0e      	cmp	r7, #14
 80068cc:	f300 8157 	bgt.w	8006b7e <_dtoa_r+0x6fe>
 80068d0:	4b5a      	ldr	r3, [pc, #360]	@ (8006a3c <_dtoa_r+0x5bc>)
 80068d2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80068d6:	ed93 7b00 	vldr	d7, [r3]
 80068da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068dc:	2b00      	cmp	r3, #0
 80068de:	ed8d 7b00 	vstr	d7, [sp]
 80068e2:	da03      	bge.n	80068ec <_dtoa_r+0x46c>
 80068e4:	9b07      	ldr	r3, [sp, #28]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f340 8101 	ble.w	8006aee <_dtoa_r+0x66e>
 80068ec:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068f0:	4656      	mov	r6, sl
 80068f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80068f6:	4620      	mov	r0, r4
 80068f8:	4629      	mov	r1, r5
 80068fa:	f7f9 ffcf 	bl	800089c <__aeabi_ddiv>
 80068fe:	f7fa f953 	bl	8000ba8 <__aeabi_d2iz>
 8006902:	4680      	mov	r8, r0
 8006904:	f7f9 fe36 	bl	8000574 <__aeabi_i2d>
 8006908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800690c:	f7f9 fe9c 	bl	8000648 <__aeabi_dmul>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	4620      	mov	r0, r4
 8006916:	4629      	mov	r1, r5
 8006918:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800691c:	f7f9 fcdc 	bl	80002d8 <__aeabi_dsub>
 8006920:	f806 4b01 	strb.w	r4, [r6], #1
 8006924:	9d07      	ldr	r5, [sp, #28]
 8006926:	eba6 040a 	sub.w	r4, r6, sl
 800692a:	42a5      	cmp	r5, r4
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	f040 8117 	bne.w	8006b62 <_dtoa_r+0x6e2>
 8006934:	f7f9 fcd2 	bl	80002dc <__adddf3>
 8006938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800693c:	4604      	mov	r4, r0
 800693e:	460d      	mov	r5, r1
 8006940:	f7fa f912 	bl	8000b68 <__aeabi_dcmpgt>
 8006944:	2800      	cmp	r0, #0
 8006946:	f040 80f9 	bne.w	8006b3c <_dtoa_r+0x6bc>
 800694a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800694e:	4620      	mov	r0, r4
 8006950:	4629      	mov	r1, r5
 8006952:	f7fa f8e1 	bl	8000b18 <__aeabi_dcmpeq>
 8006956:	b118      	cbz	r0, 8006960 <_dtoa_r+0x4e0>
 8006958:	f018 0f01 	tst.w	r8, #1
 800695c:	f040 80ee 	bne.w	8006b3c <_dtoa_r+0x6bc>
 8006960:	4649      	mov	r1, r9
 8006962:	4658      	mov	r0, fp
 8006964:	f000 fc90 	bl	8007288 <_Bfree>
 8006968:	2300      	movs	r3, #0
 800696a:	7033      	strb	r3, [r6, #0]
 800696c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800696e:	3701      	adds	r7, #1
 8006970:	601f      	str	r7, [r3, #0]
 8006972:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006974:	2b00      	cmp	r3, #0
 8006976:	f000 831d 	beq.w	8006fb4 <_dtoa_r+0xb34>
 800697a:	601e      	str	r6, [r3, #0]
 800697c:	e31a      	b.n	8006fb4 <_dtoa_r+0xb34>
 800697e:	07e2      	lsls	r2, r4, #31
 8006980:	d505      	bpl.n	800698e <_dtoa_r+0x50e>
 8006982:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006986:	f7f9 fe5f 	bl	8000648 <__aeabi_dmul>
 800698a:	3601      	adds	r6, #1
 800698c:	2301      	movs	r3, #1
 800698e:	1064      	asrs	r4, r4, #1
 8006990:	3508      	adds	r5, #8
 8006992:	e73f      	b.n	8006814 <_dtoa_r+0x394>
 8006994:	2602      	movs	r6, #2
 8006996:	e742      	b.n	800681e <_dtoa_r+0x39e>
 8006998:	9c07      	ldr	r4, [sp, #28]
 800699a:	9704      	str	r7, [sp, #16]
 800699c:	e761      	b.n	8006862 <_dtoa_r+0x3e2>
 800699e:	4b27      	ldr	r3, [pc, #156]	@ (8006a3c <_dtoa_r+0x5bc>)
 80069a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069a6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069aa:	4454      	add	r4, sl
 80069ac:	2900      	cmp	r1, #0
 80069ae:	d053      	beq.n	8006a58 <_dtoa_r+0x5d8>
 80069b0:	4928      	ldr	r1, [pc, #160]	@ (8006a54 <_dtoa_r+0x5d4>)
 80069b2:	2000      	movs	r0, #0
 80069b4:	f7f9 ff72 	bl	800089c <__aeabi_ddiv>
 80069b8:	4633      	mov	r3, r6
 80069ba:	462a      	mov	r2, r5
 80069bc:	f7f9 fc8c 	bl	80002d8 <__aeabi_dsub>
 80069c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80069c4:	4656      	mov	r6, sl
 80069c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069ca:	f7fa f8ed 	bl	8000ba8 <__aeabi_d2iz>
 80069ce:	4605      	mov	r5, r0
 80069d0:	f7f9 fdd0 	bl	8000574 <__aeabi_i2d>
 80069d4:	4602      	mov	r2, r0
 80069d6:	460b      	mov	r3, r1
 80069d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069dc:	f7f9 fc7c 	bl	80002d8 <__aeabi_dsub>
 80069e0:	3530      	adds	r5, #48	@ 0x30
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069ea:	f806 5b01 	strb.w	r5, [r6], #1
 80069ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069f2:	f7fa f89b 	bl	8000b2c <__aeabi_dcmplt>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	d171      	bne.n	8006ade <_dtoa_r+0x65e>
 80069fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069fe:	4911      	ldr	r1, [pc, #68]	@ (8006a44 <_dtoa_r+0x5c4>)
 8006a00:	2000      	movs	r0, #0
 8006a02:	f7f9 fc69 	bl	80002d8 <__aeabi_dsub>
 8006a06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a0a:	f7fa f88f 	bl	8000b2c <__aeabi_dcmplt>
 8006a0e:	2800      	cmp	r0, #0
 8006a10:	f040 8095 	bne.w	8006b3e <_dtoa_r+0x6be>
 8006a14:	42a6      	cmp	r6, r4
 8006a16:	f43f af50 	beq.w	80068ba <_dtoa_r+0x43a>
 8006a1a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a48 <_dtoa_r+0x5c8>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	f7f9 fe11 	bl	8000648 <__aeabi_dmul>
 8006a26:	4b08      	ldr	r3, [pc, #32]	@ (8006a48 <_dtoa_r+0x5c8>)
 8006a28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a32:	f7f9 fe09 	bl	8000648 <__aeabi_dmul>
 8006a36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a3a:	e7c4      	b.n	80069c6 <_dtoa_r+0x546>
 8006a3c:	080085f8 	.word	0x080085f8
 8006a40:	080085d0 	.word	0x080085d0
 8006a44:	3ff00000 	.word	0x3ff00000
 8006a48:	40240000 	.word	0x40240000
 8006a4c:	401c0000 	.word	0x401c0000
 8006a50:	40140000 	.word	0x40140000
 8006a54:	3fe00000 	.word	0x3fe00000
 8006a58:	4631      	mov	r1, r6
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	f7f9 fdf4 	bl	8000648 <__aeabi_dmul>
 8006a60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a64:	9415      	str	r4, [sp, #84]	@ 0x54
 8006a66:	4656      	mov	r6, sl
 8006a68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a6c:	f7fa f89c 	bl	8000ba8 <__aeabi_d2iz>
 8006a70:	4605      	mov	r5, r0
 8006a72:	f7f9 fd7f 	bl	8000574 <__aeabi_i2d>
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a7e:	f7f9 fc2b 	bl	80002d8 <__aeabi_dsub>
 8006a82:	3530      	adds	r5, #48	@ 0x30
 8006a84:	f806 5b01 	strb.w	r5, [r6], #1
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	42a6      	cmp	r6, r4
 8006a8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a92:	f04f 0200 	mov.w	r2, #0
 8006a96:	d124      	bne.n	8006ae2 <_dtoa_r+0x662>
 8006a98:	4bac      	ldr	r3, [pc, #688]	@ (8006d4c <_dtoa_r+0x8cc>)
 8006a9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006a9e:	f7f9 fc1d 	bl	80002dc <__adddf3>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aaa:	f7fa f85d 	bl	8000b68 <__aeabi_dcmpgt>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d145      	bne.n	8006b3e <_dtoa_r+0x6be>
 8006ab2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006ab6:	49a5      	ldr	r1, [pc, #660]	@ (8006d4c <_dtoa_r+0x8cc>)
 8006ab8:	2000      	movs	r0, #0
 8006aba:	f7f9 fc0d 	bl	80002d8 <__aeabi_dsub>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ac6:	f7fa f831 	bl	8000b2c <__aeabi_dcmplt>
 8006aca:	2800      	cmp	r0, #0
 8006acc:	f43f aef5 	beq.w	80068ba <_dtoa_r+0x43a>
 8006ad0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006ad2:	1e73      	subs	r3, r6, #1
 8006ad4:	9315      	str	r3, [sp, #84]	@ 0x54
 8006ad6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ada:	2b30      	cmp	r3, #48	@ 0x30
 8006adc:	d0f8      	beq.n	8006ad0 <_dtoa_r+0x650>
 8006ade:	9f04      	ldr	r7, [sp, #16]
 8006ae0:	e73e      	b.n	8006960 <_dtoa_r+0x4e0>
 8006ae2:	4b9b      	ldr	r3, [pc, #620]	@ (8006d50 <_dtoa_r+0x8d0>)
 8006ae4:	f7f9 fdb0 	bl	8000648 <__aeabi_dmul>
 8006ae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006aec:	e7bc      	b.n	8006a68 <_dtoa_r+0x5e8>
 8006aee:	d10c      	bne.n	8006b0a <_dtoa_r+0x68a>
 8006af0:	4b98      	ldr	r3, [pc, #608]	@ (8006d54 <_dtoa_r+0x8d4>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006af8:	f7f9 fda6 	bl	8000648 <__aeabi_dmul>
 8006afc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b00:	f7fa f828 	bl	8000b54 <__aeabi_dcmpge>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	f000 8157 	beq.w	8006db8 <_dtoa_r+0x938>
 8006b0a:	2400      	movs	r4, #0
 8006b0c:	4625      	mov	r5, r4
 8006b0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b10:	43db      	mvns	r3, r3
 8006b12:	9304      	str	r3, [sp, #16]
 8006b14:	4656      	mov	r6, sl
 8006b16:	2700      	movs	r7, #0
 8006b18:	4621      	mov	r1, r4
 8006b1a:	4658      	mov	r0, fp
 8006b1c:	f000 fbb4 	bl	8007288 <_Bfree>
 8006b20:	2d00      	cmp	r5, #0
 8006b22:	d0dc      	beq.n	8006ade <_dtoa_r+0x65e>
 8006b24:	b12f      	cbz	r7, 8006b32 <_dtoa_r+0x6b2>
 8006b26:	42af      	cmp	r7, r5
 8006b28:	d003      	beq.n	8006b32 <_dtoa_r+0x6b2>
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	4658      	mov	r0, fp
 8006b2e:	f000 fbab 	bl	8007288 <_Bfree>
 8006b32:	4629      	mov	r1, r5
 8006b34:	4658      	mov	r0, fp
 8006b36:	f000 fba7 	bl	8007288 <_Bfree>
 8006b3a:	e7d0      	b.n	8006ade <_dtoa_r+0x65e>
 8006b3c:	9704      	str	r7, [sp, #16]
 8006b3e:	4633      	mov	r3, r6
 8006b40:	461e      	mov	r6, r3
 8006b42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b46:	2a39      	cmp	r2, #57	@ 0x39
 8006b48:	d107      	bne.n	8006b5a <_dtoa_r+0x6da>
 8006b4a:	459a      	cmp	sl, r3
 8006b4c:	d1f8      	bne.n	8006b40 <_dtoa_r+0x6c0>
 8006b4e:	9a04      	ldr	r2, [sp, #16]
 8006b50:	3201      	adds	r2, #1
 8006b52:	9204      	str	r2, [sp, #16]
 8006b54:	2230      	movs	r2, #48	@ 0x30
 8006b56:	f88a 2000 	strb.w	r2, [sl]
 8006b5a:	781a      	ldrb	r2, [r3, #0]
 8006b5c:	3201      	adds	r2, #1
 8006b5e:	701a      	strb	r2, [r3, #0]
 8006b60:	e7bd      	b.n	8006ade <_dtoa_r+0x65e>
 8006b62:	4b7b      	ldr	r3, [pc, #492]	@ (8006d50 <_dtoa_r+0x8d0>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	f7f9 fd6f 	bl	8000648 <__aeabi_dmul>
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	4604      	mov	r4, r0
 8006b70:	460d      	mov	r5, r1
 8006b72:	f7f9 ffd1 	bl	8000b18 <__aeabi_dcmpeq>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	f43f aebb 	beq.w	80068f2 <_dtoa_r+0x472>
 8006b7c:	e6f0      	b.n	8006960 <_dtoa_r+0x4e0>
 8006b7e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006b80:	2a00      	cmp	r2, #0
 8006b82:	f000 80db 	beq.w	8006d3c <_dtoa_r+0x8bc>
 8006b86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b88:	2a01      	cmp	r2, #1
 8006b8a:	f300 80bf 	bgt.w	8006d0c <_dtoa_r+0x88c>
 8006b8e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006b90:	2a00      	cmp	r2, #0
 8006b92:	f000 80b7 	beq.w	8006d04 <_dtoa_r+0x884>
 8006b96:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006b9a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006b9c:	4646      	mov	r6, r8
 8006b9e:	9a08      	ldr	r2, [sp, #32]
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	441a      	add	r2, r3
 8006ba4:	4658      	mov	r0, fp
 8006ba6:	4498      	add	r8, r3
 8006ba8:	9208      	str	r2, [sp, #32]
 8006baa:	f000 fc21 	bl	80073f0 <__i2b>
 8006bae:	4605      	mov	r5, r0
 8006bb0:	b15e      	cbz	r6, 8006bca <_dtoa_r+0x74a>
 8006bb2:	9b08      	ldr	r3, [sp, #32]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	dd08      	ble.n	8006bca <_dtoa_r+0x74a>
 8006bb8:	42b3      	cmp	r3, r6
 8006bba:	9a08      	ldr	r2, [sp, #32]
 8006bbc:	bfa8      	it	ge
 8006bbe:	4633      	movge	r3, r6
 8006bc0:	eba8 0803 	sub.w	r8, r8, r3
 8006bc4:	1af6      	subs	r6, r6, r3
 8006bc6:	1ad3      	subs	r3, r2, r3
 8006bc8:	9308      	str	r3, [sp, #32]
 8006bca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bcc:	b1f3      	cbz	r3, 8006c0c <_dtoa_r+0x78c>
 8006bce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 80b7 	beq.w	8006d44 <_dtoa_r+0x8c4>
 8006bd6:	b18c      	cbz	r4, 8006bfc <_dtoa_r+0x77c>
 8006bd8:	4629      	mov	r1, r5
 8006bda:	4622      	mov	r2, r4
 8006bdc:	4658      	mov	r0, fp
 8006bde:	f000 fcc7 	bl	8007570 <__pow5mult>
 8006be2:	464a      	mov	r2, r9
 8006be4:	4601      	mov	r1, r0
 8006be6:	4605      	mov	r5, r0
 8006be8:	4658      	mov	r0, fp
 8006bea:	f000 fc17 	bl	800741c <__multiply>
 8006bee:	4649      	mov	r1, r9
 8006bf0:	9004      	str	r0, [sp, #16]
 8006bf2:	4658      	mov	r0, fp
 8006bf4:	f000 fb48 	bl	8007288 <_Bfree>
 8006bf8:	9b04      	ldr	r3, [sp, #16]
 8006bfa:	4699      	mov	r9, r3
 8006bfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bfe:	1b1a      	subs	r2, r3, r4
 8006c00:	d004      	beq.n	8006c0c <_dtoa_r+0x78c>
 8006c02:	4649      	mov	r1, r9
 8006c04:	4658      	mov	r0, fp
 8006c06:	f000 fcb3 	bl	8007570 <__pow5mult>
 8006c0a:	4681      	mov	r9, r0
 8006c0c:	2101      	movs	r1, #1
 8006c0e:	4658      	mov	r0, fp
 8006c10:	f000 fbee 	bl	80073f0 <__i2b>
 8006c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c16:	4604      	mov	r4, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 81cf 	beq.w	8006fbc <_dtoa_r+0xb3c>
 8006c1e:	461a      	mov	r2, r3
 8006c20:	4601      	mov	r1, r0
 8006c22:	4658      	mov	r0, fp
 8006c24:	f000 fca4 	bl	8007570 <__pow5mult>
 8006c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	4604      	mov	r4, r0
 8006c2e:	f300 8095 	bgt.w	8006d5c <_dtoa_r+0x8dc>
 8006c32:	9b02      	ldr	r3, [sp, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f040 8087 	bne.w	8006d48 <_dtoa_r+0x8c8>
 8006c3a:	9b03      	ldr	r3, [sp, #12]
 8006c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f040 8089 	bne.w	8006d58 <_dtoa_r+0x8d8>
 8006c46:	9b03      	ldr	r3, [sp, #12]
 8006c48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c4c:	0d1b      	lsrs	r3, r3, #20
 8006c4e:	051b      	lsls	r3, r3, #20
 8006c50:	b12b      	cbz	r3, 8006c5e <_dtoa_r+0x7de>
 8006c52:	9b08      	ldr	r3, [sp, #32]
 8006c54:	3301      	adds	r3, #1
 8006c56:	9308      	str	r3, [sp, #32]
 8006c58:	f108 0801 	add.w	r8, r8, #1
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 81b0 	beq.w	8006fc8 <_dtoa_r+0xb48>
 8006c68:	6923      	ldr	r3, [r4, #16]
 8006c6a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c6e:	6918      	ldr	r0, [r3, #16]
 8006c70:	f000 fb72 	bl	8007358 <__hi0bits>
 8006c74:	f1c0 0020 	rsb	r0, r0, #32
 8006c78:	9b08      	ldr	r3, [sp, #32]
 8006c7a:	4418      	add	r0, r3
 8006c7c:	f010 001f 	ands.w	r0, r0, #31
 8006c80:	d077      	beq.n	8006d72 <_dtoa_r+0x8f2>
 8006c82:	f1c0 0320 	rsb	r3, r0, #32
 8006c86:	2b04      	cmp	r3, #4
 8006c88:	dd6b      	ble.n	8006d62 <_dtoa_r+0x8e2>
 8006c8a:	9b08      	ldr	r3, [sp, #32]
 8006c8c:	f1c0 001c 	rsb	r0, r0, #28
 8006c90:	4403      	add	r3, r0
 8006c92:	4480      	add	r8, r0
 8006c94:	4406      	add	r6, r0
 8006c96:	9308      	str	r3, [sp, #32]
 8006c98:	f1b8 0f00 	cmp.w	r8, #0
 8006c9c:	dd05      	ble.n	8006caa <_dtoa_r+0x82a>
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	4658      	mov	r0, fp
 8006ca4:	f000 fcbe 	bl	8007624 <__lshift>
 8006ca8:	4681      	mov	r9, r0
 8006caa:	9b08      	ldr	r3, [sp, #32]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	dd05      	ble.n	8006cbc <_dtoa_r+0x83c>
 8006cb0:	4621      	mov	r1, r4
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	4658      	mov	r0, fp
 8006cb6:	f000 fcb5 	bl	8007624 <__lshift>
 8006cba:	4604      	mov	r4, r0
 8006cbc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d059      	beq.n	8006d76 <_dtoa_r+0x8f6>
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	4648      	mov	r0, r9
 8006cc6:	f000 fd19 	bl	80076fc <__mcmp>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	da53      	bge.n	8006d76 <_dtoa_r+0x8f6>
 8006cce:	1e7b      	subs	r3, r7, #1
 8006cd0:	9304      	str	r3, [sp, #16]
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	220a      	movs	r2, #10
 8006cd8:	4658      	mov	r0, fp
 8006cda:	f000 faf7 	bl	80072cc <__multadd>
 8006cde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ce0:	4681      	mov	r9, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 8172 	beq.w	8006fcc <_dtoa_r+0xb4c>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	4629      	mov	r1, r5
 8006cec:	220a      	movs	r2, #10
 8006cee:	4658      	mov	r0, fp
 8006cf0:	f000 faec 	bl	80072cc <__multadd>
 8006cf4:	9b00      	ldr	r3, [sp, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	dc67      	bgt.n	8006dcc <_dtoa_r+0x94c>
 8006cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	dc41      	bgt.n	8006d86 <_dtoa_r+0x906>
 8006d02:	e063      	b.n	8006dcc <_dtoa_r+0x94c>
 8006d04:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006d06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d0a:	e746      	b.n	8006b9a <_dtoa_r+0x71a>
 8006d0c:	9b07      	ldr	r3, [sp, #28]
 8006d0e:	1e5c      	subs	r4, r3, #1
 8006d10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d12:	42a3      	cmp	r3, r4
 8006d14:	bfbf      	itttt	lt
 8006d16:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006d18:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006d1a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006d1c:	1ae3      	sublt	r3, r4, r3
 8006d1e:	bfb4      	ite	lt
 8006d20:	18d2      	addlt	r2, r2, r3
 8006d22:	1b1c      	subge	r4, r3, r4
 8006d24:	9b07      	ldr	r3, [sp, #28]
 8006d26:	bfbc      	itt	lt
 8006d28:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006d2a:	2400      	movlt	r4, #0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	bfb5      	itete	lt
 8006d30:	eba8 0603 	sublt.w	r6, r8, r3
 8006d34:	9b07      	ldrge	r3, [sp, #28]
 8006d36:	2300      	movlt	r3, #0
 8006d38:	4646      	movge	r6, r8
 8006d3a:	e730      	b.n	8006b9e <_dtoa_r+0x71e>
 8006d3c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d3e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006d40:	4646      	mov	r6, r8
 8006d42:	e735      	b.n	8006bb0 <_dtoa_r+0x730>
 8006d44:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d46:	e75c      	b.n	8006c02 <_dtoa_r+0x782>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	e788      	b.n	8006c5e <_dtoa_r+0x7de>
 8006d4c:	3fe00000 	.word	0x3fe00000
 8006d50:	40240000 	.word	0x40240000
 8006d54:	40140000 	.word	0x40140000
 8006d58:	9b02      	ldr	r3, [sp, #8]
 8006d5a:	e780      	b.n	8006c5e <_dtoa_r+0x7de>
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d60:	e782      	b.n	8006c68 <_dtoa_r+0x7e8>
 8006d62:	d099      	beq.n	8006c98 <_dtoa_r+0x818>
 8006d64:	9a08      	ldr	r2, [sp, #32]
 8006d66:	331c      	adds	r3, #28
 8006d68:	441a      	add	r2, r3
 8006d6a:	4498      	add	r8, r3
 8006d6c:	441e      	add	r6, r3
 8006d6e:	9208      	str	r2, [sp, #32]
 8006d70:	e792      	b.n	8006c98 <_dtoa_r+0x818>
 8006d72:	4603      	mov	r3, r0
 8006d74:	e7f6      	b.n	8006d64 <_dtoa_r+0x8e4>
 8006d76:	9b07      	ldr	r3, [sp, #28]
 8006d78:	9704      	str	r7, [sp, #16]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	dc20      	bgt.n	8006dc0 <_dtoa_r+0x940>
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	dd1e      	ble.n	8006dc4 <_dtoa_r+0x944>
 8006d86:	9b00      	ldr	r3, [sp, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f47f aec0 	bne.w	8006b0e <_dtoa_r+0x68e>
 8006d8e:	4621      	mov	r1, r4
 8006d90:	2205      	movs	r2, #5
 8006d92:	4658      	mov	r0, fp
 8006d94:	f000 fa9a 	bl	80072cc <__multadd>
 8006d98:	4601      	mov	r1, r0
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	4648      	mov	r0, r9
 8006d9e:	f000 fcad 	bl	80076fc <__mcmp>
 8006da2:	2800      	cmp	r0, #0
 8006da4:	f77f aeb3 	ble.w	8006b0e <_dtoa_r+0x68e>
 8006da8:	4656      	mov	r6, sl
 8006daa:	2331      	movs	r3, #49	@ 0x31
 8006dac:	f806 3b01 	strb.w	r3, [r6], #1
 8006db0:	9b04      	ldr	r3, [sp, #16]
 8006db2:	3301      	adds	r3, #1
 8006db4:	9304      	str	r3, [sp, #16]
 8006db6:	e6ae      	b.n	8006b16 <_dtoa_r+0x696>
 8006db8:	9c07      	ldr	r4, [sp, #28]
 8006dba:	9704      	str	r7, [sp, #16]
 8006dbc:	4625      	mov	r5, r4
 8006dbe:	e7f3      	b.n	8006da8 <_dtoa_r+0x928>
 8006dc0:	9b07      	ldr	r3, [sp, #28]
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 8104 	beq.w	8006fd4 <_dtoa_r+0xb54>
 8006dcc:	2e00      	cmp	r6, #0
 8006dce:	dd05      	ble.n	8006ddc <_dtoa_r+0x95c>
 8006dd0:	4629      	mov	r1, r5
 8006dd2:	4632      	mov	r2, r6
 8006dd4:	4658      	mov	r0, fp
 8006dd6:	f000 fc25 	bl	8007624 <__lshift>
 8006dda:	4605      	mov	r5, r0
 8006ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d05a      	beq.n	8006e98 <_dtoa_r+0xa18>
 8006de2:	6869      	ldr	r1, [r5, #4]
 8006de4:	4658      	mov	r0, fp
 8006de6:	f000 fa0f 	bl	8007208 <_Balloc>
 8006dea:	4606      	mov	r6, r0
 8006dec:	b928      	cbnz	r0, 8006dfa <_dtoa_r+0x97a>
 8006dee:	4b84      	ldr	r3, [pc, #528]	@ (8007000 <_dtoa_r+0xb80>)
 8006df0:	4602      	mov	r2, r0
 8006df2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006df6:	f7ff bb5a 	b.w	80064ae <_dtoa_r+0x2e>
 8006dfa:	692a      	ldr	r2, [r5, #16]
 8006dfc:	3202      	adds	r2, #2
 8006dfe:	0092      	lsls	r2, r2, #2
 8006e00:	f105 010c 	add.w	r1, r5, #12
 8006e04:	300c      	adds	r0, #12
 8006e06:	f001 f813 	bl	8007e30 <memcpy>
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	4631      	mov	r1, r6
 8006e0e:	4658      	mov	r0, fp
 8006e10:	f000 fc08 	bl	8007624 <__lshift>
 8006e14:	f10a 0301 	add.w	r3, sl, #1
 8006e18:	9307      	str	r3, [sp, #28]
 8006e1a:	9b00      	ldr	r3, [sp, #0]
 8006e1c:	4453      	add	r3, sl
 8006e1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e20:	9b02      	ldr	r3, [sp, #8]
 8006e22:	f003 0301 	and.w	r3, r3, #1
 8006e26:	462f      	mov	r7, r5
 8006e28:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e2a:	4605      	mov	r5, r0
 8006e2c:	9b07      	ldr	r3, [sp, #28]
 8006e2e:	4621      	mov	r1, r4
 8006e30:	3b01      	subs	r3, #1
 8006e32:	4648      	mov	r0, r9
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	f7ff fa98 	bl	800636a <quorem>
 8006e3a:	4639      	mov	r1, r7
 8006e3c:	9002      	str	r0, [sp, #8]
 8006e3e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e42:	4648      	mov	r0, r9
 8006e44:	f000 fc5a 	bl	80076fc <__mcmp>
 8006e48:	462a      	mov	r2, r5
 8006e4a:	9008      	str	r0, [sp, #32]
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	4658      	mov	r0, fp
 8006e50:	f000 fc70 	bl	8007734 <__mdiff>
 8006e54:	68c2      	ldr	r2, [r0, #12]
 8006e56:	4606      	mov	r6, r0
 8006e58:	bb02      	cbnz	r2, 8006e9c <_dtoa_r+0xa1c>
 8006e5a:	4601      	mov	r1, r0
 8006e5c:	4648      	mov	r0, r9
 8006e5e:	f000 fc4d 	bl	80076fc <__mcmp>
 8006e62:	4602      	mov	r2, r0
 8006e64:	4631      	mov	r1, r6
 8006e66:	4658      	mov	r0, fp
 8006e68:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e6a:	f000 fa0d 	bl	8007288 <_Bfree>
 8006e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006e72:	9e07      	ldr	r6, [sp, #28]
 8006e74:	ea43 0102 	orr.w	r1, r3, r2
 8006e78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e7a:	4319      	orrs	r1, r3
 8006e7c:	d110      	bne.n	8006ea0 <_dtoa_r+0xa20>
 8006e7e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e82:	d029      	beq.n	8006ed8 <_dtoa_r+0xa58>
 8006e84:	9b08      	ldr	r3, [sp, #32]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	dd02      	ble.n	8006e90 <_dtoa_r+0xa10>
 8006e8a:	9b02      	ldr	r3, [sp, #8]
 8006e8c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006e90:	9b00      	ldr	r3, [sp, #0]
 8006e92:	f883 8000 	strb.w	r8, [r3]
 8006e96:	e63f      	b.n	8006b18 <_dtoa_r+0x698>
 8006e98:	4628      	mov	r0, r5
 8006e9a:	e7bb      	b.n	8006e14 <_dtoa_r+0x994>
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	e7e1      	b.n	8006e64 <_dtoa_r+0x9e4>
 8006ea0:	9b08      	ldr	r3, [sp, #32]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	db04      	blt.n	8006eb0 <_dtoa_r+0xa30>
 8006ea6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ea8:	430b      	orrs	r3, r1
 8006eaa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006eac:	430b      	orrs	r3, r1
 8006eae:	d120      	bne.n	8006ef2 <_dtoa_r+0xa72>
 8006eb0:	2a00      	cmp	r2, #0
 8006eb2:	dded      	ble.n	8006e90 <_dtoa_r+0xa10>
 8006eb4:	4649      	mov	r1, r9
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	4658      	mov	r0, fp
 8006eba:	f000 fbb3 	bl	8007624 <__lshift>
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	4681      	mov	r9, r0
 8006ec2:	f000 fc1b 	bl	80076fc <__mcmp>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	dc03      	bgt.n	8006ed2 <_dtoa_r+0xa52>
 8006eca:	d1e1      	bne.n	8006e90 <_dtoa_r+0xa10>
 8006ecc:	f018 0f01 	tst.w	r8, #1
 8006ed0:	d0de      	beq.n	8006e90 <_dtoa_r+0xa10>
 8006ed2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ed6:	d1d8      	bne.n	8006e8a <_dtoa_r+0xa0a>
 8006ed8:	9a00      	ldr	r2, [sp, #0]
 8006eda:	2339      	movs	r3, #57	@ 0x39
 8006edc:	7013      	strb	r3, [r2, #0]
 8006ede:	4633      	mov	r3, r6
 8006ee0:	461e      	mov	r6, r3
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006ee8:	2a39      	cmp	r2, #57	@ 0x39
 8006eea:	d052      	beq.n	8006f92 <_dtoa_r+0xb12>
 8006eec:	3201      	adds	r2, #1
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	e612      	b.n	8006b18 <_dtoa_r+0x698>
 8006ef2:	2a00      	cmp	r2, #0
 8006ef4:	dd07      	ble.n	8006f06 <_dtoa_r+0xa86>
 8006ef6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006efa:	d0ed      	beq.n	8006ed8 <_dtoa_r+0xa58>
 8006efc:	9a00      	ldr	r2, [sp, #0]
 8006efe:	f108 0301 	add.w	r3, r8, #1
 8006f02:	7013      	strb	r3, [r2, #0]
 8006f04:	e608      	b.n	8006b18 <_dtoa_r+0x698>
 8006f06:	9b07      	ldr	r3, [sp, #28]
 8006f08:	9a07      	ldr	r2, [sp, #28]
 8006f0a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d028      	beq.n	8006f66 <_dtoa_r+0xae6>
 8006f14:	4649      	mov	r1, r9
 8006f16:	2300      	movs	r3, #0
 8006f18:	220a      	movs	r2, #10
 8006f1a:	4658      	mov	r0, fp
 8006f1c:	f000 f9d6 	bl	80072cc <__multadd>
 8006f20:	42af      	cmp	r7, r5
 8006f22:	4681      	mov	r9, r0
 8006f24:	f04f 0300 	mov.w	r3, #0
 8006f28:	f04f 020a 	mov.w	r2, #10
 8006f2c:	4639      	mov	r1, r7
 8006f2e:	4658      	mov	r0, fp
 8006f30:	d107      	bne.n	8006f42 <_dtoa_r+0xac2>
 8006f32:	f000 f9cb 	bl	80072cc <__multadd>
 8006f36:	4607      	mov	r7, r0
 8006f38:	4605      	mov	r5, r0
 8006f3a:	9b07      	ldr	r3, [sp, #28]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	9307      	str	r3, [sp, #28]
 8006f40:	e774      	b.n	8006e2c <_dtoa_r+0x9ac>
 8006f42:	f000 f9c3 	bl	80072cc <__multadd>
 8006f46:	4629      	mov	r1, r5
 8006f48:	4607      	mov	r7, r0
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	220a      	movs	r2, #10
 8006f4e:	4658      	mov	r0, fp
 8006f50:	f000 f9bc 	bl	80072cc <__multadd>
 8006f54:	4605      	mov	r5, r0
 8006f56:	e7f0      	b.n	8006f3a <_dtoa_r+0xaba>
 8006f58:	9b00      	ldr	r3, [sp, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	bfcc      	ite	gt
 8006f5e:	461e      	movgt	r6, r3
 8006f60:	2601      	movle	r6, #1
 8006f62:	4456      	add	r6, sl
 8006f64:	2700      	movs	r7, #0
 8006f66:	4649      	mov	r1, r9
 8006f68:	2201      	movs	r2, #1
 8006f6a:	4658      	mov	r0, fp
 8006f6c:	f000 fb5a 	bl	8007624 <__lshift>
 8006f70:	4621      	mov	r1, r4
 8006f72:	4681      	mov	r9, r0
 8006f74:	f000 fbc2 	bl	80076fc <__mcmp>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	dcb0      	bgt.n	8006ede <_dtoa_r+0xa5e>
 8006f7c:	d102      	bne.n	8006f84 <_dtoa_r+0xb04>
 8006f7e:	f018 0f01 	tst.w	r8, #1
 8006f82:	d1ac      	bne.n	8006ede <_dtoa_r+0xa5e>
 8006f84:	4633      	mov	r3, r6
 8006f86:	461e      	mov	r6, r3
 8006f88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f8c:	2a30      	cmp	r2, #48	@ 0x30
 8006f8e:	d0fa      	beq.n	8006f86 <_dtoa_r+0xb06>
 8006f90:	e5c2      	b.n	8006b18 <_dtoa_r+0x698>
 8006f92:	459a      	cmp	sl, r3
 8006f94:	d1a4      	bne.n	8006ee0 <_dtoa_r+0xa60>
 8006f96:	9b04      	ldr	r3, [sp, #16]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	9304      	str	r3, [sp, #16]
 8006f9c:	2331      	movs	r3, #49	@ 0x31
 8006f9e:	f88a 3000 	strb.w	r3, [sl]
 8006fa2:	e5b9      	b.n	8006b18 <_dtoa_r+0x698>
 8006fa4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006fa6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007004 <_dtoa_r+0xb84>
 8006faa:	b11b      	cbz	r3, 8006fb4 <_dtoa_r+0xb34>
 8006fac:	f10a 0308 	add.w	r3, sl, #8
 8006fb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	4650      	mov	r0, sl
 8006fb6:	b019      	add	sp, #100	@ 0x64
 8006fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	f77f ae37 	ble.w	8006c32 <_dtoa_r+0x7b2>
 8006fc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fc8:	2001      	movs	r0, #1
 8006fca:	e655      	b.n	8006c78 <_dtoa_r+0x7f8>
 8006fcc:	9b00      	ldr	r3, [sp, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f77f aed6 	ble.w	8006d80 <_dtoa_r+0x900>
 8006fd4:	4656      	mov	r6, sl
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4648      	mov	r0, r9
 8006fda:	f7ff f9c6 	bl	800636a <quorem>
 8006fde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006fe2:	f806 8b01 	strb.w	r8, [r6], #1
 8006fe6:	9b00      	ldr	r3, [sp, #0]
 8006fe8:	eba6 020a 	sub.w	r2, r6, sl
 8006fec:	4293      	cmp	r3, r2
 8006fee:	ddb3      	ble.n	8006f58 <_dtoa_r+0xad8>
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	220a      	movs	r2, #10
 8006ff6:	4658      	mov	r0, fp
 8006ff8:	f000 f968 	bl	80072cc <__multadd>
 8006ffc:	4681      	mov	r9, r0
 8006ffe:	e7ea      	b.n	8006fd6 <_dtoa_r+0xb56>
 8007000:	08008558 	.word	0x08008558
 8007004:	080084dc 	.word	0x080084dc

08007008 <_free_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4605      	mov	r5, r0
 800700c:	2900      	cmp	r1, #0
 800700e:	d041      	beq.n	8007094 <_free_r+0x8c>
 8007010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007014:	1f0c      	subs	r4, r1, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	bfb8      	it	lt
 800701a:	18e4      	addlt	r4, r4, r3
 800701c:	f000 f8e8 	bl	80071f0 <__malloc_lock>
 8007020:	4a1d      	ldr	r2, [pc, #116]	@ (8007098 <_free_r+0x90>)
 8007022:	6813      	ldr	r3, [r2, #0]
 8007024:	b933      	cbnz	r3, 8007034 <_free_r+0x2c>
 8007026:	6063      	str	r3, [r4, #4]
 8007028:	6014      	str	r4, [r2, #0]
 800702a:	4628      	mov	r0, r5
 800702c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007030:	f000 b8e4 	b.w	80071fc <__malloc_unlock>
 8007034:	42a3      	cmp	r3, r4
 8007036:	d908      	bls.n	800704a <_free_r+0x42>
 8007038:	6820      	ldr	r0, [r4, #0]
 800703a:	1821      	adds	r1, r4, r0
 800703c:	428b      	cmp	r3, r1
 800703e:	bf01      	itttt	eq
 8007040:	6819      	ldreq	r1, [r3, #0]
 8007042:	685b      	ldreq	r3, [r3, #4]
 8007044:	1809      	addeq	r1, r1, r0
 8007046:	6021      	streq	r1, [r4, #0]
 8007048:	e7ed      	b.n	8007026 <_free_r+0x1e>
 800704a:	461a      	mov	r2, r3
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	b10b      	cbz	r3, 8007054 <_free_r+0x4c>
 8007050:	42a3      	cmp	r3, r4
 8007052:	d9fa      	bls.n	800704a <_free_r+0x42>
 8007054:	6811      	ldr	r1, [r2, #0]
 8007056:	1850      	adds	r0, r2, r1
 8007058:	42a0      	cmp	r0, r4
 800705a:	d10b      	bne.n	8007074 <_free_r+0x6c>
 800705c:	6820      	ldr	r0, [r4, #0]
 800705e:	4401      	add	r1, r0
 8007060:	1850      	adds	r0, r2, r1
 8007062:	4283      	cmp	r3, r0
 8007064:	6011      	str	r1, [r2, #0]
 8007066:	d1e0      	bne.n	800702a <_free_r+0x22>
 8007068:	6818      	ldr	r0, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	6053      	str	r3, [r2, #4]
 800706e:	4408      	add	r0, r1
 8007070:	6010      	str	r0, [r2, #0]
 8007072:	e7da      	b.n	800702a <_free_r+0x22>
 8007074:	d902      	bls.n	800707c <_free_r+0x74>
 8007076:	230c      	movs	r3, #12
 8007078:	602b      	str	r3, [r5, #0]
 800707a:	e7d6      	b.n	800702a <_free_r+0x22>
 800707c:	6820      	ldr	r0, [r4, #0]
 800707e:	1821      	adds	r1, r4, r0
 8007080:	428b      	cmp	r3, r1
 8007082:	bf04      	itt	eq
 8007084:	6819      	ldreq	r1, [r3, #0]
 8007086:	685b      	ldreq	r3, [r3, #4]
 8007088:	6063      	str	r3, [r4, #4]
 800708a:	bf04      	itt	eq
 800708c:	1809      	addeq	r1, r1, r0
 800708e:	6021      	streq	r1, [r4, #0]
 8007090:	6054      	str	r4, [r2, #4]
 8007092:	e7ca      	b.n	800702a <_free_r+0x22>
 8007094:	bd38      	pop	{r3, r4, r5, pc}
 8007096:	bf00      	nop
 8007098:	200009f4 	.word	0x200009f4

0800709c <malloc>:
 800709c:	4b02      	ldr	r3, [pc, #8]	@ (80070a8 <malloc+0xc>)
 800709e:	4601      	mov	r1, r0
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	f000 b825 	b.w	80070f0 <_malloc_r>
 80070a6:	bf00      	nop
 80070a8:	20000018 	.word	0x20000018

080070ac <sbrk_aligned>:
 80070ac:	b570      	push	{r4, r5, r6, lr}
 80070ae:	4e0f      	ldr	r6, [pc, #60]	@ (80070ec <sbrk_aligned+0x40>)
 80070b0:	460c      	mov	r4, r1
 80070b2:	6831      	ldr	r1, [r6, #0]
 80070b4:	4605      	mov	r5, r0
 80070b6:	b911      	cbnz	r1, 80070be <sbrk_aligned+0x12>
 80070b8:	f000 feaa 	bl	8007e10 <_sbrk_r>
 80070bc:	6030      	str	r0, [r6, #0]
 80070be:	4621      	mov	r1, r4
 80070c0:	4628      	mov	r0, r5
 80070c2:	f000 fea5 	bl	8007e10 <_sbrk_r>
 80070c6:	1c43      	adds	r3, r0, #1
 80070c8:	d103      	bne.n	80070d2 <sbrk_aligned+0x26>
 80070ca:	f04f 34ff 	mov.w	r4, #4294967295
 80070ce:	4620      	mov	r0, r4
 80070d0:	bd70      	pop	{r4, r5, r6, pc}
 80070d2:	1cc4      	adds	r4, r0, #3
 80070d4:	f024 0403 	bic.w	r4, r4, #3
 80070d8:	42a0      	cmp	r0, r4
 80070da:	d0f8      	beq.n	80070ce <sbrk_aligned+0x22>
 80070dc:	1a21      	subs	r1, r4, r0
 80070de:	4628      	mov	r0, r5
 80070e0:	f000 fe96 	bl	8007e10 <_sbrk_r>
 80070e4:	3001      	adds	r0, #1
 80070e6:	d1f2      	bne.n	80070ce <sbrk_aligned+0x22>
 80070e8:	e7ef      	b.n	80070ca <sbrk_aligned+0x1e>
 80070ea:	bf00      	nop
 80070ec:	200009f0 	.word	0x200009f0

080070f0 <_malloc_r>:
 80070f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f4:	1ccd      	adds	r5, r1, #3
 80070f6:	f025 0503 	bic.w	r5, r5, #3
 80070fa:	3508      	adds	r5, #8
 80070fc:	2d0c      	cmp	r5, #12
 80070fe:	bf38      	it	cc
 8007100:	250c      	movcc	r5, #12
 8007102:	2d00      	cmp	r5, #0
 8007104:	4606      	mov	r6, r0
 8007106:	db01      	blt.n	800710c <_malloc_r+0x1c>
 8007108:	42a9      	cmp	r1, r5
 800710a:	d904      	bls.n	8007116 <_malloc_r+0x26>
 800710c:	230c      	movs	r3, #12
 800710e:	6033      	str	r3, [r6, #0]
 8007110:	2000      	movs	r0, #0
 8007112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071ec <_malloc_r+0xfc>
 800711a:	f000 f869 	bl	80071f0 <__malloc_lock>
 800711e:	f8d8 3000 	ldr.w	r3, [r8]
 8007122:	461c      	mov	r4, r3
 8007124:	bb44      	cbnz	r4, 8007178 <_malloc_r+0x88>
 8007126:	4629      	mov	r1, r5
 8007128:	4630      	mov	r0, r6
 800712a:	f7ff ffbf 	bl	80070ac <sbrk_aligned>
 800712e:	1c43      	adds	r3, r0, #1
 8007130:	4604      	mov	r4, r0
 8007132:	d158      	bne.n	80071e6 <_malloc_r+0xf6>
 8007134:	f8d8 4000 	ldr.w	r4, [r8]
 8007138:	4627      	mov	r7, r4
 800713a:	2f00      	cmp	r7, #0
 800713c:	d143      	bne.n	80071c6 <_malloc_r+0xd6>
 800713e:	2c00      	cmp	r4, #0
 8007140:	d04b      	beq.n	80071da <_malloc_r+0xea>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	4639      	mov	r1, r7
 8007146:	4630      	mov	r0, r6
 8007148:	eb04 0903 	add.w	r9, r4, r3
 800714c:	f000 fe60 	bl	8007e10 <_sbrk_r>
 8007150:	4581      	cmp	r9, r0
 8007152:	d142      	bne.n	80071da <_malloc_r+0xea>
 8007154:	6821      	ldr	r1, [r4, #0]
 8007156:	1a6d      	subs	r5, r5, r1
 8007158:	4629      	mov	r1, r5
 800715a:	4630      	mov	r0, r6
 800715c:	f7ff ffa6 	bl	80070ac <sbrk_aligned>
 8007160:	3001      	adds	r0, #1
 8007162:	d03a      	beq.n	80071da <_malloc_r+0xea>
 8007164:	6823      	ldr	r3, [r4, #0]
 8007166:	442b      	add	r3, r5
 8007168:	6023      	str	r3, [r4, #0]
 800716a:	f8d8 3000 	ldr.w	r3, [r8]
 800716e:	685a      	ldr	r2, [r3, #4]
 8007170:	bb62      	cbnz	r2, 80071cc <_malloc_r+0xdc>
 8007172:	f8c8 7000 	str.w	r7, [r8]
 8007176:	e00f      	b.n	8007198 <_malloc_r+0xa8>
 8007178:	6822      	ldr	r2, [r4, #0]
 800717a:	1b52      	subs	r2, r2, r5
 800717c:	d420      	bmi.n	80071c0 <_malloc_r+0xd0>
 800717e:	2a0b      	cmp	r2, #11
 8007180:	d917      	bls.n	80071b2 <_malloc_r+0xc2>
 8007182:	1961      	adds	r1, r4, r5
 8007184:	42a3      	cmp	r3, r4
 8007186:	6025      	str	r5, [r4, #0]
 8007188:	bf18      	it	ne
 800718a:	6059      	strne	r1, [r3, #4]
 800718c:	6863      	ldr	r3, [r4, #4]
 800718e:	bf08      	it	eq
 8007190:	f8c8 1000 	streq.w	r1, [r8]
 8007194:	5162      	str	r2, [r4, r5]
 8007196:	604b      	str	r3, [r1, #4]
 8007198:	4630      	mov	r0, r6
 800719a:	f000 f82f 	bl	80071fc <__malloc_unlock>
 800719e:	f104 000b 	add.w	r0, r4, #11
 80071a2:	1d23      	adds	r3, r4, #4
 80071a4:	f020 0007 	bic.w	r0, r0, #7
 80071a8:	1ac2      	subs	r2, r0, r3
 80071aa:	bf1c      	itt	ne
 80071ac:	1a1b      	subne	r3, r3, r0
 80071ae:	50a3      	strne	r3, [r4, r2]
 80071b0:	e7af      	b.n	8007112 <_malloc_r+0x22>
 80071b2:	6862      	ldr	r2, [r4, #4]
 80071b4:	42a3      	cmp	r3, r4
 80071b6:	bf0c      	ite	eq
 80071b8:	f8c8 2000 	streq.w	r2, [r8]
 80071bc:	605a      	strne	r2, [r3, #4]
 80071be:	e7eb      	b.n	8007198 <_malloc_r+0xa8>
 80071c0:	4623      	mov	r3, r4
 80071c2:	6864      	ldr	r4, [r4, #4]
 80071c4:	e7ae      	b.n	8007124 <_malloc_r+0x34>
 80071c6:	463c      	mov	r4, r7
 80071c8:	687f      	ldr	r7, [r7, #4]
 80071ca:	e7b6      	b.n	800713a <_malloc_r+0x4a>
 80071cc:	461a      	mov	r2, r3
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	42a3      	cmp	r3, r4
 80071d2:	d1fb      	bne.n	80071cc <_malloc_r+0xdc>
 80071d4:	2300      	movs	r3, #0
 80071d6:	6053      	str	r3, [r2, #4]
 80071d8:	e7de      	b.n	8007198 <_malloc_r+0xa8>
 80071da:	230c      	movs	r3, #12
 80071dc:	6033      	str	r3, [r6, #0]
 80071de:	4630      	mov	r0, r6
 80071e0:	f000 f80c 	bl	80071fc <__malloc_unlock>
 80071e4:	e794      	b.n	8007110 <_malloc_r+0x20>
 80071e6:	6005      	str	r5, [r0, #0]
 80071e8:	e7d6      	b.n	8007198 <_malloc_r+0xa8>
 80071ea:	bf00      	nop
 80071ec:	200009f4 	.word	0x200009f4

080071f0 <__malloc_lock>:
 80071f0:	4801      	ldr	r0, [pc, #4]	@ (80071f8 <__malloc_lock+0x8>)
 80071f2:	f7ff b8b8 	b.w	8006366 <__retarget_lock_acquire_recursive>
 80071f6:	bf00      	nop
 80071f8:	200009ec 	.word	0x200009ec

080071fc <__malloc_unlock>:
 80071fc:	4801      	ldr	r0, [pc, #4]	@ (8007204 <__malloc_unlock+0x8>)
 80071fe:	f7ff b8b3 	b.w	8006368 <__retarget_lock_release_recursive>
 8007202:	bf00      	nop
 8007204:	200009ec 	.word	0x200009ec

08007208 <_Balloc>:
 8007208:	b570      	push	{r4, r5, r6, lr}
 800720a:	69c6      	ldr	r6, [r0, #28]
 800720c:	4604      	mov	r4, r0
 800720e:	460d      	mov	r5, r1
 8007210:	b976      	cbnz	r6, 8007230 <_Balloc+0x28>
 8007212:	2010      	movs	r0, #16
 8007214:	f7ff ff42 	bl	800709c <malloc>
 8007218:	4602      	mov	r2, r0
 800721a:	61e0      	str	r0, [r4, #28]
 800721c:	b920      	cbnz	r0, 8007228 <_Balloc+0x20>
 800721e:	4b18      	ldr	r3, [pc, #96]	@ (8007280 <_Balloc+0x78>)
 8007220:	4818      	ldr	r0, [pc, #96]	@ (8007284 <_Balloc+0x7c>)
 8007222:	216b      	movs	r1, #107	@ 0x6b
 8007224:	f000 fe12 	bl	8007e4c <__assert_func>
 8007228:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800722c:	6006      	str	r6, [r0, #0]
 800722e:	60c6      	str	r6, [r0, #12]
 8007230:	69e6      	ldr	r6, [r4, #28]
 8007232:	68f3      	ldr	r3, [r6, #12]
 8007234:	b183      	cbz	r3, 8007258 <_Balloc+0x50>
 8007236:	69e3      	ldr	r3, [r4, #28]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800723e:	b9b8      	cbnz	r0, 8007270 <_Balloc+0x68>
 8007240:	2101      	movs	r1, #1
 8007242:	fa01 f605 	lsl.w	r6, r1, r5
 8007246:	1d72      	adds	r2, r6, #5
 8007248:	0092      	lsls	r2, r2, #2
 800724a:	4620      	mov	r0, r4
 800724c:	f000 fe1c 	bl	8007e88 <_calloc_r>
 8007250:	b160      	cbz	r0, 800726c <_Balloc+0x64>
 8007252:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007256:	e00e      	b.n	8007276 <_Balloc+0x6e>
 8007258:	2221      	movs	r2, #33	@ 0x21
 800725a:	2104      	movs	r1, #4
 800725c:	4620      	mov	r0, r4
 800725e:	f000 fe13 	bl	8007e88 <_calloc_r>
 8007262:	69e3      	ldr	r3, [r4, #28]
 8007264:	60f0      	str	r0, [r6, #12]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e4      	bne.n	8007236 <_Balloc+0x2e>
 800726c:	2000      	movs	r0, #0
 800726e:	bd70      	pop	{r4, r5, r6, pc}
 8007270:	6802      	ldr	r2, [r0, #0]
 8007272:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007276:	2300      	movs	r3, #0
 8007278:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800727c:	e7f7      	b.n	800726e <_Balloc+0x66>
 800727e:	bf00      	nop
 8007280:	080084e9 	.word	0x080084e9
 8007284:	08008569 	.word	0x08008569

08007288 <_Bfree>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	69c6      	ldr	r6, [r0, #28]
 800728c:	4605      	mov	r5, r0
 800728e:	460c      	mov	r4, r1
 8007290:	b976      	cbnz	r6, 80072b0 <_Bfree+0x28>
 8007292:	2010      	movs	r0, #16
 8007294:	f7ff ff02 	bl	800709c <malloc>
 8007298:	4602      	mov	r2, r0
 800729a:	61e8      	str	r0, [r5, #28]
 800729c:	b920      	cbnz	r0, 80072a8 <_Bfree+0x20>
 800729e:	4b09      	ldr	r3, [pc, #36]	@ (80072c4 <_Bfree+0x3c>)
 80072a0:	4809      	ldr	r0, [pc, #36]	@ (80072c8 <_Bfree+0x40>)
 80072a2:	218f      	movs	r1, #143	@ 0x8f
 80072a4:	f000 fdd2 	bl	8007e4c <__assert_func>
 80072a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072ac:	6006      	str	r6, [r0, #0]
 80072ae:	60c6      	str	r6, [r0, #12]
 80072b0:	b13c      	cbz	r4, 80072c2 <_Bfree+0x3a>
 80072b2:	69eb      	ldr	r3, [r5, #28]
 80072b4:	6862      	ldr	r2, [r4, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072bc:	6021      	str	r1, [r4, #0]
 80072be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072c2:	bd70      	pop	{r4, r5, r6, pc}
 80072c4:	080084e9 	.word	0x080084e9
 80072c8:	08008569 	.word	0x08008569

080072cc <__multadd>:
 80072cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d0:	690d      	ldr	r5, [r1, #16]
 80072d2:	4607      	mov	r7, r0
 80072d4:	460c      	mov	r4, r1
 80072d6:	461e      	mov	r6, r3
 80072d8:	f101 0c14 	add.w	ip, r1, #20
 80072dc:	2000      	movs	r0, #0
 80072de:	f8dc 3000 	ldr.w	r3, [ip]
 80072e2:	b299      	uxth	r1, r3
 80072e4:	fb02 6101 	mla	r1, r2, r1, r6
 80072e8:	0c1e      	lsrs	r6, r3, #16
 80072ea:	0c0b      	lsrs	r3, r1, #16
 80072ec:	fb02 3306 	mla	r3, r2, r6, r3
 80072f0:	b289      	uxth	r1, r1
 80072f2:	3001      	adds	r0, #1
 80072f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80072f8:	4285      	cmp	r5, r0
 80072fa:	f84c 1b04 	str.w	r1, [ip], #4
 80072fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007302:	dcec      	bgt.n	80072de <__multadd+0x12>
 8007304:	b30e      	cbz	r6, 800734a <__multadd+0x7e>
 8007306:	68a3      	ldr	r3, [r4, #8]
 8007308:	42ab      	cmp	r3, r5
 800730a:	dc19      	bgt.n	8007340 <__multadd+0x74>
 800730c:	6861      	ldr	r1, [r4, #4]
 800730e:	4638      	mov	r0, r7
 8007310:	3101      	adds	r1, #1
 8007312:	f7ff ff79 	bl	8007208 <_Balloc>
 8007316:	4680      	mov	r8, r0
 8007318:	b928      	cbnz	r0, 8007326 <__multadd+0x5a>
 800731a:	4602      	mov	r2, r0
 800731c:	4b0c      	ldr	r3, [pc, #48]	@ (8007350 <__multadd+0x84>)
 800731e:	480d      	ldr	r0, [pc, #52]	@ (8007354 <__multadd+0x88>)
 8007320:	21ba      	movs	r1, #186	@ 0xba
 8007322:	f000 fd93 	bl	8007e4c <__assert_func>
 8007326:	6922      	ldr	r2, [r4, #16]
 8007328:	3202      	adds	r2, #2
 800732a:	f104 010c 	add.w	r1, r4, #12
 800732e:	0092      	lsls	r2, r2, #2
 8007330:	300c      	adds	r0, #12
 8007332:	f000 fd7d 	bl	8007e30 <memcpy>
 8007336:	4621      	mov	r1, r4
 8007338:	4638      	mov	r0, r7
 800733a:	f7ff ffa5 	bl	8007288 <_Bfree>
 800733e:	4644      	mov	r4, r8
 8007340:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007344:	3501      	adds	r5, #1
 8007346:	615e      	str	r6, [r3, #20]
 8007348:	6125      	str	r5, [r4, #16]
 800734a:	4620      	mov	r0, r4
 800734c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007350:	08008558 	.word	0x08008558
 8007354:	08008569 	.word	0x08008569

08007358 <__hi0bits>:
 8007358:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800735c:	4603      	mov	r3, r0
 800735e:	bf36      	itet	cc
 8007360:	0403      	lslcc	r3, r0, #16
 8007362:	2000      	movcs	r0, #0
 8007364:	2010      	movcc	r0, #16
 8007366:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800736a:	bf3c      	itt	cc
 800736c:	021b      	lslcc	r3, r3, #8
 800736e:	3008      	addcc	r0, #8
 8007370:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007374:	bf3c      	itt	cc
 8007376:	011b      	lslcc	r3, r3, #4
 8007378:	3004      	addcc	r0, #4
 800737a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800737e:	bf3c      	itt	cc
 8007380:	009b      	lslcc	r3, r3, #2
 8007382:	3002      	addcc	r0, #2
 8007384:	2b00      	cmp	r3, #0
 8007386:	db05      	blt.n	8007394 <__hi0bits+0x3c>
 8007388:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800738c:	f100 0001 	add.w	r0, r0, #1
 8007390:	bf08      	it	eq
 8007392:	2020      	moveq	r0, #32
 8007394:	4770      	bx	lr

08007396 <__lo0bits>:
 8007396:	6803      	ldr	r3, [r0, #0]
 8007398:	4602      	mov	r2, r0
 800739a:	f013 0007 	ands.w	r0, r3, #7
 800739e:	d00b      	beq.n	80073b8 <__lo0bits+0x22>
 80073a0:	07d9      	lsls	r1, r3, #31
 80073a2:	d421      	bmi.n	80073e8 <__lo0bits+0x52>
 80073a4:	0798      	lsls	r0, r3, #30
 80073a6:	bf49      	itett	mi
 80073a8:	085b      	lsrmi	r3, r3, #1
 80073aa:	089b      	lsrpl	r3, r3, #2
 80073ac:	2001      	movmi	r0, #1
 80073ae:	6013      	strmi	r3, [r2, #0]
 80073b0:	bf5c      	itt	pl
 80073b2:	6013      	strpl	r3, [r2, #0]
 80073b4:	2002      	movpl	r0, #2
 80073b6:	4770      	bx	lr
 80073b8:	b299      	uxth	r1, r3
 80073ba:	b909      	cbnz	r1, 80073c0 <__lo0bits+0x2a>
 80073bc:	0c1b      	lsrs	r3, r3, #16
 80073be:	2010      	movs	r0, #16
 80073c0:	b2d9      	uxtb	r1, r3
 80073c2:	b909      	cbnz	r1, 80073c8 <__lo0bits+0x32>
 80073c4:	3008      	adds	r0, #8
 80073c6:	0a1b      	lsrs	r3, r3, #8
 80073c8:	0719      	lsls	r1, r3, #28
 80073ca:	bf04      	itt	eq
 80073cc:	091b      	lsreq	r3, r3, #4
 80073ce:	3004      	addeq	r0, #4
 80073d0:	0799      	lsls	r1, r3, #30
 80073d2:	bf04      	itt	eq
 80073d4:	089b      	lsreq	r3, r3, #2
 80073d6:	3002      	addeq	r0, #2
 80073d8:	07d9      	lsls	r1, r3, #31
 80073da:	d403      	bmi.n	80073e4 <__lo0bits+0x4e>
 80073dc:	085b      	lsrs	r3, r3, #1
 80073de:	f100 0001 	add.w	r0, r0, #1
 80073e2:	d003      	beq.n	80073ec <__lo0bits+0x56>
 80073e4:	6013      	str	r3, [r2, #0]
 80073e6:	4770      	bx	lr
 80073e8:	2000      	movs	r0, #0
 80073ea:	4770      	bx	lr
 80073ec:	2020      	movs	r0, #32
 80073ee:	4770      	bx	lr

080073f0 <__i2b>:
 80073f0:	b510      	push	{r4, lr}
 80073f2:	460c      	mov	r4, r1
 80073f4:	2101      	movs	r1, #1
 80073f6:	f7ff ff07 	bl	8007208 <_Balloc>
 80073fa:	4602      	mov	r2, r0
 80073fc:	b928      	cbnz	r0, 800740a <__i2b+0x1a>
 80073fe:	4b05      	ldr	r3, [pc, #20]	@ (8007414 <__i2b+0x24>)
 8007400:	4805      	ldr	r0, [pc, #20]	@ (8007418 <__i2b+0x28>)
 8007402:	f240 1145 	movw	r1, #325	@ 0x145
 8007406:	f000 fd21 	bl	8007e4c <__assert_func>
 800740a:	2301      	movs	r3, #1
 800740c:	6144      	str	r4, [r0, #20]
 800740e:	6103      	str	r3, [r0, #16]
 8007410:	bd10      	pop	{r4, pc}
 8007412:	bf00      	nop
 8007414:	08008558 	.word	0x08008558
 8007418:	08008569 	.word	0x08008569

0800741c <__multiply>:
 800741c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007420:	4614      	mov	r4, r2
 8007422:	690a      	ldr	r2, [r1, #16]
 8007424:	6923      	ldr	r3, [r4, #16]
 8007426:	429a      	cmp	r2, r3
 8007428:	bfa8      	it	ge
 800742a:	4623      	movge	r3, r4
 800742c:	460f      	mov	r7, r1
 800742e:	bfa4      	itt	ge
 8007430:	460c      	movge	r4, r1
 8007432:	461f      	movge	r7, r3
 8007434:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007438:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800743c:	68a3      	ldr	r3, [r4, #8]
 800743e:	6861      	ldr	r1, [r4, #4]
 8007440:	eb0a 0609 	add.w	r6, sl, r9
 8007444:	42b3      	cmp	r3, r6
 8007446:	b085      	sub	sp, #20
 8007448:	bfb8      	it	lt
 800744a:	3101      	addlt	r1, #1
 800744c:	f7ff fedc 	bl	8007208 <_Balloc>
 8007450:	b930      	cbnz	r0, 8007460 <__multiply+0x44>
 8007452:	4602      	mov	r2, r0
 8007454:	4b44      	ldr	r3, [pc, #272]	@ (8007568 <__multiply+0x14c>)
 8007456:	4845      	ldr	r0, [pc, #276]	@ (800756c <__multiply+0x150>)
 8007458:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800745c:	f000 fcf6 	bl	8007e4c <__assert_func>
 8007460:	f100 0514 	add.w	r5, r0, #20
 8007464:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007468:	462b      	mov	r3, r5
 800746a:	2200      	movs	r2, #0
 800746c:	4543      	cmp	r3, r8
 800746e:	d321      	bcc.n	80074b4 <__multiply+0x98>
 8007470:	f107 0114 	add.w	r1, r7, #20
 8007474:	f104 0214 	add.w	r2, r4, #20
 8007478:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800747c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007480:	9302      	str	r3, [sp, #8]
 8007482:	1b13      	subs	r3, r2, r4
 8007484:	3b15      	subs	r3, #21
 8007486:	f023 0303 	bic.w	r3, r3, #3
 800748a:	3304      	adds	r3, #4
 800748c:	f104 0715 	add.w	r7, r4, #21
 8007490:	42ba      	cmp	r2, r7
 8007492:	bf38      	it	cc
 8007494:	2304      	movcc	r3, #4
 8007496:	9301      	str	r3, [sp, #4]
 8007498:	9b02      	ldr	r3, [sp, #8]
 800749a:	9103      	str	r1, [sp, #12]
 800749c:	428b      	cmp	r3, r1
 800749e:	d80c      	bhi.n	80074ba <__multiply+0x9e>
 80074a0:	2e00      	cmp	r6, #0
 80074a2:	dd03      	ble.n	80074ac <__multiply+0x90>
 80074a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d05b      	beq.n	8007564 <__multiply+0x148>
 80074ac:	6106      	str	r6, [r0, #16]
 80074ae:	b005      	add	sp, #20
 80074b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074b4:	f843 2b04 	str.w	r2, [r3], #4
 80074b8:	e7d8      	b.n	800746c <__multiply+0x50>
 80074ba:	f8b1 a000 	ldrh.w	sl, [r1]
 80074be:	f1ba 0f00 	cmp.w	sl, #0
 80074c2:	d024      	beq.n	800750e <__multiply+0xf2>
 80074c4:	f104 0e14 	add.w	lr, r4, #20
 80074c8:	46a9      	mov	r9, r5
 80074ca:	f04f 0c00 	mov.w	ip, #0
 80074ce:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074d2:	f8d9 3000 	ldr.w	r3, [r9]
 80074d6:	fa1f fb87 	uxth.w	fp, r7
 80074da:	b29b      	uxth	r3, r3
 80074dc:	fb0a 330b 	mla	r3, sl, fp, r3
 80074e0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80074e4:	f8d9 7000 	ldr.w	r7, [r9]
 80074e8:	4463      	add	r3, ip
 80074ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80074ee:	fb0a c70b 	mla	r7, sl, fp, ip
 80074f2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80074f6:	b29b      	uxth	r3, r3
 80074f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80074fc:	4572      	cmp	r2, lr
 80074fe:	f849 3b04 	str.w	r3, [r9], #4
 8007502:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007506:	d8e2      	bhi.n	80074ce <__multiply+0xb2>
 8007508:	9b01      	ldr	r3, [sp, #4]
 800750a:	f845 c003 	str.w	ip, [r5, r3]
 800750e:	9b03      	ldr	r3, [sp, #12]
 8007510:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007514:	3104      	adds	r1, #4
 8007516:	f1b9 0f00 	cmp.w	r9, #0
 800751a:	d021      	beq.n	8007560 <__multiply+0x144>
 800751c:	682b      	ldr	r3, [r5, #0]
 800751e:	f104 0c14 	add.w	ip, r4, #20
 8007522:	46ae      	mov	lr, r5
 8007524:	f04f 0a00 	mov.w	sl, #0
 8007528:	f8bc b000 	ldrh.w	fp, [ip]
 800752c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007530:	fb09 770b 	mla	r7, r9, fp, r7
 8007534:	4457      	add	r7, sl
 8007536:	b29b      	uxth	r3, r3
 8007538:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800753c:	f84e 3b04 	str.w	r3, [lr], #4
 8007540:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007544:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007548:	f8be 3000 	ldrh.w	r3, [lr]
 800754c:	fb09 330a 	mla	r3, r9, sl, r3
 8007550:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007554:	4562      	cmp	r2, ip
 8007556:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800755a:	d8e5      	bhi.n	8007528 <__multiply+0x10c>
 800755c:	9f01      	ldr	r7, [sp, #4]
 800755e:	51eb      	str	r3, [r5, r7]
 8007560:	3504      	adds	r5, #4
 8007562:	e799      	b.n	8007498 <__multiply+0x7c>
 8007564:	3e01      	subs	r6, #1
 8007566:	e79b      	b.n	80074a0 <__multiply+0x84>
 8007568:	08008558 	.word	0x08008558
 800756c:	08008569 	.word	0x08008569

08007570 <__pow5mult>:
 8007570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007574:	4615      	mov	r5, r2
 8007576:	f012 0203 	ands.w	r2, r2, #3
 800757a:	4607      	mov	r7, r0
 800757c:	460e      	mov	r6, r1
 800757e:	d007      	beq.n	8007590 <__pow5mult+0x20>
 8007580:	4c25      	ldr	r4, [pc, #148]	@ (8007618 <__pow5mult+0xa8>)
 8007582:	3a01      	subs	r2, #1
 8007584:	2300      	movs	r3, #0
 8007586:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800758a:	f7ff fe9f 	bl	80072cc <__multadd>
 800758e:	4606      	mov	r6, r0
 8007590:	10ad      	asrs	r5, r5, #2
 8007592:	d03d      	beq.n	8007610 <__pow5mult+0xa0>
 8007594:	69fc      	ldr	r4, [r7, #28]
 8007596:	b97c      	cbnz	r4, 80075b8 <__pow5mult+0x48>
 8007598:	2010      	movs	r0, #16
 800759a:	f7ff fd7f 	bl	800709c <malloc>
 800759e:	4602      	mov	r2, r0
 80075a0:	61f8      	str	r0, [r7, #28]
 80075a2:	b928      	cbnz	r0, 80075b0 <__pow5mult+0x40>
 80075a4:	4b1d      	ldr	r3, [pc, #116]	@ (800761c <__pow5mult+0xac>)
 80075a6:	481e      	ldr	r0, [pc, #120]	@ (8007620 <__pow5mult+0xb0>)
 80075a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80075ac:	f000 fc4e 	bl	8007e4c <__assert_func>
 80075b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075b4:	6004      	str	r4, [r0, #0]
 80075b6:	60c4      	str	r4, [r0, #12]
 80075b8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80075bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075c0:	b94c      	cbnz	r4, 80075d6 <__pow5mult+0x66>
 80075c2:	f240 2171 	movw	r1, #625	@ 0x271
 80075c6:	4638      	mov	r0, r7
 80075c8:	f7ff ff12 	bl	80073f0 <__i2b>
 80075cc:	2300      	movs	r3, #0
 80075ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80075d2:	4604      	mov	r4, r0
 80075d4:	6003      	str	r3, [r0, #0]
 80075d6:	f04f 0900 	mov.w	r9, #0
 80075da:	07eb      	lsls	r3, r5, #31
 80075dc:	d50a      	bpl.n	80075f4 <__pow5mult+0x84>
 80075de:	4631      	mov	r1, r6
 80075e0:	4622      	mov	r2, r4
 80075e2:	4638      	mov	r0, r7
 80075e4:	f7ff ff1a 	bl	800741c <__multiply>
 80075e8:	4631      	mov	r1, r6
 80075ea:	4680      	mov	r8, r0
 80075ec:	4638      	mov	r0, r7
 80075ee:	f7ff fe4b 	bl	8007288 <_Bfree>
 80075f2:	4646      	mov	r6, r8
 80075f4:	106d      	asrs	r5, r5, #1
 80075f6:	d00b      	beq.n	8007610 <__pow5mult+0xa0>
 80075f8:	6820      	ldr	r0, [r4, #0]
 80075fa:	b938      	cbnz	r0, 800760c <__pow5mult+0x9c>
 80075fc:	4622      	mov	r2, r4
 80075fe:	4621      	mov	r1, r4
 8007600:	4638      	mov	r0, r7
 8007602:	f7ff ff0b 	bl	800741c <__multiply>
 8007606:	6020      	str	r0, [r4, #0]
 8007608:	f8c0 9000 	str.w	r9, [r0]
 800760c:	4604      	mov	r4, r0
 800760e:	e7e4      	b.n	80075da <__pow5mult+0x6a>
 8007610:	4630      	mov	r0, r6
 8007612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007616:	bf00      	nop
 8007618:	080085c4 	.word	0x080085c4
 800761c:	080084e9 	.word	0x080084e9
 8007620:	08008569 	.word	0x08008569

08007624 <__lshift>:
 8007624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007628:	460c      	mov	r4, r1
 800762a:	6849      	ldr	r1, [r1, #4]
 800762c:	6923      	ldr	r3, [r4, #16]
 800762e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007632:	68a3      	ldr	r3, [r4, #8]
 8007634:	4607      	mov	r7, r0
 8007636:	4691      	mov	r9, r2
 8007638:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800763c:	f108 0601 	add.w	r6, r8, #1
 8007640:	42b3      	cmp	r3, r6
 8007642:	db0b      	blt.n	800765c <__lshift+0x38>
 8007644:	4638      	mov	r0, r7
 8007646:	f7ff fddf 	bl	8007208 <_Balloc>
 800764a:	4605      	mov	r5, r0
 800764c:	b948      	cbnz	r0, 8007662 <__lshift+0x3e>
 800764e:	4602      	mov	r2, r0
 8007650:	4b28      	ldr	r3, [pc, #160]	@ (80076f4 <__lshift+0xd0>)
 8007652:	4829      	ldr	r0, [pc, #164]	@ (80076f8 <__lshift+0xd4>)
 8007654:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007658:	f000 fbf8 	bl	8007e4c <__assert_func>
 800765c:	3101      	adds	r1, #1
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	e7ee      	b.n	8007640 <__lshift+0x1c>
 8007662:	2300      	movs	r3, #0
 8007664:	f100 0114 	add.w	r1, r0, #20
 8007668:	f100 0210 	add.w	r2, r0, #16
 800766c:	4618      	mov	r0, r3
 800766e:	4553      	cmp	r3, sl
 8007670:	db33      	blt.n	80076da <__lshift+0xb6>
 8007672:	6920      	ldr	r0, [r4, #16]
 8007674:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007678:	f104 0314 	add.w	r3, r4, #20
 800767c:	f019 091f 	ands.w	r9, r9, #31
 8007680:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007684:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007688:	d02b      	beq.n	80076e2 <__lshift+0xbe>
 800768a:	f1c9 0e20 	rsb	lr, r9, #32
 800768e:	468a      	mov	sl, r1
 8007690:	2200      	movs	r2, #0
 8007692:	6818      	ldr	r0, [r3, #0]
 8007694:	fa00 f009 	lsl.w	r0, r0, r9
 8007698:	4310      	orrs	r0, r2
 800769a:	f84a 0b04 	str.w	r0, [sl], #4
 800769e:	f853 2b04 	ldr.w	r2, [r3], #4
 80076a2:	459c      	cmp	ip, r3
 80076a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80076a8:	d8f3      	bhi.n	8007692 <__lshift+0x6e>
 80076aa:	ebac 0304 	sub.w	r3, ip, r4
 80076ae:	3b15      	subs	r3, #21
 80076b0:	f023 0303 	bic.w	r3, r3, #3
 80076b4:	3304      	adds	r3, #4
 80076b6:	f104 0015 	add.w	r0, r4, #21
 80076ba:	4584      	cmp	ip, r0
 80076bc:	bf38      	it	cc
 80076be:	2304      	movcc	r3, #4
 80076c0:	50ca      	str	r2, [r1, r3]
 80076c2:	b10a      	cbz	r2, 80076c8 <__lshift+0xa4>
 80076c4:	f108 0602 	add.w	r6, r8, #2
 80076c8:	3e01      	subs	r6, #1
 80076ca:	4638      	mov	r0, r7
 80076cc:	612e      	str	r6, [r5, #16]
 80076ce:	4621      	mov	r1, r4
 80076d0:	f7ff fdda 	bl	8007288 <_Bfree>
 80076d4:	4628      	mov	r0, r5
 80076d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076da:	f842 0f04 	str.w	r0, [r2, #4]!
 80076de:	3301      	adds	r3, #1
 80076e0:	e7c5      	b.n	800766e <__lshift+0x4a>
 80076e2:	3904      	subs	r1, #4
 80076e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80076e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80076ec:	459c      	cmp	ip, r3
 80076ee:	d8f9      	bhi.n	80076e4 <__lshift+0xc0>
 80076f0:	e7ea      	b.n	80076c8 <__lshift+0xa4>
 80076f2:	bf00      	nop
 80076f4:	08008558 	.word	0x08008558
 80076f8:	08008569 	.word	0x08008569

080076fc <__mcmp>:
 80076fc:	690a      	ldr	r2, [r1, #16]
 80076fe:	4603      	mov	r3, r0
 8007700:	6900      	ldr	r0, [r0, #16]
 8007702:	1a80      	subs	r0, r0, r2
 8007704:	b530      	push	{r4, r5, lr}
 8007706:	d10e      	bne.n	8007726 <__mcmp+0x2a>
 8007708:	3314      	adds	r3, #20
 800770a:	3114      	adds	r1, #20
 800770c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007710:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007714:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007718:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800771c:	4295      	cmp	r5, r2
 800771e:	d003      	beq.n	8007728 <__mcmp+0x2c>
 8007720:	d205      	bcs.n	800772e <__mcmp+0x32>
 8007722:	f04f 30ff 	mov.w	r0, #4294967295
 8007726:	bd30      	pop	{r4, r5, pc}
 8007728:	42a3      	cmp	r3, r4
 800772a:	d3f3      	bcc.n	8007714 <__mcmp+0x18>
 800772c:	e7fb      	b.n	8007726 <__mcmp+0x2a>
 800772e:	2001      	movs	r0, #1
 8007730:	e7f9      	b.n	8007726 <__mcmp+0x2a>
	...

08007734 <__mdiff>:
 8007734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007738:	4689      	mov	r9, r1
 800773a:	4606      	mov	r6, r0
 800773c:	4611      	mov	r1, r2
 800773e:	4648      	mov	r0, r9
 8007740:	4614      	mov	r4, r2
 8007742:	f7ff ffdb 	bl	80076fc <__mcmp>
 8007746:	1e05      	subs	r5, r0, #0
 8007748:	d112      	bne.n	8007770 <__mdiff+0x3c>
 800774a:	4629      	mov	r1, r5
 800774c:	4630      	mov	r0, r6
 800774e:	f7ff fd5b 	bl	8007208 <_Balloc>
 8007752:	4602      	mov	r2, r0
 8007754:	b928      	cbnz	r0, 8007762 <__mdiff+0x2e>
 8007756:	4b3f      	ldr	r3, [pc, #252]	@ (8007854 <__mdiff+0x120>)
 8007758:	f240 2137 	movw	r1, #567	@ 0x237
 800775c:	483e      	ldr	r0, [pc, #248]	@ (8007858 <__mdiff+0x124>)
 800775e:	f000 fb75 	bl	8007e4c <__assert_func>
 8007762:	2301      	movs	r3, #1
 8007764:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007768:	4610      	mov	r0, r2
 800776a:	b003      	add	sp, #12
 800776c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007770:	bfbc      	itt	lt
 8007772:	464b      	movlt	r3, r9
 8007774:	46a1      	movlt	r9, r4
 8007776:	4630      	mov	r0, r6
 8007778:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800777c:	bfba      	itte	lt
 800777e:	461c      	movlt	r4, r3
 8007780:	2501      	movlt	r5, #1
 8007782:	2500      	movge	r5, #0
 8007784:	f7ff fd40 	bl	8007208 <_Balloc>
 8007788:	4602      	mov	r2, r0
 800778a:	b918      	cbnz	r0, 8007794 <__mdiff+0x60>
 800778c:	4b31      	ldr	r3, [pc, #196]	@ (8007854 <__mdiff+0x120>)
 800778e:	f240 2145 	movw	r1, #581	@ 0x245
 8007792:	e7e3      	b.n	800775c <__mdiff+0x28>
 8007794:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007798:	6926      	ldr	r6, [r4, #16]
 800779a:	60c5      	str	r5, [r0, #12]
 800779c:	f109 0310 	add.w	r3, r9, #16
 80077a0:	f109 0514 	add.w	r5, r9, #20
 80077a4:	f104 0e14 	add.w	lr, r4, #20
 80077a8:	f100 0b14 	add.w	fp, r0, #20
 80077ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80077b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80077b4:	9301      	str	r3, [sp, #4]
 80077b6:	46d9      	mov	r9, fp
 80077b8:	f04f 0c00 	mov.w	ip, #0
 80077bc:	9b01      	ldr	r3, [sp, #4]
 80077be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80077c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80077c6:	9301      	str	r3, [sp, #4]
 80077c8:	fa1f f38a 	uxth.w	r3, sl
 80077cc:	4619      	mov	r1, r3
 80077ce:	b283      	uxth	r3, r0
 80077d0:	1acb      	subs	r3, r1, r3
 80077d2:	0c00      	lsrs	r0, r0, #16
 80077d4:	4463      	add	r3, ip
 80077d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80077da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80077de:	b29b      	uxth	r3, r3
 80077e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80077e4:	4576      	cmp	r6, lr
 80077e6:	f849 3b04 	str.w	r3, [r9], #4
 80077ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077ee:	d8e5      	bhi.n	80077bc <__mdiff+0x88>
 80077f0:	1b33      	subs	r3, r6, r4
 80077f2:	3b15      	subs	r3, #21
 80077f4:	f023 0303 	bic.w	r3, r3, #3
 80077f8:	3415      	adds	r4, #21
 80077fa:	3304      	adds	r3, #4
 80077fc:	42a6      	cmp	r6, r4
 80077fe:	bf38      	it	cc
 8007800:	2304      	movcc	r3, #4
 8007802:	441d      	add	r5, r3
 8007804:	445b      	add	r3, fp
 8007806:	461e      	mov	r6, r3
 8007808:	462c      	mov	r4, r5
 800780a:	4544      	cmp	r4, r8
 800780c:	d30e      	bcc.n	800782c <__mdiff+0xf8>
 800780e:	f108 0103 	add.w	r1, r8, #3
 8007812:	1b49      	subs	r1, r1, r5
 8007814:	f021 0103 	bic.w	r1, r1, #3
 8007818:	3d03      	subs	r5, #3
 800781a:	45a8      	cmp	r8, r5
 800781c:	bf38      	it	cc
 800781e:	2100      	movcc	r1, #0
 8007820:	440b      	add	r3, r1
 8007822:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007826:	b191      	cbz	r1, 800784e <__mdiff+0x11a>
 8007828:	6117      	str	r7, [r2, #16]
 800782a:	e79d      	b.n	8007768 <__mdiff+0x34>
 800782c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007830:	46e6      	mov	lr, ip
 8007832:	0c08      	lsrs	r0, r1, #16
 8007834:	fa1c fc81 	uxtah	ip, ip, r1
 8007838:	4471      	add	r1, lr
 800783a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800783e:	b289      	uxth	r1, r1
 8007840:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007844:	f846 1b04 	str.w	r1, [r6], #4
 8007848:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800784c:	e7dd      	b.n	800780a <__mdiff+0xd6>
 800784e:	3f01      	subs	r7, #1
 8007850:	e7e7      	b.n	8007822 <__mdiff+0xee>
 8007852:	bf00      	nop
 8007854:	08008558 	.word	0x08008558
 8007858:	08008569 	.word	0x08008569

0800785c <__d2b>:
 800785c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007860:	460f      	mov	r7, r1
 8007862:	2101      	movs	r1, #1
 8007864:	ec59 8b10 	vmov	r8, r9, d0
 8007868:	4616      	mov	r6, r2
 800786a:	f7ff fccd 	bl	8007208 <_Balloc>
 800786e:	4604      	mov	r4, r0
 8007870:	b930      	cbnz	r0, 8007880 <__d2b+0x24>
 8007872:	4602      	mov	r2, r0
 8007874:	4b23      	ldr	r3, [pc, #140]	@ (8007904 <__d2b+0xa8>)
 8007876:	4824      	ldr	r0, [pc, #144]	@ (8007908 <__d2b+0xac>)
 8007878:	f240 310f 	movw	r1, #783	@ 0x30f
 800787c:	f000 fae6 	bl	8007e4c <__assert_func>
 8007880:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007884:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007888:	b10d      	cbz	r5, 800788e <__d2b+0x32>
 800788a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800788e:	9301      	str	r3, [sp, #4]
 8007890:	f1b8 0300 	subs.w	r3, r8, #0
 8007894:	d023      	beq.n	80078de <__d2b+0x82>
 8007896:	4668      	mov	r0, sp
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	f7ff fd7c 	bl	8007396 <__lo0bits>
 800789e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80078a2:	b1d0      	cbz	r0, 80078da <__d2b+0x7e>
 80078a4:	f1c0 0320 	rsb	r3, r0, #32
 80078a8:	fa02 f303 	lsl.w	r3, r2, r3
 80078ac:	430b      	orrs	r3, r1
 80078ae:	40c2      	lsrs	r2, r0
 80078b0:	6163      	str	r3, [r4, #20]
 80078b2:	9201      	str	r2, [sp, #4]
 80078b4:	9b01      	ldr	r3, [sp, #4]
 80078b6:	61a3      	str	r3, [r4, #24]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	bf0c      	ite	eq
 80078bc:	2201      	moveq	r2, #1
 80078be:	2202      	movne	r2, #2
 80078c0:	6122      	str	r2, [r4, #16]
 80078c2:	b1a5      	cbz	r5, 80078ee <__d2b+0x92>
 80078c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80078c8:	4405      	add	r5, r0
 80078ca:	603d      	str	r5, [r7, #0]
 80078cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80078d0:	6030      	str	r0, [r6, #0]
 80078d2:	4620      	mov	r0, r4
 80078d4:	b003      	add	sp, #12
 80078d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078da:	6161      	str	r1, [r4, #20]
 80078dc:	e7ea      	b.n	80078b4 <__d2b+0x58>
 80078de:	a801      	add	r0, sp, #4
 80078e0:	f7ff fd59 	bl	8007396 <__lo0bits>
 80078e4:	9b01      	ldr	r3, [sp, #4]
 80078e6:	6163      	str	r3, [r4, #20]
 80078e8:	3020      	adds	r0, #32
 80078ea:	2201      	movs	r2, #1
 80078ec:	e7e8      	b.n	80078c0 <__d2b+0x64>
 80078ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80078f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80078f6:	6038      	str	r0, [r7, #0]
 80078f8:	6918      	ldr	r0, [r3, #16]
 80078fa:	f7ff fd2d 	bl	8007358 <__hi0bits>
 80078fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007902:	e7e5      	b.n	80078d0 <__d2b+0x74>
 8007904:	08008558 	.word	0x08008558
 8007908:	08008569 	.word	0x08008569

0800790c <__sfputc_r>:
 800790c:	6893      	ldr	r3, [r2, #8]
 800790e:	3b01      	subs	r3, #1
 8007910:	2b00      	cmp	r3, #0
 8007912:	b410      	push	{r4}
 8007914:	6093      	str	r3, [r2, #8]
 8007916:	da08      	bge.n	800792a <__sfputc_r+0x1e>
 8007918:	6994      	ldr	r4, [r2, #24]
 800791a:	42a3      	cmp	r3, r4
 800791c:	db01      	blt.n	8007922 <__sfputc_r+0x16>
 800791e:	290a      	cmp	r1, #10
 8007920:	d103      	bne.n	800792a <__sfputc_r+0x1e>
 8007922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007926:	f000 b9df 	b.w	8007ce8 <__swbuf_r>
 800792a:	6813      	ldr	r3, [r2, #0]
 800792c:	1c58      	adds	r0, r3, #1
 800792e:	6010      	str	r0, [r2, #0]
 8007930:	7019      	strb	r1, [r3, #0]
 8007932:	4608      	mov	r0, r1
 8007934:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007938:	4770      	bx	lr

0800793a <__sfputs_r>:
 800793a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793c:	4606      	mov	r6, r0
 800793e:	460f      	mov	r7, r1
 8007940:	4614      	mov	r4, r2
 8007942:	18d5      	adds	r5, r2, r3
 8007944:	42ac      	cmp	r4, r5
 8007946:	d101      	bne.n	800794c <__sfputs_r+0x12>
 8007948:	2000      	movs	r0, #0
 800794a:	e007      	b.n	800795c <__sfputs_r+0x22>
 800794c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007950:	463a      	mov	r2, r7
 8007952:	4630      	mov	r0, r6
 8007954:	f7ff ffda 	bl	800790c <__sfputc_r>
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	d1f3      	bne.n	8007944 <__sfputs_r+0xa>
 800795c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007960 <_vfiprintf_r>:
 8007960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007964:	460d      	mov	r5, r1
 8007966:	b09d      	sub	sp, #116	@ 0x74
 8007968:	4614      	mov	r4, r2
 800796a:	4698      	mov	r8, r3
 800796c:	4606      	mov	r6, r0
 800796e:	b118      	cbz	r0, 8007978 <_vfiprintf_r+0x18>
 8007970:	6a03      	ldr	r3, [r0, #32]
 8007972:	b90b      	cbnz	r3, 8007978 <_vfiprintf_r+0x18>
 8007974:	f7fe fbee 	bl	8006154 <__sinit>
 8007978:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800797a:	07d9      	lsls	r1, r3, #31
 800797c:	d405      	bmi.n	800798a <_vfiprintf_r+0x2a>
 800797e:	89ab      	ldrh	r3, [r5, #12]
 8007980:	059a      	lsls	r2, r3, #22
 8007982:	d402      	bmi.n	800798a <_vfiprintf_r+0x2a>
 8007984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007986:	f7fe fcee 	bl	8006366 <__retarget_lock_acquire_recursive>
 800798a:	89ab      	ldrh	r3, [r5, #12]
 800798c:	071b      	lsls	r3, r3, #28
 800798e:	d501      	bpl.n	8007994 <_vfiprintf_r+0x34>
 8007990:	692b      	ldr	r3, [r5, #16]
 8007992:	b99b      	cbnz	r3, 80079bc <_vfiprintf_r+0x5c>
 8007994:	4629      	mov	r1, r5
 8007996:	4630      	mov	r0, r6
 8007998:	f000 f9e4 	bl	8007d64 <__swsetup_r>
 800799c:	b170      	cbz	r0, 80079bc <_vfiprintf_r+0x5c>
 800799e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079a0:	07dc      	lsls	r4, r3, #31
 80079a2:	d504      	bpl.n	80079ae <_vfiprintf_r+0x4e>
 80079a4:	f04f 30ff 	mov.w	r0, #4294967295
 80079a8:	b01d      	add	sp, #116	@ 0x74
 80079aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ae:	89ab      	ldrh	r3, [r5, #12]
 80079b0:	0598      	lsls	r0, r3, #22
 80079b2:	d4f7      	bmi.n	80079a4 <_vfiprintf_r+0x44>
 80079b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079b6:	f7fe fcd7 	bl	8006368 <__retarget_lock_release_recursive>
 80079ba:	e7f3      	b.n	80079a4 <_vfiprintf_r+0x44>
 80079bc:	2300      	movs	r3, #0
 80079be:	9309      	str	r3, [sp, #36]	@ 0x24
 80079c0:	2320      	movs	r3, #32
 80079c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80079c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80079ca:	2330      	movs	r3, #48	@ 0x30
 80079cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007b7c <_vfiprintf_r+0x21c>
 80079d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80079d4:	f04f 0901 	mov.w	r9, #1
 80079d8:	4623      	mov	r3, r4
 80079da:	469a      	mov	sl, r3
 80079dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079e0:	b10a      	cbz	r2, 80079e6 <_vfiprintf_r+0x86>
 80079e2:	2a25      	cmp	r2, #37	@ 0x25
 80079e4:	d1f9      	bne.n	80079da <_vfiprintf_r+0x7a>
 80079e6:	ebba 0b04 	subs.w	fp, sl, r4
 80079ea:	d00b      	beq.n	8007a04 <_vfiprintf_r+0xa4>
 80079ec:	465b      	mov	r3, fp
 80079ee:	4622      	mov	r2, r4
 80079f0:	4629      	mov	r1, r5
 80079f2:	4630      	mov	r0, r6
 80079f4:	f7ff ffa1 	bl	800793a <__sfputs_r>
 80079f8:	3001      	adds	r0, #1
 80079fa:	f000 80a7 	beq.w	8007b4c <_vfiprintf_r+0x1ec>
 80079fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a00:	445a      	add	r2, fp
 8007a02:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a04:	f89a 3000 	ldrb.w	r3, [sl]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 809f 	beq.w	8007b4c <_vfiprintf_r+0x1ec>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f04f 32ff 	mov.w	r2, #4294967295
 8007a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a18:	f10a 0a01 	add.w	sl, sl, #1
 8007a1c:	9304      	str	r3, [sp, #16]
 8007a1e:	9307      	str	r3, [sp, #28]
 8007a20:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007a24:	931a      	str	r3, [sp, #104]	@ 0x68
 8007a26:	4654      	mov	r4, sl
 8007a28:	2205      	movs	r2, #5
 8007a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a2e:	4853      	ldr	r0, [pc, #332]	@ (8007b7c <_vfiprintf_r+0x21c>)
 8007a30:	f7f8 fbf6 	bl	8000220 <memchr>
 8007a34:	9a04      	ldr	r2, [sp, #16]
 8007a36:	b9d8      	cbnz	r0, 8007a70 <_vfiprintf_r+0x110>
 8007a38:	06d1      	lsls	r1, r2, #27
 8007a3a:	bf44      	itt	mi
 8007a3c:	2320      	movmi	r3, #32
 8007a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a42:	0713      	lsls	r3, r2, #28
 8007a44:	bf44      	itt	mi
 8007a46:	232b      	movmi	r3, #43	@ 0x2b
 8007a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007a4c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a50:	2b2a      	cmp	r3, #42	@ 0x2a
 8007a52:	d015      	beq.n	8007a80 <_vfiprintf_r+0x120>
 8007a54:	9a07      	ldr	r2, [sp, #28]
 8007a56:	4654      	mov	r4, sl
 8007a58:	2000      	movs	r0, #0
 8007a5a:	f04f 0c0a 	mov.w	ip, #10
 8007a5e:	4621      	mov	r1, r4
 8007a60:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a64:	3b30      	subs	r3, #48	@ 0x30
 8007a66:	2b09      	cmp	r3, #9
 8007a68:	d94b      	bls.n	8007b02 <_vfiprintf_r+0x1a2>
 8007a6a:	b1b0      	cbz	r0, 8007a9a <_vfiprintf_r+0x13a>
 8007a6c:	9207      	str	r2, [sp, #28]
 8007a6e:	e014      	b.n	8007a9a <_vfiprintf_r+0x13a>
 8007a70:	eba0 0308 	sub.w	r3, r0, r8
 8007a74:	fa09 f303 	lsl.w	r3, r9, r3
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	9304      	str	r3, [sp, #16]
 8007a7c:	46a2      	mov	sl, r4
 8007a7e:	e7d2      	b.n	8007a26 <_vfiprintf_r+0xc6>
 8007a80:	9b03      	ldr	r3, [sp, #12]
 8007a82:	1d19      	adds	r1, r3, #4
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	9103      	str	r1, [sp, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	bfbb      	ittet	lt
 8007a8c:	425b      	neglt	r3, r3
 8007a8e:	f042 0202 	orrlt.w	r2, r2, #2
 8007a92:	9307      	strge	r3, [sp, #28]
 8007a94:	9307      	strlt	r3, [sp, #28]
 8007a96:	bfb8      	it	lt
 8007a98:	9204      	strlt	r2, [sp, #16]
 8007a9a:	7823      	ldrb	r3, [r4, #0]
 8007a9c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a9e:	d10a      	bne.n	8007ab6 <_vfiprintf_r+0x156>
 8007aa0:	7863      	ldrb	r3, [r4, #1]
 8007aa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007aa4:	d132      	bne.n	8007b0c <_vfiprintf_r+0x1ac>
 8007aa6:	9b03      	ldr	r3, [sp, #12]
 8007aa8:	1d1a      	adds	r2, r3, #4
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	9203      	str	r2, [sp, #12]
 8007aae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ab2:	3402      	adds	r4, #2
 8007ab4:	9305      	str	r3, [sp, #20]
 8007ab6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007b8c <_vfiprintf_r+0x22c>
 8007aba:	7821      	ldrb	r1, [r4, #0]
 8007abc:	2203      	movs	r2, #3
 8007abe:	4650      	mov	r0, sl
 8007ac0:	f7f8 fbae 	bl	8000220 <memchr>
 8007ac4:	b138      	cbz	r0, 8007ad6 <_vfiprintf_r+0x176>
 8007ac6:	9b04      	ldr	r3, [sp, #16]
 8007ac8:	eba0 000a 	sub.w	r0, r0, sl
 8007acc:	2240      	movs	r2, #64	@ 0x40
 8007ace:	4082      	lsls	r2, r0
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	3401      	adds	r4, #1
 8007ad4:	9304      	str	r3, [sp, #16]
 8007ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ada:	4829      	ldr	r0, [pc, #164]	@ (8007b80 <_vfiprintf_r+0x220>)
 8007adc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007ae0:	2206      	movs	r2, #6
 8007ae2:	f7f8 fb9d 	bl	8000220 <memchr>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d03f      	beq.n	8007b6a <_vfiprintf_r+0x20a>
 8007aea:	4b26      	ldr	r3, [pc, #152]	@ (8007b84 <_vfiprintf_r+0x224>)
 8007aec:	bb1b      	cbnz	r3, 8007b36 <_vfiprintf_r+0x1d6>
 8007aee:	9b03      	ldr	r3, [sp, #12]
 8007af0:	3307      	adds	r3, #7
 8007af2:	f023 0307 	bic.w	r3, r3, #7
 8007af6:	3308      	adds	r3, #8
 8007af8:	9303      	str	r3, [sp, #12]
 8007afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007afc:	443b      	add	r3, r7
 8007afe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b00:	e76a      	b.n	80079d8 <_vfiprintf_r+0x78>
 8007b02:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b06:	460c      	mov	r4, r1
 8007b08:	2001      	movs	r0, #1
 8007b0a:	e7a8      	b.n	8007a5e <_vfiprintf_r+0xfe>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	3401      	adds	r4, #1
 8007b10:	9305      	str	r3, [sp, #20]
 8007b12:	4619      	mov	r1, r3
 8007b14:	f04f 0c0a 	mov.w	ip, #10
 8007b18:	4620      	mov	r0, r4
 8007b1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b1e:	3a30      	subs	r2, #48	@ 0x30
 8007b20:	2a09      	cmp	r2, #9
 8007b22:	d903      	bls.n	8007b2c <_vfiprintf_r+0x1cc>
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0c6      	beq.n	8007ab6 <_vfiprintf_r+0x156>
 8007b28:	9105      	str	r1, [sp, #20]
 8007b2a:	e7c4      	b.n	8007ab6 <_vfiprintf_r+0x156>
 8007b2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b30:	4604      	mov	r4, r0
 8007b32:	2301      	movs	r3, #1
 8007b34:	e7f0      	b.n	8007b18 <_vfiprintf_r+0x1b8>
 8007b36:	ab03      	add	r3, sp, #12
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	462a      	mov	r2, r5
 8007b3c:	4b12      	ldr	r3, [pc, #72]	@ (8007b88 <_vfiprintf_r+0x228>)
 8007b3e:	a904      	add	r1, sp, #16
 8007b40:	4630      	mov	r0, r6
 8007b42:	f7fd fec3 	bl	80058cc <_printf_float>
 8007b46:	4607      	mov	r7, r0
 8007b48:	1c78      	adds	r0, r7, #1
 8007b4a:	d1d6      	bne.n	8007afa <_vfiprintf_r+0x19a>
 8007b4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b4e:	07d9      	lsls	r1, r3, #31
 8007b50:	d405      	bmi.n	8007b5e <_vfiprintf_r+0x1fe>
 8007b52:	89ab      	ldrh	r3, [r5, #12]
 8007b54:	059a      	lsls	r2, r3, #22
 8007b56:	d402      	bmi.n	8007b5e <_vfiprintf_r+0x1fe>
 8007b58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b5a:	f7fe fc05 	bl	8006368 <__retarget_lock_release_recursive>
 8007b5e:	89ab      	ldrh	r3, [r5, #12]
 8007b60:	065b      	lsls	r3, r3, #25
 8007b62:	f53f af1f 	bmi.w	80079a4 <_vfiprintf_r+0x44>
 8007b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007b68:	e71e      	b.n	80079a8 <_vfiprintf_r+0x48>
 8007b6a:	ab03      	add	r3, sp, #12
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	462a      	mov	r2, r5
 8007b70:	4b05      	ldr	r3, [pc, #20]	@ (8007b88 <_vfiprintf_r+0x228>)
 8007b72:	a904      	add	r1, sp, #16
 8007b74:	4630      	mov	r0, r6
 8007b76:	f7fe f941 	bl	8005dfc <_printf_i>
 8007b7a:	e7e4      	b.n	8007b46 <_vfiprintf_r+0x1e6>
 8007b7c:	080086c0 	.word	0x080086c0
 8007b80:	080086ca 	.word	0x080086ca
 8007b84:	080058cd 	.word	0x080058cd
 8007b88:	0800793b 	.word	0x0800793b
 8007b8c:	080086c6 	.word	0x080086c6

08007b90 <__sflush_r>:
 8007b90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b98:	0716      	lsls	r6, r2, #28
 8007b9a:	4605      	mov	r5, r0
 8007b9c:	460c      	mov	r4, r1
 8007b9e:	d454      	bmi.n	8007c4a <__sflush_r+0xba>
 8007ba0:	684b      	ldr	r3, [r1, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	dc02      	bgt.n	8007bac <__sflush_r+0x1c>
 8007ba6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	dd48      	ble.n	8007c3e <__sflush_r+0xae>
 8007bac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bae:	2e00      	cmp	r6, #0
 8007bb0:	d045      	beq.n	8007c3e <__sflush_r+0xae>
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007bb8:	682f      	ldr	r7, [r5, #0]
 8007bba:	6a21      	ldr	r1, [r4, #32]
 8007bbc:	602b      	str	r3, [r5, #0]
 8007bbe:	d030      	beq.n	8007c22 <__sflush_r+0x92>
 8007bc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007bc2:	89a3      	ldrh	r3, [r4, #12]
 8007bc4:	0759      	lsls	r1, r3, #29
 8007bc6:	d505      	bpl.n	8007bd4 <__sflush_r+0x44>
 8007bc8:	6863      	ldr	r3, [r4, #4]
 8007bca:	1ad2      	subs	r2, r2, r3
 8007bcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007bce:	b10b      	cbz	r3, 8007bd4 <__sflush_r+0x44>
 8007bd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007bd2:	1ad2      	subs	r2, r2, r3
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007bd8:	6a21      	ldr	r1, [r4, #32]
 8007bda:	4628      	mov	r0, r5
 8007bdc:	47b0      	blx	r6
 8007bde:	1c43      	adds	r3, r0, #1
 8007be0:	89a3      	ldrh	r3, [r4, #12]
 8007be2:	d106      	bne.n	8007bf2 <__sflush_r+0x62>
 8007be4:	6829      	ldr	r1, [r5, #0]
 8007be6:	291d      	cmp	r1, #29
 8007be8:	d82b      	bhi.n	8007c42 <__sflush_r+0xb2>
 8007bea:	4a2a      	ldr	r2, [pc, #168]	@ (8007c94 <__sflush_r+0x104>)
 8007bec:	410a      	asrs	r2, r1
 8007bee:	07d6      	lsls	r6, r2, #31
 8007bf0:	d427      	bmi.n	8007c42 <__sflush_r+0xb2>
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	6062      	str	r2, [r4, #4]
 8007bf6:	04d9      	lsls	r1, r3, #19
 8007bf8:	6922      	ldr	r2, [r4, #16]
 8007bfa:	6022      	str	r2, [r4, #0]
 8007bfc:	d504      	bpl.n	8007c08 <__sflush_r+0x78>
 8007bfe:	1c42      	adds	r2, r0, #1
 8007c00:	d101      	bne.n	8007c06 <__sflush_r+0x76>
 8007c02:	682b      	ldr	r3, [r5, #0]
 8007c04:	b903      	cbnz	r3, 8007c08 <__sflush_r+0x78>
 8007c06:	6560      	str	r0, [r4, #84]	@ 0x54
 8007c08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c0a:	602f      	str	r7, [r5, #0]
 8007c0c:	b1b9      	cbz	r1, 8007c3e <__sflush_r+0xae>
 8007c0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007c12:	4299      	cmp	r1, r3
 8007c14:	d002      	beq.n	8007c1c <__sflush_r+0x8c>
 8007c16:	4628      	mov	r0, r5
 8007c18:	f7ff f9f6 	bl	8007008 <_free_r>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007c20:	e00d      	b.n	8007c3e <__sflush_r+0xae>
 8007c22:	2301      	movs	r3, #1
 8007c24:	4628      	mov	r0, r5
 8007c26:	47b0      	blx	r6
 8007c28:	4602      	mov	r2, r0
 8007c2a:	1c50      	adds	r0, r2, #1
 8007c2c:	d1c9      	bne.n	8007bc2 <__sflush_r+0x32>
 8007c2e:	682b      	ldr	r3, [r5, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d0c6      	beq.n	8007bc2 <__sflush_r+0x32>
 8007c34:	2b1d      	cmp	r3, #29
 8007c36:	d001      	beq.n	8007c3c <__sflush_r+0xac>
 8007c38:	2b16      	cmp	r3, #22
 8007c3a:	d11e      	bne.n	8007c7a <__sflush_r+0xea>
 8007c3c:	602f      	str	r7, [r5, #0]
 8007c3e:	2000      	movs	r0, #0
 8007c40:	e022      	b.n	8007c88 <__sflush_r+0xf8>
 8007c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c46:	b21b      	sxth	r3, r3
 8007c48:	e01b      	b.n	8007c82 <__sflush_r+0xf2>
 8007c4a:	690f      	ldr	r7, [r1, #16]
 8007c4c:	2f00      	cmp	r7, #0
 8007c4e:	d0f6      	beq.n	8007c3e <__sflush_r+0xae>
 8007c50:	0793      	lsls	r3, r2, #30
 8007c52:	680e      	ldr	r6, [r1, #0]
 8007c54:	bf08      	it	eq
 8007c56:	694b      	ldreq	r3, [r1, #20]
 8007c58:	600f      	str	r7, [r1, #0]
 8007c5a:	bf18      	it	ne
 8007c5c:	2300      	movne	r3, #0
 8007c5e:	eba6 0807 	sub.w	r8, r6, r7
 8007c62:	608b      	str	r3, [r1, #8]
 8007c64:	f1b8 0f00 	cmp.w	r8, #0
 8007c68:	dde9      	ble.n	8007c3e <__sflush_r+0xae>
 8007c6a:	6a21      	ldr	r1, [r4, #32]
 8007c6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007c6e:	4643      	mov	r3, r8
 8007c70:	463a      	mov	r2, r7
 8007c72:	4628      	mov	r0, r5
 8007c74:	47b0      	blx	r6
 8007c76:	2800      	cmp	r0, #0
 8007c78:	dc08      	bgt.n	8007c8c <__sflush_r+0xfc>
 8007c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c82:	81a3      	strh	r3, [r4, #12]
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295
 8007c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c8c:	4407      	add	r7, r0
 8007c8e:	eba8 0800 	sub.w	r8, r8, r0
 8007c92:	e7e7      	b.n	8007c64 <__sflush_r+0xd4>
 8007c94:	dfbffffe 	.word	0xdfbffffe

08007c98 <_fflush_r>:
 8007c98:	b538      	push	{r3, r4, r5, lr}
 8007c9a:	690b      	ldr	r3, [r1, #16]
 8007c9c:	4605      	mov	r5, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	b913      	cbnz	r3, 8007ca8 <_fflush_r+0x10>
 8007ca2:	2500      	movs	r5, #0
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	b118      	cbz	r0, 8007cb2 <_fflush_r+0x1a>
 8007caa:	6a03      	ldr	r3, [r0, #32]
 8007cac:	b90b      	cbnz	r3, 8007cb2 <_fflush_r+0x1a>
 8007cae:	f7fe fa51 	bl	8006154 <__sinit>
 8007cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d0f3      	beq.n	8007ca2 <_fflush_r+0xa>
 8007cba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007cbc:	07d0      	lsls	r0, r2, #31
 8007cbe:	d404      	bmi.n	8007cca <_fflush_r+0x32>
 8007cc0:	0599      	lsls	r1, r3, #22
 8007cc2:	d402      	bmi.n	8007cca <_fflush_r+0x32>
 8007cc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cc6:	f7fe fb4e 	bl	8006366 <__retarget_lock_acquire_recursive>
 8007cca:	4628      	mov	r0, r5
 8007ccc:	4621      	mov	r1, r4
 8007cce:	f7ff ff5f 	bl	8007b90 <__sflush_r>
 8007cd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cd4:	07da      	lsls	r2, r3, #31
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	d4e4      	bmi.n	8007ca4 <_fflush_r+0xc>
 8007cda:	89a3      	ldrh	r3, [r4, #12]
 8007cdc:	059b      	lsls	r3, r3, #22
 8007cde:	d4e1      	bmi.n	8007ca4 <_fflush_r+0xc>
 8007ce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ce2:	f7fe fb41 	bl	8006368 <__retarget_lock_release_recursive>
 8007ce6:	e7dd      	b.n	8007ca4 <_fflush_r+0xc>

08007ce8 <__swbuf_r>:
 8007ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cea:	460e      	mov	r6, r1
 8007cec:	4614      	mov	r4, r2
 8007cee:	4605      	mov	r5, r0
 8007cf0:	b118      	cbz	r0, 8007cfa <__swbuf_r+0x12>
 8007cf2:	6a03      	ldr	r3, [r0, #32]
 8007cf4:	b90b      	cbnz	r3, 8007cfa <__swbuf_r+0x12>
 8007cf6:	f7fe fa2d 	bl	8006154 <__sinit>
 8007cfa:	69a3      	ldr	r3, [r4, #24]
 8007cfc:	60a3      	str	r3, [r4, #8]
 8007cfe:	89a3      	ldrh	r3, [r4, #12]
 8007d00:	071a      	lsls	r2, r3, #28
 8007d02:	d501      	bpl.n	8007d08 <__swbuf_r+0x20>
 8007d04:	6923      	ldr	r3, [r4, #16]
 8007d06:	b943      	cbnz	r3, 8007d1a <__swbuf_r+0x32>
 8007d08:	4621      	mov	r1, r4
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	f000 f82a 	bl	8007d64 <__swsetup_r>
 8007d10:	b118      	cbz	r0, 8007d1a <__swbuf_r+0x32>
 8007d12:	f04f 37ff 	mov.w	r7, #4294967295
 8007d16:	4638      	mov	r0, r7
 8007d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	6922      	ldr	r2, [r4, #16]
 8007d1e:	1a98      	subs	r0, r3, r2
 8007d20:	6963      	ldr	r3, [r4, #20]
 8007d22:	b2f6      	uxtb	r6, r6
 8007d24:	4283      	cmp	r3, r0
 8007d26:	4637      	mov	r7, r6
 8007d28:	dc05      	bgt.n	8007d36 <__swbuf_r+0x4e>
 8007d2a:	4621      	mov	r1, r4
 8007d2c:	4628      	mov	r0, r5
 8007d2e:	f7ff ffb3 	bl	8007c98 <_fflush_r>
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d1ed      	bne.n	8007d12 <__swbuf_r+0x2a>
 8007d36:	68a3      	ldr	r3, [r4, #8]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	60a3      	str	r3, [r4, #8]
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	1c5a      	adds	r2, r3, #1
 8007d40:	6022      	str	r2, [r4, #0]
 8007d42:	701e      	strb	r6, [r3, #0]
 8007d44:	6962      	ldr	r2, [r4, #20]
 8007d46:	1c43      	adds	r3, r0, #1
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d004      	beq.n	8007d56 <__swbuf_r+0x6e>
 8007d4c:	89a3      	ldrh	r3, [r4, #12]
 8007d4e:	07db      	lsls	r3, r3, #31
 8007d50:	d5e1      	bpl.n	8007d16 <__swbuf_r+0x2e>
 8007d52:	2e0a      	cmp	r6, #10
 8007d54:	d1df      	bne.n	8007d16 <__swbuf_r+0x2e>
 8007d56:	4621      	mov	r1, r4
 8007d58:	4628      	mov	r0, r5
 8007d5a:	f7ff ff9d 	bl	8007c98 <_fflush_r>
 8007d5e:	2800      	cmp	r0, #0
 8007d60:	d0d9      	beq.n	8007d16 <__swbuf_r+0x2e>
 8007d62:	e7d6      	b.n	8007d12 <__swbuf_r+0x2a>

08007d64 <__swsetup_r>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	4b29      	ldr	r3, [pc, #164]	@ (8007e0c <__swsetup_r+0xa8>)
 8007d68:	4605      	mov	r5, r0
 8007d6a:	6818      	ldr	r0, [r3, #0]
 8007d6c:	460c      	mov	r4, r1
 8007d6e:	b118      	cbz	r0, 8007d78 <__swsetup_r+0x14>
 8007d70:	6a03      	ldr	r3, [r0, #32]
 8007d72:	b90b      	cbnz	r3, 8007d78 <__swsetup_r+0x14>
 8007d74:	f7fe f9ee 	bl	8006154 <__sinit>
 8007d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d7c:	0719      	lsls	r1, r3, #28
 8007d7e:	d422      	bmi.n	8007dc6 <__swsetup_r+0x62>
 8007d80:	06da      	lsls	r2, r3, #27
 8007d82:	d407      	bmi.n	8007d94 <__swsetup_r+0x30>
 8007d84:	2209      	movs	r2, #9
 8007d86:	602a      	str	r2, [r5, #0]
 8007d88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d8c:	81a3      	strh	r3, [r4, #12]
 8007d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d92:	e033      	b.n	8007dfc <__swsetup_r+0x98>
 8007d94:	0758      	lsls	r0, r3, #29
 8007d96:	d512      	bpl.n	8007dbe <__swsetup_r+0x5a>
 8007d98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007d9a:	b141      	cbz	r1, 8007dae <__swsetup_r+0x4a>
 8007d9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007da0:	4299      	cmp	r1, r3
 8007da2:	d002      	beq.n	8007daa <__swsetup_r+0x46>
 8007da4:	4628      	mov	r0, r5
 8007da6:	f7ff f92f 	bl	8007008 <_free_r>
 8007daa:	2300      	movs	r3, #0
 8007dac:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dae:	89a3      	ldrh	r3, [r4, #12]
 8007db0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007db4:	81a3      	strh	r3, [r4, #12]
 8007db6:	2300      	movs	r3, #0
 8007db8:	6063      	str	r3, [r4, #4]
 8007dba:	6923      	ldr	r3, [r4, #16]
 8007dbc:	6023      	str	r3, [r4, #0]
 8007dbe:	89a3      	ldrh	r3, [r4, #12]
 8007dc0:	f043 0308 	orr.w	r3, r3, #8
 8007dc4:	81a3      	strh	r3, [r4, #12]
 8007dc6:	6923      	ldr	r3, [r4, #16]
 8007dc8:	b94b      	cbnz	r3, 8007dde <__swsetup_r+0x7a>
 8007dca:	89a3      	ldrh	r3, [r4, #12]
 8007dcc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007dd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dd4:	d003      	beq.n	8007dde <__swsetup_r+0x7a>
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f000 f8c1 	bl	8007f60 <__smakebuf_r>
 8007dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007de2:	f013 0201 	ands.w	r2, r3, #1
 8007de6:	d00a      	beq.n	8007dfe <__swsetup_r+0x9a>
 8007de8:	2200      	movs	r2, #0
 8007dea:	60a2      	str	r2, [r4, #8]
 8007dec:	6962      	ldr	r2, [r4, #20]
 8007dee:	4252      	negs	r2, r2
 8007df0:	61a2      	str	r2, [r4, #24]
 8007df2:	6922      	ldr	r2, [r4, #16]
 8007df4:	b942      	cbnz	r2, 8007e08 <__swsetup_r+0xa4>
 8007df6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007dfa:	d1c5      	bne.n	8007d88 <__swsetup_r+0x24>
 8007dfc:	bd38      	pop	{r3, r4, r5, pc}
 8007dfe:	0799      	lsls	r1, r3, #30
 8007e00:	bf58      	it	pl
 8007e02:	6962      	ldrpl	r2, [r4, #20]
 8007e04:	60a2      	str	r2, [r4, #8]
 8007e06:	e7f4      	b.n	8007df2 <__swsetup_r+0x8e>
 8007e08:	2000      	movs	r0, #0
 8007e0a:	e7f7      	b.n	8007dfc <__swsetup_r+0x98>
 8007e0c:	20000018 	.word	0x20000018

08007e10 <_sbrk_r>:
 8007e10:	b538      	push	{r3, r4, r5, lr}
 8007e12:	4d06      	ldr	r5, [pc, #24]	@ (8007e2c <_sbrk_r+0x1c>)
 8007e14:	2300      	movs	r3, #0
 8007e16:	4604      	mov	r4, r0
 8007e18:	4608      	mov	r0, r1
 8007e1a:	602b      	str	r3, [r5, #0]
 8007e1c:	f7f9 ff88 	bl	8001d30 <_sbrk>
 8007e20:	1c43      	adds	r3, r0, #1
 8007e22:	d102      	bne.n	8007e2a <_sbrk_r+0x1a>
 8007e24:	682b      	ldr	r3, [r5, #0]
 8007e26:	b103      	cbz	r3, 8007e2a <_sbrk_r+0x1a>
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	bd38      	pop	{r3, r4, r5, pc}
 8007e2c:	200009e8 	.word	0x200009e8

08007e30 <memcpy>:
 8007e30:	440a      	add	r2, r1
 8007e32:	4291      	cmp	r1, r2
 8007e34:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e38:	d100      	bne.n	8007e3c <memcpy+0xc>
 8007e3a:	4770      	bx	lr
 8007e3c:	b510      	push	{r4, lr}
 8007e3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e46:	4291      	cmp	r1, r2
 8007e48:	d1f9      	bne.n	8007e3e <memcpy+0xe>
 8007e4a:	bd10      	pop	{r4, pc}

08007e4c <__assert_func>:
 8007e4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e4e:	4614      	mov	r4, r2
 8007e50:	461a      	mov	r2, r3
 8007e52:	4b09      	ldr	r3, [pc, #36]	@ (8007e78 <__assert_func+0x2c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4605      	mov	r5, r0
 8007e58:	68d8      	ldr	r0, [r3, #12]
 8007e5a:	b954      	cbnz	r4, 8007e72 <__assert_func+0x26>
 8007e5c:	4b07      	ldr	r3, [pc, #28]	@ (8007e7c <__assert_func+0x30>)
 8007e5e:	461c      	mov	r4, r3
 8007e60:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e64:	9100      	str	r1, [sp, #0]
 8007e66:	462b      	mov	r3, r5
 8007e68:	4905      	ldr	r1, [pc, #20]	@ (8007e80 <__assert_func+0x34>)
 8007e6a:	f000 f841 	bl	8007ef0 <fiprintf>
 8007e6e:	f000 f8d5 	bl	800801c <abort>
 8007e72:	4b04      	ldr	r3, [pc, #16]	@ (8007e84 <__assert_func+0x38>)
 8007e74:	e7f4      	b.n	8007e60 <__assert_func+0x14>
 8007e76:	bf00      	nop
 8007e78:	20000018 	.word	0x20000018
 8007e7c:	08008716 	.word	0x08008716
 8007e80:	080086e8 	.word	0x080086e8
 8007e84:	080086db 	.word	0x080086db

08007e88 <_calloc_r>:
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	fba1 5402 	umull	r5, r4, r1, r2
 8007e8e:	b93c      	cbnz	r4, 8007ea0 <_calloc_r+0x18>
 8007e90:	4629      	mov	r1, r5
 8007e92:	f7ff f92d 	bl	80070f0 <_malloc_r>
 8007e96:	4606      	mov	r6, r0
 8007e98:	b928      	cbnz	r0, 8007ea6 <_calloc_r+0x1e>
 8007e9a:	2600      	movs	r6, #0
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ea0:	220c      	movs	r2, #12
 8007ea2:	6002      	str	r2, [r0, #0]
 8007ea4:	e7f9      	b.n	8007e9a <_calloc_r+0x12>
 8007ea6:	462a      	mov	r2, r5
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	f7fe f9de 	bl	800626a <memset>
 8007eae:	e7f5      	b.n	8007e9c <_calloc_r+0x14>

08007eb0 <__ascii_mbtowc>:
 8007eb0:	b082      	sub	sp, #8
 8007eb2:	b901      	cbnz	r1, 8007eb6 <__ascii_mbtowc+0x6>
 8007eb4:	a901      	add	r1, sp, #4
 8007eb6:	b142      	cbz	r2, 8007eca <__ascii_mbtowc+0x1a>
 8007eb8:	b14b      	cbz	r3, 8007ece <__ascii_mbtowc+0x1e>
 8007eba:	7813      	ldrb	r3, [r2, #0]
 8007ebc:	600b      	str	r3, [r1, #0]
 8007ebe:	7812      	ldrb	r2, [r2, #0]
 8007ec0:	1e10      	subs	r0, r2, #0
 8007ec2:	bf18      	it	ne
 8007ec4:	2001      	movne	r0, #1
 8007ec6:	b002      	add	sp, #8
 8007ec8:	4770      	bx	lr
 8007eca:	4610      	mov	r0, r2
 8007ecc:	e7fb      	b.n	8007ec6 <__ascii_mbtowc+0x16>
 8007ece:	f06f 0001 	mvn.w	r0, #1
 8007ed2:	e7f8      	b.n	8007ec6 <__ascii_mbtowc+0x16>

08007ed4 <__ascii_wctomb>:
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	4608      	mov	r0, r1
 8007ed8:	b141      	cbz	r1, 8007eec <__ascii_wctomb+0x18>
 8007eda:	2aff      	cmp	r2, #255	@ 0xff
 8007edc:	d904      	bls.n	8007ee8 <__ascii_wctomb+0x14>
 8007ede:	228a      	movs	r2, #138	@ 0x8a
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee6:	4770      	bx	lr
 8007ee8:	700a      	strb	r2, [r1, #0]
 8007eea:	2001      	movs	r0, #1
 8007eec:	4770      	bx	lr
	...

08007ef0 <fiprintf>:
 8007ef0:	b40e      	push	{r1, r2, r3}
 8007ef2:	b503      	push	{r0, r1, lr}
 8007ef4:	4601      	mov	r1, r0
 8007ef6:	ab03      	add	r3, sp, #12
 8007ef8:	4805      	ldr	r0, [pc, #20]	@ (8007f10 <fiprintf+0x20>)
 8007efa:	f853 2b04 	ldr.w	r2, [r3], #4
 8007efe:	6800      	ldr	r0, [r0, #0]
 8007f00:	9301      	str	r3, [sp, #4]
 8007f02:	f7ff fd2d 	bl	8007960 <_vfiprintf_r>
 8007f06:	b002      	add	sp, #8
 8007f08:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f0c:	b003      	add	sp, #12
 8007f0e:	4770      	bx	lr
 8007f10:	20000018 	.word	0x20000018

08007f14 <__swhatbuf_r>:
 8007f14:	b570      	push	{r4, r5, r6, lr}
 8007f16:	460c      	mov	r4, r1
 8007f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f1c:	2900      	cmp	r1, #0
 8007f1e:	b096      	sub	sp, #88	@ 0x58
 8007f20:	4615      	mov	r5, r2
 8007f22:	461e      	mov	r6, r3
 8007f24:	da0d      	bge.n	8007f42 <__swhatbuf_r+0x2e>
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f2c:	f04f 0100 	mov.w	r1, #0
 8007f30:	bf14      	ite	ne
 8007f32:	2340      	movne	r3, #64	@ 0x40
 8007f34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f38:	2000      	movs	r0, #0
 8007f3a:	6031      	str	r1, [r6, #0]
 8007f3c:	602b      	str	r3, [r5, #0]
 8007f3e:	b016      	add	sp, #88	@ 0x58
 8007f40:	bd70      	pop	{r4, r5, r6, pc}
 8007f42:	466a      	mov	r2, sp
 8007f44:	f000 f848 	bl	8007fd8 <_fstat_r>
 8007f48:	2800      	cmp	r0, #0
 8007f4a:	dbec      	blt.n	8007f26 <__swhatbuf_r+0x12>
 8007f4c:	9901      	ldr	r1, [sp, #4]
 8007f4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f56:	4259      	negs	r1, r3
 8007f58:	4159      	adcs	r1, r3
 8007f5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f5e:	e7eb      	b.n	8007f38 <__swhatbuf_r+0x24>

08007f60 <__smakebuf_r>:
 8007f60:	898b      	ldrh	r3, [r1, #12]
 8007f62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f64:	079d      	lsls	r5, r3, #30
 8007f66:	4606      	mov	r6, r0
 8007f68:	460c      	mov	r4, r1
 8007f6a:	d507      	bpl.n	8007f7c <__smakebuf_r+0x1c>
 8007f6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f70:	6023      	str	r3, [r4, #0]
 8007f72:	6123      	str	r3, [r4, #16]
 8007f74:	2301      	movs	r3, #1
 8007f76:	6163      	str	r3, [r4, #20]
 8007f78:	b003      	add	sp, #12
 8007f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f7c:	ab01      	add	r3, sp, #4
 8007f7e:	466a      	mov	r2, sp
 8007f80:	f7ff ffc8 	bl	8007f14 <__swhatbuf_r>
 8007f84:	9f00      	ldr	r7, [sp, #0]
 8007f86:	4605      	mov	r5, r0
 8007f88:	4639      	mov	r1, r7
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f7ff f8b0 	bl	80070f0 <_malloc_r>
 8007f90:	b948      	cbnz	r0, 8007fa6 <__smakebuf_r+0x46>
 8007f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f96:	059a      	lsls	r2, r3, #22
 8007f98:	d4ee      	bmi.n	8007f78 <__smakebuf_r+0x18>
 8007f9a:	f023 0303 	bic.w	r3, r3, #3
 8007f9e:	f043 0302 	orr.w	r3, r3, #2
 8007fa2:	81a3      	strh	r3, [r4, #12]
 8007fa4:	e7e2      	b.n	8007f6c <__smakebuf_r+0xc>
 8007fa6:	89a3      	ldrh	r3, [r4, #12]
 8007fa8:	6020      	str	r0, [r4, #0]
 8007faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fae:	81a3      	strh	r3, [r4, #12]
 8007fb0:	9b01      	ldr	r3, [sp, #4]
 8007fb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007fb6:	b15b      	cbz	r3, 8007fd0 <__smakebuf_r+0x70>
 8007fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	f000 f81d 	bl	8007ffc <_isatty_r>
 8007fc2:	b128      	cbz	r0, 8007fd0 <__smakebuf_r+0x70>
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	f023 0303 	bic.w	r3, r3, #3
 8007fca:	f043 0301 	orr.w	r3, r3, #1
 8007fce:	81a3      	strh	r3, [r4, #12]
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	431d      	orrs	r5, r3
 8007fd4:	81a5      	strh	r5, [r4, #12]
 8007fd6:	e7cf      	b.n	8007f78 <__smakebuf_r+0x18>

08007fd8 <_fstat_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d07      	ldr	r5, [pc, #28]	@ (8007ff8 <_fstat_r+0x20>)
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4604      	mov	r4, r0
 8007fe0:	4608      	mov	r0, r1
 8007fe2:	4611      	mov	r1, r2
 8007fe4:	602b      	str	r3, [r5, #0]
 8007fe6:	f7f9 fe7a 	bl	8001cde <_fstat>
 8007fea:	1c43      	adds	r3, r0, #1
 8007fec:	d102      	bne.n	8007ff4 <_fstat_r+0x1c>
 8007fee:	682b      	ldr	r3, [r5, #0]
 8007ff0:	b103      	cbz	r3, 8007ff4 <_fstat_r+0x1c>
 8007ff2:	6023      	str	r3, [r4, #0]
 8007ff4:	bd38      	pop	{r3, r4, r5, pc}
 8007ff6:	bf00      	nop
 8007ff8:	200009e8 	.word	0x200009e8

08007ffc <_isatty_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d06      	ldr	r5, [pc, #24]	@ (8008018 <_isatty_r+0x1c>)
 8008000:	2300      	movs	r3, #0
 8008002:	4604      	mov	r4, r0
 8008004:	4608      	mov	r0, r1
 8008006:	602b      	str	r3, [r5, #0]
 8008008:	f7f9 fe79 	bl	8001cfe <_isatty>
 800800c:	1c43      	adds	r3, r0, #1
 800800e:	d102      	bne.n	8008016 <_isatty_r+0x1a>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	b103      	cbz	r3, 8008016 <_isatty_r+0x1a>
 8008014:	6023      	str	r3, [r4, #0]
 8008016:	bd38      	pop	{r3, r4, r5, pc}
 8008018:	200009e8 	.word	0x200009e8

0800801c <abort>:
 800801c:	b508      	push	{r3, lr}
 800801e:	2006      	movs	r0, #6
 8008020:	f000 f82c 	bl	800807c <raise>
 8008024:	2001      	movs	r0, #1
 8008026:	f7f9 fe0a 	bl	8001c3e <_exit>

0800802a <_raise_r>:
 800802a:	291f      	cmp	r1, #31
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	4605      	mov	r5, r0
 8008030:	460c      	mov	r4, r1
 8008032:	d904      	bls.n	800803e <_raise_r+0x14>
 8008034:	2316      	movs	r3, #22
 8008036:	6003      	str	r3, [r0, #0]
 8008038:	f04f 30ff 	mov.w	r0, #4294967295
 800803c:	bd38      	pop	{r3, r4, r5, pc}
 800803e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008040:	b112      	cbz	r2, 8008048 <_raise_r+0x1e>
 8008042:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008046:	b94b      	cbnz	r3, 800805c <_raise_r+0x32>
 8008048:	4628      	mov	r0, r5
 800804a:	f000 f831 	bl	80080b0 <_getpid_r>
 800804e:	4622      	mov	r2, r4
 8008050:	4601      	mov	r1, r0
 8008052:	4628      	mov	r0, r5
 8008054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008058:	f000 b818 	b.w	800808c <_kill_r>
 800805c:	2b01      	cmp	r3, #1
 800805e:	d00a      	beq.n	8008076 <_raise_r+0x4c>
 8008060:	1c59      	adds	r1, r3, #1
 8008062:	d103      	bne.n	800806c <_raise_r+0x42>
 8008064:	2316      	movs	r3, #22
 8008066:	6003      	str	r3, [r0, #0]
 8008068:	2001      	movs	r0, #1
 800806a:	e7e7      	b.n	800803c <_raise_r+0x12>
 800806c:	2100      	movs	r1, #0
 800806e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008072:	4620      	mov	r0, r4
 8008074:	4798      	blx	r3
 8008076:	2000      	movs	r0, #0
 8008078:	e7e0      	b.n	800803c <_raise_r+0x12>
	...

0800807c <raise>:
 800807c:	4b02      	ldr	r3, [pc, #8]	@ (8008088 <raise+0xc>)
 800807e:	4601      	mov	r1, r0
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	f7ff bfd2 	b.w	800802a <_raise_r>
 8008086:	bf00      	nop
 8008088:	20000018 	.word	0x20000018

0800808c <_kill_r>:
 800808c:	b538      	push	{r3, r4, r5, lr}
 800808e:	4d07      	ldr	r5, [pc, #28]	@ (80080ac <_kill_r+0x20>)
 8008090:	2300      	movs	r3, #0
 8008092:	4604      	mov	r4, r0
 8008094:	4608      	mov	r0, r1
 8008096:	4611      	mov	r1, r2
 8008098:	602b      	str	r3, [r5, #0]
 800809a:	f7f9 fdc0 	bl	8001c1e <_kill>
 800809e:	1c43      	adds	r3, r0, #1
 80080a0:	d102      	bne.n	80080a8 <_kill_r+0x1c>
 80080a2:	682b      	ldr	r3, [r5, #0]
 80080a4:	b103      	cbz	r3, 80080a8 <_kill_r+0x1c>
 80080a6:	6023      	str	r3, [r4, #0]
 80080a8:	bd38      	pop	{r3, r4, r5, pc}
 80080aa:	bf00      	nop
 80080ac:	200009e8 	.word	0x200009e8

080080b0 <_getpid_r>:
 80080b0:	f7f9 bdad 	b.w	8001c0e <_getpid>

080080b4 <_init>:
 80080b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b6:	bf00      	nop
 80080b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ba:	bc08      	pop	{r3}
 80080bc:	469e      	mov	lr, r3
 80080be:	4770      	bx	lr

080080c0 <_fini>:
 80080c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c2:	bf00      	nop
 80080c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080c6:	bc08      	pop	{r3}
 80080c8:	469e      	mov	lr, r3
 80080ca:	4770      	bx	lr
