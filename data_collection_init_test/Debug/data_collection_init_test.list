
data_collection_init_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e14  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b8  08007ff8  08007ff8  00008ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087b0  080087b0  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080087b0  080087b0  000097b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087b8  080087b8  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087b8  080087b8  000097b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087bc  080087bc  000097bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080087c0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000824  200001d4  08008994  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009f8  08008994  0000a9f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013f8b  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb1  00000000  00000000  0001e18f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00020d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d2f  00000000  00000000  00021e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002444f  00000000  00000000  00022b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c96  00000000  00000000  00046fce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d99a6  00000000  00000000  0005dc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013760a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057a0  00000000  00000000  00137650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0013cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007fdc 	.word	0x08007fdc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08007fdc 	.word	0x08007fdc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b96a 	b.w	8000ee4 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	460c      	mov	r4, r1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d14e      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c34:	4694      	mov	ip, r2
 8000c36:	458c      	cmp	ip, r1
 8000c38:	4686      	mov	lr, r0
 8000c3a:	fab2 f282 	clz	r2, r2
 8000c3e:	d962      	bls.n	8000d06 <__udivmoddi4+0xde>
 8000c40:	b14a      	cbz	r2, 8000c56 <__udivmoddi4+0x2e>
 8000c42:	f1c2 0320 	rsb	r3, r2, #32
 8000c46:	4091      	lsls	r1, r2
 8000c48:	fa20 f303 	lsr.w	r3, r0, r3
 8000c4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c50:	4319      	orrs	r1, r3
 8000c52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5a:	fa1f f68c 	uxth.w	r6, ip
 8000c5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6e:	fb04 f106 	mul.w	r1, r4, r6
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7e:	f080 8112 	bcs.w	8000ea6 <__udivmoddi4+0x27e>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 810f 	bls.w	8000ea6 <__udivmoddi4+0x27e>
 8000c88:	3c02      	subs	r4, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a59      	subs	r1, r3, r1
 8000c8e:	fa1f f38e 	uxth.w	r3, lr
 8000c92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c96:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9e:	fb00 f606 	mul.w	r6, r0, r6
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x94>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cae:	f080 80fc 	bcs.w	8000eaa <__udivmoddi4+0x282>
 8000cb2:	429e      	cmp	r6, r3
 8000cb4:	f240 80f9 	bls.w	8000eaa <__udivmoddi4+0x282>
 8000cb8:	4463      	add	r3, ip
 8000cba:	3802      	subs	r0, #2
 8000cbc:	1b9b      	subs	r3, r3, r6
 8000cbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	b11d      	cbz	r5, 8000cce <__udivmoddi4+0xa6>
 8000cc6:	40d3      	lsrs	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	e9c5 3200 	strd	r3, r2, [r5]
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d905      	bls.n	8000ce2 <__udivmoddi4+0xba>
 8000cd6:	b10d      	cbz	r5, 8000cdc <__udivmoddi4+0xb4>
 8000cd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e7f5      	b.n	8000cce <__udivmoddi4+0xa6>
 8000ce2:	fab3 f183 	clz	r1, r3
 8000ce6:	2900      	cmp	r1, #0
 8000ce8:	d146      	bne.n	8000d78 <__udivmoddi4+0x150>
 8000cea:	42a3      	cmp	r3, r4
 8000cec:	d302      	bcc.n	8000cf4 <__udivmoddi4+0xcc>
 8000cee:	4290      	cmp	r0, r2
 8000cf0:	f0c0 80f0 	bcc.w	8000ed4 <__udivmoddi4+0x2ac>
 8000cf4:	1a86      	subs	r6, r0, r2
 8000cf6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfa:	2001      	movs	r0, #1
 8000cfc:	2d00      	cmp	r5, #0
 8000cfe:	d0e6      	beq.n	8000cce <__udivmoddi4+0xa6>
 8000d00:	e9c5 6300 	strd	r6, r3, [r5]
 8000d04:	e7e3      	b.n	8000cce <__udivmoddi4+0xa6>
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	f040 8090 	bne.w	8000e2c <__udivmoddi4+0x204>
 8000d0c:	eba1 040c 	sub.w	r4, r1, ip
 8000d10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d14:	fa1f f78c 	uxth.w	r7, ip
 8000d18:	2101      	movs	r1, #1
 8000d1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d22:	fb08 4416 	mls	r4, r8, r6, r4
 8000d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2a:	fb07 f006 	mul.w	r0, r7, r6
 8000d2e:	4298      	cmp	r0, r3
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x11c>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x11a>
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cd 	bhi.w	8000edc <__udivmoddi4+0x2b4>
 8000d42:	4626      	mov	r6, r4
 8000d44:	1a1c      	subs	r4, r3, r0
 8000d46:	fa1f f38e 	uxth.w	r3, lr
 8000d4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d56:	fb00 f707 	mul.w	r7, r0, r7
 8000d5a:	429f      	cmp	r7, r3
 8000d5c:	d908      	bls.n	8000d70 <__udivmoddi4+0x148>
 8000d5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d66:	d202      	bcs.n	8000d6e <__udivmoddi4+0x146>
 8000d68:	429f      	cmp	r7, r3
 8000d6a:	f200 80b0 	bhi.w	8000ece <__udivmoddi4+0x2a6>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	1bdb      	subs	r3, r3, r7
 8000d72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d76:	e7a5      	b.n	8000cc4 <__udivmoddi4+0x9c>
 8000d78:	f1c1 0620 	rsb	r6, r1, #32
 8000d7c:	408b      	lsls	r3, r1
 8000d7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d82:	431f      	orrs	r7, r3
 8000d84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d88:	fa04 f301 	lsl.w	r3, r4, r1
 8000d8c:	ea43 030c 	orr.w	r3, r3, ip
 8000d90:	40f4      	lsrs	r4, r6
 8000d92:	fa00 f801 	lsl.w	r8, r0, r1
 8000d96:	0c38      	lsrs	r0, r7, #16
 8000d98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fb00 441e 	mls	r4, r0, lr, r4
 8000da8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dac:	fb0e f90c 	mul.w	r9, lr, ip
 8000db0:	45a1      	cmp	r9, r4
 8000db2:	fa02 f201 	lsl.w	r2, r2, r1
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1a6>
 8000db8:	193c      	adds	r4, r7, r4
 8000dba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dbe:	f080 8084 	bcs.w	8000eca <__udivmoddi4+0x2a2>
 8000dc2:	45a1      	cmp	r9, r4
 8000dc4:	f240 8081 	bls.w	8000eca <__udivmoddi4+0x2a2>
 8000dc8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dcc:	443c      	add	r4, r7
 8000dce:	eba4 0409 	sub.w	r4, r4, r9
 8000dd2:	fa1f f983 	uxth.w	r9, r3
 8000dd6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dda:	fb00 4413 	mls	r4, r0, r3, r4
 8000dde:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de6:	45a4      	cmp	ip, r4
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x1d2>
 8000dea:	193c      	adds	r4, r7, r4
 8000dec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df0:	d267      	bcs.n	8000ec2 <__udivmoddi4+0x29a>
 8000df2:	45a4      	cmp	ip, r4
 8000df4:	d965      	bls.n	8000ec2 <__udivmoddi4+0x29a>
 8000df6:	3b02      	subs	r3, #2
 8000df8:	443c      	add	r4, r7
 8000dfa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfe:	fba0 9302 	umull	r9, r3, r0, r2
 8000e02:	eba4 040c 	sub.w	r4, r4, ip
 8000e06:	429c      	cmp	r4, r3
 8000e08:	46ce      	mov	lr, r9
 8000e0a:	469c      	mov	ip, r3
 8000e0c:	d351      	bcc.n	8000eb2 <__udivmoddi4+0x28a>
 8000e0e:	d04e      	beq.n	8000eae <__udivmoddi4+0x286>
 8000e10:	b155      	cbz	r5, 8000e28 <__udivmoddi4+0x200>
 8000e12:	ebb8 030e 	subs.w	r3, r8, lr
 8000e16:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1e:	40cb      	lsrs	r3, r1
 8000e20:	431e      	orrs	r6, r3
 8000e22:	40cc      	lsrs	r4, r1
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e750      	b.n	8000cce <__udivmoddi4+0xa6>
 8000e2c:	f1c2 0320 	rsb	r3, r2, #32
 8000e30:	fa20 f103 	lsr.w	r1, r0, r3
 8000e34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e38:	fa24 f303 	lsr.w	r3, r4, r3
 8000e3c:	4094      	lsls	r4, r2
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e48:	fa1f f78c 	uxth.w	r7, ip
 8000e4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e50:	fb08 3110 	mls	r1, r8, r0, r3
 8000e54:	0c23      	lsrs	r3, r4, #16
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f107 	mul.w	r1, r0, r7
 8000e5e:	4299      	cmp	r1, r3
 8000e60:	d908      	bls.n	8000e74 <__udivmoddi4+0x24c>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6a:	d22c      	bcs.n	8000ec6 <__udivmoddi4+0x29e>
 8000e6c:	4299      	cmp	r1, r3
 8000e6e:	d92a      	bls.n	8000ec6 <__udivmoddi4+0x29e>
 8000e70:	3802      	subs	r0, #2
 8000e72:	4463      	add	r3, ip
 8000e74:	1a5b      	subs	r3, r3, r1
 8000e76:	b2a4      	uxth	r4, r4
 8000e78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e84:	fb01 f307 	mul.w	r3, r1, r7
 8000e88:	42a3      	cmp	r3, r4
 8000e8a:	d908      	bls.n	8000e9e <__udivmoddi4+0x276>
 8000e8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e94:	d213      	bcs.n	8000ebe <__udivmoddi4+0x296>
 8000e96:	42a3      	cmp	r3, r4
 8000e98:	d911      	bls.n	8000ebe <__udivmoddi4+0x296>
 8000e9a:	3902      	subs	r1, #2
 8000e9c:	4464      	add	r4, ip
 8000e9e:	1ae4      	subs	r4, r4, r3
 8000ea0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea4:	e739      	b.n	8000d1a <__udivmoddi4+0xf2>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	e6f0      	b.n	8000c8c <__udivmoddi4+0x64>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e706      	b.n	8000cbc <__udivmoddi4+0x94>
 8000eae:	45c8      	cmp	r8, r9
 8000eb0:	d2ae      	bcs.n	8000e10 <__udivmoddi4+0x1e8>
 8000eb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eba:	3801      	subs	r0, #1
 8000ebc:	e7a8      	b.n	8000e10 <__udivmoddi4+0x1e8>
 8000ebe:	4631      	mov	r1, r6
 8000ec0:	e7ed      	b.n	8000e9e <__udivmoddi4+0x276>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	e799      	b.n	8000dfa <__udivmoddi4+0x1d2>
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	e7d4      	b.n	8000e74 <__udivmoddi4+0x24c>
 8000eca:	46d6      	mov	lr, sl
 8000ecc:	e77f      	b.n	8000dce <__udivmoddi4+0x1a6>
 8000ece:	4463      	add	r3, ip
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	e74d      	b.n	8000d70 <__udivmoddi4+0x148>
 8000ed4:	4606      	mov	r6, r0
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e70f      	b.n	8000cfc <__udivmoddi4+0xd4>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	4463      	add	r3, ip
 8000ee0:	e730      	b.n	8000d44 <__udivmoddi4+0x11c>
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <HAL_I2C_write_poll>:
  }
}

// I2C write abstraction for busypoll
void HAL_I2C_write_poll(const int8_t address, const uint8_t reg, const uint8_t data)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	71bb      	strb	r3, [r7, #6]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	717b      	strb	r3, [r7, #5]
  // Blocking mode
	// Note: the buffer must be on the heap (no unsized pointers allowed) (I2C2_TX_Buffer)
  if(HAL_I2C_IsDeviceReady(&hi2c2, address, 3, 1000))
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	b299      	uxth	r1, r3
 8000f00:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f04:	2203      	movs	r2, #3
 8000f06:	4815      	ldr	r0, [pc, #84]	@ (8000f5c <HAL_I2C_write_poll+0x74>)
 8000f08:	f001 fd1a 	bl	8002940 <HAL_I2C_IsDeviceReady>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d01d      	beq.n	8000f4e <HAL_I2C_write_poll+0x66>
	{
		//printf("** I2C write start TX ** \n\r");
		memset(&I2C2_TX_Buffer, 0, sizeof(I2C2_TX_Buffer));
 8000f12:	2220      	movs	r2, #32
 8000f14:	2100      	movs	r1, #0
 8000f16:	4812      	ldr	r0, [pc, #72]	@ (8000f60 <HAL_I2C_write_poll+0x78>)
 8000f18:	f005 f93b 	bl	8006192 <memset>

		// set register and data to set
		I2C2_TX_Buffer[0] = reg;
 8000f1c:	4a10      	ldr	r2, [pc, #64]	@ (8000f60 <HAL_I2C_write_poll+0x78>)
 8000f1e:	79bb      	ldrb	r3, [r7, #6]
 8000f20:	7013      	strb	r3, [r2, #0]
		I2C2_TX_Buffer[1] = data;
 8000f22:	4a0f      	ldr	r2, [pc, #60]	@ (8000f60 <HAL_I2C_write_poll+0x78>)
 8000f24:	797b      	ldrb	r3, [r7, #5]
 8000f26:	7053      	strb	r3, [r2, #1]

		// for bad reasons, we need to shift the address by one for reads and writes
		if(HAL_I2C_Master_Transmit(&hi2c2, address<<1, I2C2_TX_Buffer, 2, 50) != HAL_OK)
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	b299      	uxth	r1, r3
 8000f32:	2332      	movs	r3, #50	@ 0x32
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2302      	movs	r3, #2
 8000f38:	4a09      	ldr	r2, [pc, #36]	@ (8000f60 <HAL_I2C_write_poll+0x78>)
 8000f3a:	4808      	ldr	r0, [pc, #32]	@ (8000f5c <HAL_I2C_write_poll+0x74>)
 8000f3c:	f001 faf2 	bl	8002524 <HAL_I2C_Master_Transmit>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d006      	beq.n	8000f54 <HAL_I2C_write_poll+0x6c>
		{
	    /* Error_Handler() function is called when Timeout error occurs.
	       When Acknowledge failure occurs (Slave don't acknowledge its address)
	       Master restarts communication */
			printf("** I2C write failed due to bad TX call! ** \n\r");
 8000f46:	4807      	ldr	r0, [pc, #28]	@ (8000f64 <HAL_I2C_write_poll+0x7c>)
 8000f48:	f005 f8ce 	bl	80060e8 <iprintf>
/*	    if (HAL_I2C_GetError(&hi2c2) != HAL_I2C_ERROR_AF)
	    {
	      Error_Handler();
	      printf("** I2C read failed due to bad TX call! ** \n\r");
	    }*/
	    return;
 8000f4c:	e002      	b.n	8000f54 <HAL_I2C_write_poll+0x6c>
		}
	}
	else
	{
		printf("** I2C write failed due to bad HAL_I2C_IsDeviceReady call! ** \n\r");
 8000f4e:	4806      	ldr	r0, [pc, #24]	@ (8000f68 <HAL_I2C_write_poll+0x80>)
 8000f50:	f005 f8ca 	bl	80060e8 <iprintf>
	}
}
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000284 	.word	0x20000284
 8000f60:	200001f0 	.word	0x200001f0
 8000f64:	08008190 	.word	0x08008190
 8000f68:	080081c0 	.word	0x080081c0

08000f6c <HAL_I2C_read_poll>:

// I2C read abstraction for busypoll
void HAL_I2C_read_poll(const int8_t address, const int8_t reg, const uint8_t num_bytes, const uint8_t special)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af02      	add	r7, sp, #8
 8000f72:	4604      	mov	r4, r0
 8000f74:	4608      	mov	r0, r1
 8000f76:	4611      	mov	r1, r2
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4623      	mov	r3, r4
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71bb      	strb	r3, [r7, #6]
 8000f82:	460b      	mov	r3, r1
 8000f84:	717b      	strb	r3, [r7, #5]
 8000f86:	4613      	mov	r3, r2
 8000f88:	713b      	strb	r3, [r7, #4]
  // Blocking mode
	// Note: the buffer must be on the heap (no unsized pointers allowed) (I2C2_RX_Buffer)
  if(HAL_I2C_IsDeviceReady(&hi2c2, address, 3, 1000))
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	b299      	uxth	r1, r3
 8000f90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f94:	2203      	movs	r2, #3
 8000f96:	4841      	ldr	r0, [pc, #260]	@ (800109c <HAL_I2C_read_poll+0x130>)
 8000f98:	f001 fcd2 	bl	8002940 <HAL_I2C_IsDeviceReady>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d076      	beq.n	8001090 <HAL_I2C_read_poll+0x124>
	{
  	// set register to read from
		memset(&I2C2_TX_Buffer, 0, sizeof(I2C2_TX_Buffer));
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	483e      	ldr	r0, [pc, #248]	@ (80010a0 <HAL_I2C_read_poll+0x134>)
 8000fa8:	f005 f8f3 	bl	8006192 <memset>
		// if num_bytes is greater than 1, assume we just want to read offset to the init reg
		// TODO: We could add an option where the I2C2_RX_Buffer is pre-filled with registers and this overwrite is bypassed if needed
		if(special)
 8000fac:	793b      	ldrb	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d016      	beq.n	8000fe0 <HAL_I2C_read_poll+0x74>
		{
			// special is just all repeats
			for(int8_t byte_offset = 0; byte_offset < num_bytes; byte_offset++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	73fb      	strb	r3, [r7, #15]
 8000fb6:	e00d      	b.n	8000fd4 <HAL_I2C_read_poll+0x68>
			{
				I2C2_TX_Buffer[byte_offset] = reg + byte_offset;
 8000fb8:	79b9      	ldrb	r1, [r7, #6]
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc0:	440a      	add	r2, r1
 8000fc2:	b2d1      	uxtb	r1, r2
 8000fc4:	4a36      	ldr	r2, [pc, #216]	@ (80010a0 <HAL_I2C_read_poll+0x134>)
 8000fc6:	54d1      	strb	r1, [r2, r3]
			for(int8_t byte_offset = 0; byte_offset < num_bytes; byte_offset++)
 8000fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	3301      	adds	r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000fd8:	797b      	ldrb	r3, [r7, #5]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	dbec      	blt.n	8000fb8 <HAL_I2C_read_poll+0x4c>
 8000fde:	e015      	b.n	800100c <HAL_I2C_read_poll+0xa0>
			}

		}
		else
		{
			for(int8_t byte_offset = 0; byte_offset < num_bytes; byte_offset++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73bb      	strb	r3, [r7, #14]
 8000fe4:	e00d      	b.n	8001002 <HAL_I2C_read_poll+0x96>
			{
				I2C2_TX_Buffer[byte_offset] = reg + byte_offset;
 8000fe6:	79b9      	ldrb	r1, [r7, #6]
 8000fe8:	7bba      	ldrb	r2, [r7, #14]
 8000fea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fee:	440a      	add	r2, r1
 8000ff0:	b2d1      	uxtb	r1, r2
 8000ff2:	4a2b      	ldr	r2, [pc, #172]	@ (80010a0 <HAL_I2C_read_poll+0x134>)
 8000ff4:	54d1      	strb	r1, [r2, r3]
			for(int8_t byte_offset = 0; byte_offset < num_bytes; byte_offset++)
 8000ff6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	73bb      	strb	r3, [r7, #14]
 8001002:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001006:	797b      	ldrb	r3, [r7, #5]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbec      	blt.n	8000fe6 <HAL_I2C_read_poll+0x7a>
				//printf("** I2C read REG = %x ** \n\r", I2C2_RX_Buffer[byte_offset]);
			}
		}
		//printf("** I2C read start TX ** \n\r");
		// for bad reasons, we need to shift the address by one for reads and writes
		if(HAL_I2C_Master_Transmit(&hi2c2, address<<1, I2C2_TX_Buffer, num_bytes, 1000) != HAL_OK)
 800100c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001010:	b29b      	uxth	r3, r3
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	b299      	uxth	r1, r3
 8001016:	797b      	ldrb	r3, [r7, #5]
 8001018:	b29b      	uxth	r3, r3
 800101a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800101e:	9200      	str	r2, [sp, #0]
 8001020:	4a1f      	ldr	r2, [pc, #124]	@ (80010a0 <HAL_I2C_read_poll+0x134>)
 8001022:	481e      	ldr	r0, [pc, #120]	@ (800109c <HAL_I2C_read_poll+0x130>)
 8001024:	f001 fa7e 	bl	8002524 <HAL_I2C_Master_Transmit>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_I2C_read_poll+0xca>
		{
	    /* Error_Handler() function is called when Timeout error occurs.
	       When Acknowledge failure occurs (Slave don't acknowledge its address)
	       Master restarts communication */
			printf("** I2C read failed due to bad TX call! ** \n\r");
 800102e:	481d      	ldr	r0, [pc, #116]	@ (80010a4 <HAL_I2C_read_poll+0x138>)
 8001030:	f005 f85a 	bl	80060e8 <iprintf>
     /*	    if (HAL_I2C_GetError(&hi2c2) != HAL_I2C_ERROR_AF)
	    {
	      Error_Handler();
	      printf("** I2C read failed due to bad TX call! ** \n\r");
	    }*/
	    return;
 8001034:	e02f      	b.n	8001096 <HAL_I2C_read_poll+0x12a>
		}

		//printf("** I2C read start RX ** \n\r");
	  if(HAL_I2C_Master_Receive(&hi2c2, address<<1, I2C2_RX_Buffer, num_bytes, 1000) != HAL_OK)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	b29b      	uxth	r3, r3
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	b299      	uxth	r1, r3
 8001040:	797b      	ldrb	r3, [r7, #5]
 8001042:	b29b      	uxth	r3, r3
 8001044:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001048:	9200      	str	r2, [sp, #0]
 800104a:	4a17      	ldr	r2, [pc, #92]	@ (80010a8 <HAL_I2C_read_poll+0x13c>)
 800104c:	4813      	ldr	r0, [pc, #76]	@ (800109c <HAL_I2C_read_poll+0x130>)
 800104e:	f001 fb81 	bl	8002754 <HAL_I2C_Master_Receive>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_I2C_read_poll+0xf4>
	  {
	    /* Error_Handler() function is called when Timeout error occurs.
	       When Acknowledge failure occurs (Slave don't acknowledge it's address)
	       Master restarts communication */
	  	printf("** I2C read failed due to bad RX call! ** \n\r");
 8001058:	4814      	ldr	r0, [pc, #80]	@ (80010ac <HAL_I2C_read_poll+0x140>)
 800105a:	f005 f845 	bl	80060e8 <iprintf>
/*	    if (HAL_I2C_GetError(&hi2c2) != HAL_I2C_ERROR_AF)
	    {
	      Error_Handler();
	      printf("** I2C read failed due to bad RX call! ** \n\r");
	    }*/
	    return;
 800105e:	e01a      	b.n	8001096 <HAL_I2C_read_poll+0x12a>
	  }

	  if(special)
 8001060:	793b      	ldrb	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d017      	beq.n	8001096 <HAL_I2C_read_poll+0x12a>
	  {
			for(uint8_t byte_offset = 0; byte_offset < num_bytes; byte_offset++)
 8001066:	2300      	movs	r3, #0
 8001068:	737b      	strb	r3, [r7, #13]
 800106a:	e009      	b.n	8001080 <HAL_I2C_read_poll+0x114>
			{
				printf("%d, ", I2C2_RX_Buffer[byte_offset]);
 800106c:	7b7b      	ldrb	r3, [r7, #13]
 800106e:	4a0e      	ldr	r2, [pc, #56]	@ (80010a8 <HAL_I2C_read_poll+0x13c>)
 8001070:	5cd3      	ldrb	r3, [r2, r3]
 8001072:	4619      	mov	r1, r3
 8001074:	480e      	ldr	r0, [pc, #56]	@ (80010b0 <HAL_I2C_read_poll+0x144>)
 8001076:	f005 f837 	bl	80060e8 <iprintf>
			for(uint8_t byte_offset = 0; byte_offset < num_bytes; byte_offset++)
 800107a:	7b7b      	ldrb	r3, [r7, #13]
 800107c:	3301      	adds	r3, #1
 800107e:	737b      	strb	r3, [r7, #13]
 8001080:	7b7a      	ldrb	r2, [r7, #13]
 8001082:	797b      	ldrb	r3, [r7, #5]
 8001084:	429a      	cmp	r2, r3
 8001086:	d3f1      	bcc.n	800106c <HAL_I2C_read_poll+0x100>
			}
			printf("\n\r");
 8001088:	480a      	ldr	r0, [pc, #40]	@ (80010b4 <HAL_I2C_read_poll+0x148>)
 800108a:	f005 f82d 	bl	80060e8 <iprintf>
 800108e:	e002      	b.n	8001096 <HAL_I2C_read_poll+0x12a>
	  }
	}
	else
	{
		printf("** I2C read failed due to bad HAL_I2C_IsDeviceReady call! ** \n\r");
 8001090:	4809      	ldr	r0, [pc, #36]	@ (80010b8 <HAL_I2C_read_poll+0x14c>)
 8001092:	f005 f829 	bl	80060e8 <iprintf>
	}
}
 8001096:	3714      	adds	r7, #20
 8001098:	46bd      	mov	sp, r7
 800109a:	bd90      	pop	{r4, r7, pc}
 800109c:	20000284 	.word	0x20000284
 80010a0:	200001f0 	.word	0x200001f0
 80010a4:	08008204 	.word	0x08008204
 80010a8:	20000210 	.word	0x20000210
 80010ac:	08008234 	.word	0x08008234
 80010b0:	08008264 	.word	0x08008264
 80010b4:	0800826c 	.word	0x0800826c
 80010b8:	08008270 	.word	0x08008270

080010bc <garsidelegs_hw_sensors_imu_init>:
shift	The number of bits that our bit-slice is shifted from LSB*/

#define ICM20649_DEVICE_ID 0xE1 // Correct content of WHO_AM_I register for IMU
#define ICM20649_BANK(bank) ((bank_number & 0b11) << 4)
uint8_t garsidelegs_hw_sensors_imu_init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
	// Note: bank number persists until changed
	uint8_t bank_number = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	71fb      	strb	r3, [r7, #7]
	//uint8_t num_bytes = 0;

	// check whoami for IMU
	HAL_I2C_write_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_REG_BANK_SEL, ICM20649_BANK(bank_number));
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	461a      	mov	r2, r3
 80010d4:	217f      	movs	r1, #127	@ 0x7f
 80010d6:	2068      	movs	r0, #104	@ 0x68
 80010d8:	f7ff ff06 	bl	8000ee8 <HAL_I2C_write_poll>
	HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_WHOAMI, 1, 0);
 80010dc:	2300      	movs	r3, #0
 80010de:	2201      	movs	r2, #1
 80010e0:	2100      	movs	r1, #0
 80010e2:	2068      	movs	r0, #104	@ 0x68
 80010e4:	f7ff ff42 	bl	8000f6c <HAL_I2C_read_poll>
	// we expect 0xE1 back for WHOAMI
	printf("ICM20649 WHOAMI 0x%02X == 0x%02X\n\r", ICM20649_DEVICE_ID, I2C2_RX_Buffer[0]);
 80010e8:	4b54      	ldr	r3, [pc, #336]	@ (800123c <garsidelegs_hw_sensors_imu_init+0x180>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	21e1      	movs	r1, #225	@ 0xe1
 80010f0:	4853      	ldr	r0, [pc, #332]	@ (8001240 <garsidelegs_hw_sensors_imu_init+0x184>)
 80010f2:	f004 fff9 	bl	80060e8 <iprintf>

	// take the part out of (default) power saving mode by clearing bit 6
	HAL_I2C_write_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_PWR_MGMT_1, 0x00);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2106      	movs	r1, #6
 80010fa:	2068      	movs	r0, #104	@ 0x68
 80010fc:	f7ff fef4 	bl	8000ee8 <HAL_I2C_write_poll>
	HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_PWR_MGMT_1, 1, 0);
 8001100:	2300      	movs	r3, #0
 8001102:	2201      	movs	r2, #1
 8001104:	2106      	movs	r1, #6
 8001106:	2068      	movs	r0, #104	@ 0x68
 8001108:	f7ff ff30 	bl	8000f6c <HAL_I2C_read_poll>
	printf("ICM20649 Clear Sleep Mode 0x%02X == 0x%02X \n\r", 0x00, I2C2_RX_Buffer[0]);
 800110c:	4b4b      	ldr	r3, [pc, #300]	@ (800123c <garsidelegs_hw_sensors_imu_init+0x180>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	461a      	mov	r2, r3
 8001112:	2100      	movs	r1, #0
 8001114:	484b      	ldr	r0, [pc, #300]	@ (8001244 <garsidelegs_hw_sensors_imu_init+0x188>)
 8001116:	f004 ffe7 	bl	80060e8 <iprintf>

	HAL_I2C_write_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_PWR_MGMT_2, 0x00);
 800111a:	2200      	movs	r2, #0
 800111c:	2107      	movs	r1, #7
 800111e:	2068      	movs	r0, #104	@ 0x68
 8001120:	f7ff fee2 	bl	8000ee8 <HAL_I2C_write_poll>
	HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_PWR_MGMT_2, 1, 0);
 8001124:	2300      	movs	r3, #0
 8001126:	2201      	movs	r2, #1
 8001128:	2107      	movs	r1, #7
 800112a:	2068      	movs	r0, #104	@ 0x68
 800112c:	f7ff ff1e 	bl	8000f6c <HAL_I2C_read_poll>
	printf("ICM20649 Clear Accel Gyro Disable 0x%02X == 0x%02X \n\r", 0x00, I2C2_RX_Buffer[0]);
 8001130:	4b42      	ldr	r3, [pc, #264]	@ (800123c <garsidelegs_hw_sensors_imu_init+0x180>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	2100      	movs	r1, #0
 8001138:	4843      	ldr	r0, [pc, #268]	@ (8001248 <garsidelegs_hw_sensors_imu_init+0x18c>)
 800113a:	f004 ffd5 	bl	80060e8 <iprintf>

	//// Set gyro rate divisor (ODR) and LPFILT behaviour
	// For now, we'll pick a smoother filter for fun (change later if delay is too large)
	// set register bank to 2
	bank_number = 2;
 800113e:	2302      	movs	r3, #2
 8001140:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_write_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_REG_BANK_SEL, ICM20649_BANK(bank_number));
 8001142:	79fb      	ldrb	r3, [r7, #7]
 8001144:	011b      	lsls	r3, r3, #4
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800114c:	b2db      	uxtb	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	217f      	movs	r1, #127	@ 0x7f
 8001152:	2068      	movs	r0, #104	@ 0x68
 8001154:	f7ff fec8 	bl	8000ee8 <HAL_I2C_write_poll>

	// zero for max ODR, for 1100/11 -> 100Hz, go for 10 for now
	const uint8_t ODR_factor_gyro = 10;
 8001158:	230a      	movs	r3, #10
 800115a:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_write_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B2_GYRO_SMPLRT_DIV, ODR_factor_gyro);
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	461a      	mov	r2, r3
 8001160:	2100      	movs	r1, #0
 8001162:	2068      	movs	r0, #104	@ 0x68
 8001164:	f7ff fec0 	bl	8000ee8 <HAL_I2C_write_poll>
	// verify accel ODR was set correctly
	HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B2_GYRO_SMPLRT_DIV, 1, 0);
 8001168:	2300      	movs	r3, #0
 800116a:	2201      	movs	r2, #1
 800116c:	2100      	movs	r1, #0
 800116e:	2068      	movs	r0, #104	@ 0x68
 8001170:	f7ff fefc 	bl	8000f6c <HAL_I2C_read_poll>
	printf("ICM20649 Gyro ODR 0x%02X == 0x%02X \n\r", ODR_factor_gyro, I2C2_RX_Buffer[0]);
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	4a31      	ldr	r2, [pc, #196]	@ (800123c <garsidelegs_hw_sensors_imu_init+0x180>)
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	4619      	mov	r1, r3
 800117c:	4833      	ldr	r0, [pc, #204]	@ (800124c <garsidelegs_hw_sensors_imu_init+0x190>)
 800117e:	f004 ffb3 	bl	80060e8 <iprintf>
	// 00 = ±500 dps
	// 01= ±1000 dps
	// 10 = ±2000 dps
	// 11 = ±4000 dps
	// 0 GYRO_FCHOICE - Must be 1 for non-zero GYRO_DLPFCFG
	uint8_t gyro_config = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	717b      	strb	r3, [r7, #5]
	//gyro_config |= 0x4 << 3; 		// GYRO_DLPFCFG
	gyro_config |= ICM20649_GYRO_RANGE_1000_DPS << 1;   // GYRO_FS_SEL
 8001186:	797b      	ldrb	r3, [r7, #5]
 8001188:	f043 0302 	orr.w	r3, r3, #2
 800118c:	717b      	strb	r3, [r7, #5]
	//gyro_config |= 0x1;         // GYRO_FCHOICE
	HAL_I2C_write_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B2_GYRO_CONFIG_1, gyro_config);
 800118e:	797b      	ldrb	r3, [r7, #5]
 8001190:	461a      	mov	r2, r3
 8001192:	2101      	movs	r1, #1
 8001194:	2068      	movs	r0, #104	@ 0x68
 8001196:	f7ff fea7 	bl	8000ee8 <HAL_I2C_write_poll>

	// verify gyro config was set correctly
	HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B2_GYRO_CONFIG_1, 1, 0);
 800119a:	2300      	movs	r3, #0
 800119c:	2201      	movs	r2, #1
 800119e:	2101      	movs	r1, #1
 80011a0:	2068      	movs	r0, #104	@ 0x68
 80011a2:	f7ff fee3 	bl	8000f6c <HAL_I2C_read_poll>
	printf("ICM20649 Gyro Config 0x%02X == 0x%02X \n\r", gyro_config, I2C2_RX_Buffer[0]);
 80011a6:	797b      	ldrb	r3, [r7, #5]
 80011a8:	4a24      	ldr	r2, [pc, #144]	@ (800123c <garsidelegs_hw_sensors_imu_init+0x180>)
 80011aa:	7812      	ldrb	r2, [r2, #0]
 80011ac:	4619      	mov	r1, r3
 80011ae:	4828      	ldr	r0, [pc, #160]	@ (8001250 <garsidelegs_hw_sensors_imu_init+0x194>)
 80011b0:	f004 ff9a 	bl	80060e8 <iprintf>

	//// Set accel rate divisor (ODR) and LPFILT behaviour
	// For now, we'll pick a smoother filter for fun (change later if delay is too large)
	// zero for max ODR, for 1100/11 -> 100Hz, go for 10 for now
	const uint8_t ODR_factor_accel = 10;
 80011b4:	230a      	movs	r3, #10
 80011b6:	713b      	strb	r3, [r7, #4]
	HAL_I2C_write_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B2_ACCEL_SMPLRT_DIV_2, ODR_factor_accel);
 80011b8:	793b      	ldrb	r3, [r7, #4]
 80011ba:	461a      	mov	r2, r3
 80011bc:	2111      	movs	r1, #17
 80011be:	2068      	movs	r0, #104	@ 0x68
 80011c0:	f7ff fe92 	bl	8000ee8 <HAL_I2C_write_poll>

	// verify accel ODR was set correctly
	HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B2_ACCEL_SMPLRT_DIV_2, 1, 0);
 80011c4:	2300      	movs	r3, #0
 80011c6:	2201      	movs	r2, #1
 80011c8:	2111      	movs	r1, #17
 80011ca:	2068      	movs	r0, #104	@ 0x68
 80011cc:	f7ff fece 	bl	8000f6c <HAL_I2C_read_poll>
	printf("ICM20649 Accel ODR 0x%02X == 0x%02X \n\r", ODR_factor_accel, I2C2_RX_Buffer[0]);
 80011d0:	793b      	ldrb	r3, [r7, #4]
 80011d2:	4a1a      	ldr	r2, [pc, #104]	@ (800123c <garsidelegs_hw_sensors_imu_init+0x180>)
 80011d4:	7812      	ldrb	r2, [r2, #0]
 80011d6:	4619      	mov	r1, r3
 80011d8:	481e      	ldr	r0, [pc, #120]	@ (8001254 <garsidelegs_hw_sensors_imu_init+0x198>)
 80011da:	f004 ff85 	bl	80060e8 <iprintf>
	// 00: ±4g
	// 01: ±8g
	// 10: ±16g
	// 11: ±30g
	// 0 ACCEL_FCHOICE  - Must be 1 for non-zero ACCEL_DLPFCFG
	uint8_t accel_config = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	70fb      	strb	r3, [r7, #3]
	//accel_config |= 0x4 << 3; 	 // GYRO_DLPFCFG
	accel_config |= ICM20649_ACCEL_RANGE_30_G << 1;   // GYRO_FS_SEL
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	f043 0306 	orr.w	r3, r3, #6
 80011e8:	70fb      	strb	r3, [r7, #3]
	//accel_config |= 0x1;         // GYRO_FCHOICE
	HAL_I2C_write_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B2_ACCEL_CONFIG_1, accel_config);
 80011ea:	78fb      	ldrb	r3, [r7, #3]
 80011ec:	461a      	mov	r2, r3
 80011ee:	2114      	movs	r1, #20
 80011f0:	2068      	movs	r0, #104	@ 0x68
 80011f2:	f7ff fe79 	bl	8000ee8 <HAL_I2C_write_poll>

	// verify accel config was set correctly
	HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B2_ACCEL_CONFIG_1, 1, 0);
 80011f6:	2300      	movs	r3, #0
 80011f8:	2201      	movs	r2, #1
 80011fa:	2114      	movs	r1, #20
 80011fc:	2068      	movs	r0, #104	@ 0x68
 80011fe:	f7ff feb5 	bl	8000f6c <HAL_I2C_read_poll>
	printf("ICM20649 Accel Config 0x%02X == 0x%02X \n\r", accel_config, I2C2_RX_Buffer[0]);
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	4a0d      	ldr	r2, [pc, #52]	@ (800123c <garsidelegs_hw_sensors_imu_init+0x180>)
 8001206:	7812      	ldrb	r2, [r2, #0]
 8001208:	4619      	mov	r1, r3
 800120a:	4813      	ldr	r0, [pc, #76]	@ (8001258 <garsidelegs_hw_sensors_imu_init+0x19c>)
 800120c:	f004 ff6c 	bl	80060e8 <iprintf>

	// Revert bank number
	bank_number = 0;
 8001210:	2300      	movs	r3, #0
 8001212:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_write_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_REG_BANK_SEL, ICM20649_BANK(bank_number));
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	011b      	lsls	r3, r3, #4
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800121e:	b2db      	uxtb	r3, r3
 8001220:	461a      	mov	r2, r3
 8001222:	217f      	movs	r1, #127	@ 0x7f
 8001224:	2068      	movs	r0, #104	@ 0x68
 8001226:	f7ff fe5f 	bl	8000ee8 <HAL_I2C_write_poll>
	printf("ICM20649 Done Init \n\r\n\r");
 800122a:	480c      	ldr	r0, [pc, #48]	@ (800125c <garsidelegs_hw_sensors_imu_init+0x1a0>)
 800122c:	f004 ff5c 	bl	80060e8 <iprintf>
	return 0;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000210 	.word	0x20000210
 8001240:	080082b0 	.word	0x080082b0
 8001244:	080082d4 	.word	0x080082d4
 8001248:	08008304 	.word	0x08008304
 800124c:	0800833c 	.word	0x0800833c
 8001250:	08008364 	.word	0x08008364
 8001254:	08008390 	.word	0x08008390
 8001258:	080083b8 	.word	0x080083b8
 800125c:	080083e4 	.word	0x080083e4

08001260 <garsidelegs_hw_sensors_imu_process_poll_sample>:

void garsidelegs_hw_sensors_imu_process_poll_sample(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	//printf("** IMU read start ** \n\r");

	// Note: bank number persists until changed
	uint8_t bank_number = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	71fb      	strb	r3, [r7, #7]
	uint8_t num_bytes = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	71bb      	strb	r3, [r7, #6]
			rawAccX,
			rawAccY,
			rawAccZ,
			temperature);*/

	num_bytes = 2;
 800126e:	2302      	movs	r3, #2
 8001270:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_read_poll(ICM20649_I2CADDR_DEFAULT, ICM20X_B0_GYRO_XOUT_H, num_bytes, 1);
 8001272:	79ba      	ldrb	r2, [r7, #6]
 8001274:	2301      	movs	r3, #1
 8001276:	2133      	movs	r1, #51	@ 0x33
 8001278:	2068      	movs	r0, #104	@ 0x68
 800127a:	f7ff fe77 	bl	8000f6c <HAL_I2C_read_poll>


}
 800127e:	bf00      	nop
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001290:	1d39      	adds	r1, r7, #4
 8001292:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001296:	2201      	movs	r2, #1
 8001298:	4803      	ldr	r0, [pc, #12]	@ (80012a8 <__io_putchar+0x20>)
 800129a:	f003 fa22 	bl	80046e2 <HAL_UART_Transmit>

  return ch;
 800129e:	687b      	ldr	r3, [r7, #4]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000033c 	.word	0x2000033c

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b2:	f000 fd7e 	bl	8001db2 <HAL_Init>

  /* USER CODE BEGIN Init */
  const uint32_t led_flash_delay_ms = 200;
 80012b6:	23c8      	movs	r3, #200	@ 0xc8
 80012b8:	607b      	str	r3, [r7, #4]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ba:	f000 f821 	bl	8001300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012be:	f000 f9ab 	bl	8001618 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80012c2:	f000 f949 	bl	8001558 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012c6:	f000 f977 	bl	80015b8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80012ca:	f000 f887 	bl	80013dc <MX_I2C1_Init>
  MX_SPI1_Init();
 80012ce:	f000 f905 	bl	80014dc <MX_SPI1_Init>
  MX_I2C2_Init();
 80012d2:	f000 f8c3 	bl	800145c <MX_I2C2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  printf("** Start While Loop ** \n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r");
 80012d6:	4808      	ldr	r0, [pc, #32]	@ (80012f8 <main+0x4c>)
 80012d8:	f004 ff06 	bl	80060e8 <iprintf>

  garsidelegs_hw_sensors_imu_init();
 80012dc:	f7ff feee 	bl	80010bc <garsidelegs_hw_sensors_imu_init>

  while (1)
  {

  	garsidelegs_hw_sensors_imu_process_poll_sample();
 80012e0:	f7ff ffbe 	bl	8001260 <garsidelegs_hw_sensors_imu_process_poll_sample>

	  // quick "alive" check for LEDs
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin, GPIO_PIN_SET);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2101      	movs	r1, #1
 80012e8:	4804      	ldr	r0, [pc, #16]	@ (80012fc <main+0x50>)
 80012ea:	f001 f865 	bl	80023b8 <HAL_GPIO_WritePin>
	  HAL_Delay(led_flash_delay_ms);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 fdbc 	bl	8001e6c <HAL_Delay>
  	garsidelegs_hw_sensors_imu_process_poll_sample();
 80012f4:	bf00      	nop
 80012f6:	e7f3      	b.n	80012e0 <main+0x34>
 80012f8:	080083fc 	.word	0x080083fc
 80012fc:	40020400 	.word	0x40020400

08001300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b094      	sub	sp, #80	@ 0x50
 8001304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001306:	f107 0320 	add.w	r3, r7, #32
 800130a:	2230      	movs	r2, #48	@ 0x30
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f004 ff3f 	bl	8006192 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001314:	f107 030c 	add.w	r3, r7, #12
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001324:	f002 f870 	bl	8003408 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001328:	4b2a      	ldr	r3, [pc, #168]	@ (80013d4 <SystemClock_Config+0xd4>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	4a29      	ldr	r2, [pc, #164]	@ (80013d4 <SystemClock_Config+0xd4>)
 800132e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001332:	6413      	str	r3, [r2, #64]	@ 0x40
 8001334:	4b27      	ldr	r3, [pc, #156]	@ (80013d4 <SystemClock_Config+0xd4>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001340:	4b25      	ldr	r3, [pc, #148]	@ (80013d8 <SystemClock_Config+0xd8>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a24      	ldr	r2, [pc, #144]	@ (80013d8 <SystemClock_Config+0xd8>)
 8001346:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800134a:	6013      	str	r3, [r2, #0]
 800134c:	4b22      	ldr	r3, [pc, #136]	@ (80013d8 <SystemClock_Config+0xd8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001358:	2301      	movs	r3, #1
 800135a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800135c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001360:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001362:	2302      	movs	r3, #2
 8001364:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001366:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800136a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800136c:	2304      	movs	r3, #4
 800136e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001370:	23d8      	movs	r3, #216	@ 0xd8
 8001372:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001374:	2302      	movs	r3, #2
 8001376:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001378:	2309      	movs	r3, #9
 800137a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137c:	f107 0320 	add.w	r3, r7, #32
 8001380:	4618      	mov	r0, r3
 8001382:	f002 f8a1 	bl	80034c8 <HAL_RCC_OscConfig>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800138c:	f000 f9f2 	bl	8001774 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001390:	f002 f84a 	bl	8003428 <HAL_PWREx_EnableOverDrive>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800139a:	f000 f9eb 	bl	8001774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139e:	230f      	movs	r3, #15
 80013a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a2:	2302      	movs	r3, #2
 80013a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	2107      	movs	r1, #7
 80013bc:	4618      	mov	r0, r3
 80013be:	f002 fb27 	bl	8003a10 <HAL_RCC_ClockConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80013c8:	f000 f9d4 	bl	8001774 <Error_Handler>
  }
}
 80013cc:	bf00      	nop
 80013ce:	3750      	adds	r7, #80	@ 0x50
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40007000 	.word	0x40007000

080013dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 1 */

	// define i2c address etc

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <MX_I2C1_Init+0x74>)
 80013e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001454 <MX_I2C1_Init+0x78>)
 80013e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <MX_I2C1_Init+0x74>)
 80013e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001458 <MX_I2C1_Init+0x7c>)
 80013ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013ec:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <MX_I2C1_Init+0x74>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <MX_I2C1_Init+0x74>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <MX_I2C1_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013fe:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <MX_I2C1_Init+0x74>)
 8001400:	2200      	movs	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <MX_I2C1_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <MX_I2C1_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001410:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <MX_I2C1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001416:	480e      	ldr	r0, [pc, #56]	@ (8001450 <MX_I2C1_Init+0x74>)
 8001418:	f000 ffe8 	bl	80023ec <HAL_I2C_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001422:	f000 f9a7 	bl	8001774 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001426:	2100      	movs	r1, #0
 8001428:	4809      	ldr	r0, [pc, #36]	@ (8001450 <MX_I2C1_Init+0x74>)
 800142a:	f001 fe1b 	bl	8003064 <HAL_I2CEx_ConfigAnalogFilter>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001434:	f000 f99e 	bl	8001774 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001438:	2100      	movs	r1, #0
 800143a:	4805      	ldr	r0, [pc, #20]	@ (8001450 <MX_I2C1_Init+0x74>)
 800143c:	f001 fe5d 	bl	80030fa <HAL_I2CEx_ConfigDigitalFilter>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001446:	f000 f995 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000230 	.word	0x20000230
 8001454:	40005400 	.word	0x40005400
 8001458:	20404768 	.word	0x20404768

0800145c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <MX_I2C2_Init+0x74>)
 8001462:	4a1c      	ldr	r2, [pc, #112]	@ (80014d4 <MX_I2C2_Init+0x78>)
 8001464:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8001466:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <MX_I2C2_Init+0x74>)
 8001468:	4a1b      	ldr	r2, [pc, #108]	@ (80014d8 <MX_I2C2_Init+0x7c>)
 800146a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800146c:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <MX_I2C2_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001472:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <MX_I2C2_Init+0x74>)
 8001474:	2201      	movs	r2, #1
 8001476:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001478:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <MX_I2C2_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800147e:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <MX_I2C2_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <MX_I2C2_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148a:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <MX_I2C2_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001490:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <MX_I2C2_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001496:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <MX_I2C2_Init+0x74>)
 8001498:	f000 ffa8 	bl	80023ec <HAL_I2C_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80014a2:	f000 f967 	bl	8001774 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014a6:	2100      	movs	r1, #0
 80014a8:	4809      	ldr	r0, [pc, #36]	@ (80014d0 <MX_I2C2_Init+0x74>)
 80014aa:	f001 fddb 	bl	8003064 <HAL_I2CEx_ConfigAnalogFilter>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80014b4:	f000 f95e 	bl	8001774 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014b8:	2100      	movs	r1, #0
 80014ba:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <MX_I2C2_Init+0x74>)
 80014bc:	f001 fe1d 	bl	80030fa <HAL_I2CEx_ConfigDigitalFilter>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80014c6:	f000 f955 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000284 	.word	0x20000284
 80014d4:	40005800 	.word	0x40005800
 80014d8:	20404768 	.word	0x20404768

080014dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001550 <MX_SPI1_Init+0x74>)
 80014e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001554 <MX_SPI1_Init+0x78>)
 80014e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <MX_SPI1_Init+0x74>)
 80014e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <MX_SPI1_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80014f4:	4b16      	ldr	r3, [pc, #88]	@ (8001550 <MX_SPI1_Init+0x74>)
 80014f6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80014fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014fc:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <MX_SPI1_Init+0x74>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001502:	4b13      	ldr	r3, [pc, #76]	@ (8001550 <MX_SPI1_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001508:	4b11      	ldr	r3, [pc, #68]	@ (8001550 <MX_SPI1_Init+0x74>)
 800150a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800150e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001510:	4b0f      	ldr	r3, [pc, #60]	@ (8001550 <MX_SPI1_Init+0x74>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001516:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <MX_SPI1_Init+0x74>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <MX_SPI1_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <MX_SPI1_Init+0x74>)
 8001524:	2200      	movs	r2, #0
 8001526:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001528:	4b09      	ldr	r3, [pc, #36]	@ (8001550 <MX_SPI1_Init+0x74>)
 800152a:	2207      	movs	r2, #7
 800152c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800152e:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <MX_SPI1_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <MX_SPI1_Init+0x74>)
 8001536:	2208      	movs	r2, #8
 8001538:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	@ (8001550 <MX_SPI1_Init+0x74>)
 800153c:	f002 ffd8 	bl	80044f0 <HAL_SPI_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001546:	f000 f915 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002d8 	.word	0x200002d8
 8001554:	40013000 	.word	0x40013000

08001558 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800155c:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 800155e:	4a15      	ldr	r2, [pc, #84]	@ (80015b4 <MX_USART3_UART_Init+0x5c>)
 8001560:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001562:	4b13      	ldr	r3, [pc, #76]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 8001564:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001568:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800156a:	4b11      	ldr	r3, [pc, #68]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001570:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 800157e:	220c      	movs	r2, #12
 8001580:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001588:	4b09      	ldr	r3, [pc, #36]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158e:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	@ (80015b0 <MX_USART3_UART_Init+0x58>)
 800159c:	f003 f853 	bl	8004646 <HAL_UART_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015a6:	f000 f8e5 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000033c 	.word	0x2000033c
 80015b4:	40004800 	.word	0x40004800

080015b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80015bc:	4b15      	ldr	r3, [pc, #84]	@ (8001614 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015be:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80015c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015c6:	2206      	movs	r2, #6
 80015c8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80015ca:	4b12      	ldr	r3, [pc, #72]	@ (8001614 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015cc:	2202      	movs	r2, #2
 80015ce:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80015d0:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80015d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001614 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015d8:	2202      	movs	r2, #2
 80015da:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80015dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001614 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015de:	2201      	movs	r2, #1
 80015e0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80015e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001614 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80015ee:	4b09      	ldr	r3, [pc, #36]	@ (8001614 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80015f4:	4b07      	ldr	r3, [pc, #28]	@ (8001614 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015f6:	2201      	movs	r2, #1
 80015f8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80015fa:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001602:	f001 fdc6 	bl	8003192 <HAL_PCD_Init>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_USB_OTG_FS_PCD_Init+0x58>
  {
    Error_Handler();
 800160c:	f000 f8b2 	bl	8001774 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200003c4 	.word	0x200003c4

08001618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	@ 0x30
 800161c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161e:	f107 031c 	add.w	r3, r7, #28
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
 800162c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800162e:	4b4d      	ldr	r3, [pc, #308]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	4a4c      	ldr	r2, [pc, #304]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	6313      	str	r3, [r2, #48]	@ 0x30
 800163a:	4b4a      	ldr	r3, [pc, #296]	@ (8001764 <MX_GPIO_Init+0x14c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	61bb      	str	r3, [r7, #24]
 8001644:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001646:	4b47      	ldr	r3, [pc, #284]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	4a46      	ldr	r2, [pc, #280]	@ (8001764 <MX_GPIO_Init+0x14c>)
 800164c:	f043 0320 	orr.w	r3, r3, #32
 8001650:	6313      	str	r3, [r2, #48]	@ 0x30
 8001652:	4b44      	ldr	r3, [pc, #272]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	f003 0320 	and.w	r3, r3, #32
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800165e:	4b41      	ldr	r3, [pc, #260]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	4a40      	ldr	r2, [pc, #256]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001668:	6313      	str	r3, [r2, #48]	@ 0x30
 800166a:	4b3e      	ldr	r3, [pc, #248]	@ (8001764 <MX_GPIO_Init+0x14c>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	4b3b      	ldr	r3, [pc, #236]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a3a      	ldr	r2, [pc, #232]	@ (8001764 <MX_GPIO_Init+0x14c>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b38      	ldr	r3, [pc, #224]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	4b35      	ldr	r3, [pc, #212]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	4a34      	ldr	r2, [pc, #208]	@ (8001764 <MX_GPIO_Init+0x14c>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	6313      	str	r3, [r2, #48]	@ 0x30
 800169a:	4b32      	ldr	r3, [pc, #200]	@ (8001764 <MX_GPIO_Init+0x14c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	60bb      	str	r3, [r7, #8]
 80016a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001764 <MX_GPIO_Init+0x14c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001764 <MX_GPIO_Init+0x14c>)
 80016ac:	f043 0308 	orr.w	r3, r3, #8
 80016b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001764 <MX_GPIO_Init+0x14c>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b6:	f003 0308 	and.w	r3, r3, #8
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016be:	4b29      	ldr	r3, [pc, #164]	@ (8001764 <MX_GPIO_Init+0x14c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a28      	ldr	r2, [pc, #160]	@ (8001764 <MX_GPIO_Init+0x14c>)
 80016c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b26      	ldr	r3, [pc, #152]	@ (8001764 <MX_GPIO_Init+0x14c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80016d6:	2200      	movs	r2, #0
 80016d8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80016dc:	4822      	ldr	r0, [pc, #136]	@ (8001768 <MX_GPIO_Init+0x150>)
 80016de:	f000 fe6b 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2140      	movs	r1, #64	@ 0x40
 80016e6:	4821      	ldr	r0, [pc, #132]	@ (800176c <MX_GPIO_Init+0x154>)
 80016e8:	f000 fe66 	bl	80023b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80016ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016f2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4619      	mov	r1, r3
 8001702:	481b      	ldr	r0, [pc, #108]	@ (8001770 <MX_GPIO_Init+0x158>)
 8001704:	f000 fcbc 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001708:	f244 0381 	movw	r3, #16513	@ 0x4081
 800170c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2301      	movs	r3, #1
 8001710:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	4619      	mov	r1, r3
 8001720:	4811      	ldr	r0, [pc, #68]	@ (8001768 <MX_GPIO_Init+0x150>)
 8001722:	f000 fcad 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001726:	2340      	movs	r3, #64	@ 0x40
 8001728:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172a:	2301      	movs	r3, #1
 800172c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001736:	f107 031c 	add.w	r3, r7, #28
 800173a:	4619      	mov	r1, r3
 800173c:	480b      	ldr	r0, [pc, #44]	@ (800176c <MX_GPIO_Init+0x154>)
 800173e:	f000 fc9f 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001742:	2380      	movs	r3, #128	@ 0x80
 8001744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_GPIO_Init+0x154>)
 8001756:	f000 fc93 	bl	8002080 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800175a:	bf00      	nop
 800175c:	3730      	adds	r7, #48	@ 0x30
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800
 8001768:	40020400 	.word	0x40020400
 800176c:	40021800 	.word	0x40021800
 8001770:	40020800 	.word	0x40020800

08001774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001778:	b672      	cpsid	i
}
 800177a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800177c:	bf00      	nop
 800177e:	e7fd      	b.n	800177c <Error_Handler+0x8>

08001780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <HAL_MspInit+0x44>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	4a0e      	ldr	r2, [pc, #56]	@ (80017c4 <HAL_MspInit+0x44>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	@ 0x40
 8001792:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <HAL_MspInit+0x44>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <HAL_MspInit+0x44>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a2:	4a08      	ldr	r2, [pc, #32]	@ (80017c4 <HAL_MspInit+0x44>)
 80017a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_MspInit+0x44>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800

080017c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b0ac      	sub	sp, #176	@ 0xb0
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	2280      	movs	r2, #128	@ 0x80
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f004 fcd2 	bl	8006192 <memset>
  if(hi2c->Instance==I2C1)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a43      	ldr	r2, [pc, #268]	@ (8001900 <HAL_I2C_MspInit+0x138>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d13d      	bne.n	8001874 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017fc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017fe:	2300      	movs	r3, #0
 8001800:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	4618      	mov	r0, r3
 8001808:	f002 fb28 	bl	8003e5c <HAL_RCCEx_PeriphCLKConfig>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001812:	f7ff ffaf 	bl	8001774 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	4b3b      	ldr	r3, [pc, #236]	@ (8001904 <HAL_I2C_MspInit+0x13c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	4a3a      	ldr	r2, [pc, #232]	@ (8001904 <HAL_I2C_MspInit+0x13c>)
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6313      	str	r3, [r2, #48]	@ 0x30
 8001822:	4b38      	ldr	r3, [pc, #224]	@ (8001904 <HAL_I2C_MspInit+0x13c>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	61bb      	str	r3, [r7, #24]
 800182c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800182e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001832:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001836:	2312      	movs	r3, #18
 8001838:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001848:	2304      	movs	r3, #4
 800184a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001852:	4619      	mov	r1, r3
 8001854:	482c      	ldr	r0, [pc, #176]	@ (8001908 <HAL_I2C_MspInit+0x140>)
 8001856:	f000 fc13 	bl	8002080 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800185a:	4b2a      	ldr	r3, [pc, #168]	@ (8001904 <HAL_I2C_MspInit+0x13c>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	4a29      	ldr	r2, [pc, #164]	@ (8001904 <HAL_I2C_MspInit+0x13c>)
 8001860:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001864:	6413      	str	r3, [r2, #64]	@ 0x40
 8001866:	4b27      	ldr	r3, [pc, #156]	@ (8001904 <HAL_I2C_MspInit+0x13c>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001872:	e040      	b.n	80018f6 <HAL_I2C_MspInit+0x12e>
  else if(hi2c->Instance==I2C2)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a24      	ldr	r2, [pc, #144]	@ (800190c <HAL_I2C_MspInit+0x144>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d13b      	bne.n	80018f6 <HAL_I2C_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800187e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001882:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001884:	2300      	movs	r3, #0
 8001886:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001888:	f107 031c 	add.w	r3, r7, #28
 800188c:	4618      	mov	r0, r3
 800188e:	f002 fae5 	bl	8003e5c <HAL_RCCEx_PeriphCLKConfig>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <HAL_I2C_MspInit+0xd4>
      Error_Handler();
 8001898:	f7ff ff6c 	bl	8001774 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800189c:	4b19      	ldr	r3, [pc, #100]	@ (8001904 <HAL_I2C_MspInit+0x13c>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a0:	4a18      	ldr	r2, [pc, #96]	@ (8001904 <HAL_I2C_MspInit+0x13c>)
 80018a2:	f043 0320 	orr.w	r3, r3, #32
 80018a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a8:	4b16      	ldr	r3, [pc, #88]	@ (8001904 <HAL_I2C_MspInit+0x13c>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ac:	f003 0320 	and.w	r3, r3, #32
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018b4:	2303      	movs	r3, #3
 80018b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018ba:	2312      	movs	r3, #18
 80018bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018cc:	2304      	movs	r3, #4
 80018ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018d6:	4619      	mov	r1, r3
 80018d8:	480d      	ldr	r0, [pc, #52]	@ (8001910 <HAL_I2C_MspInit+0x148>)
 80018da:	f000 fbd1 	bl	8002080 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018de:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <HAL_I2C_MspInit+0x13c>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	4a08      	ldr	r2, [pc, #32]	@ (8001904 <HAL_I2C_MspInit+0x13c>)
 80018e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ea:	4b06      	ldr	r3, [pc, #24]	@ (8001904 <HAL_I2C_MspInit+0x13c>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
}
 80018f6:	bf00      	nop
 80018f8:	37b0      	adds	r7, #176	@ 0xb0
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40005400 	.word	0x40005400
 8001904:	40023800 	.word	0x40023800
 8001908:	40020400 	.word	0x40020400
 800190c:	40005800 	.word	0x40005800
 8001910:	40021400 	.word	0x40021400

08001914 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08a      	sub	sp, #40	@ 0x28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a17      	ldr	r2, [pc, #92]	@ (8001990 <HAL_SPI_MspInit+0x7c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d127      	bne.n	8001986 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001936:	4b17      	ldr	r3, [pc, #92]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193a:	4a16      	ldr	r2, [pc, #88]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 800193c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001940:	6453      	str	r3, [r2, #68]	@ 0x44
 8001942:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	4b11      	ldr	r3, [pc, #68]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001952:	4a10      	ldr	r2, [pc, #64]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6313      	str	r3, [r2, #48]	@ 0x30
 800195a:	4b0e      	ldr	r3, [pc, #56]	@ (8001994 <HAL_SPI_MspInit+0x80>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001966:	23e0      	movs	r3, #224	@ 0xe0
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196a:	2302      	movs	r3, #2
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001976:	2305      	movs	r3, #5
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	4619      	mov	r1, r3
 8001980:	4805      	ldr	r0, [pc, #20]	@ (8001998 <HAL_SPI_MspInit+0x84>)
 8001982:	f000 fb7d 	bl	8002080 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	@ 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40013000 	.word	0x40013000
 8001994:	40023800 	.word	0x40023800
 8001998:	40020000 	.word	0x40020000

0800199c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b0aa      	sub	sp, #168	@ 0xa8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2280      	movs	r2, #128	@ 0x80
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f004 fbe8 	bl	8006192 <memset>
  if(huart->Instance==USART3)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a22      	ldr	r2, [pc, #136]	@ (8001a50 <HAL_UART_MspInit+0xb4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d13c      	bne.n	8001a46 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019d0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019d2:	2300      	movs	r3, #0
 80019d4:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019d6:	f107 0314 	add.w	r3, r7, #20
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 fa3e 	bl	8003e5c <HAL_RCCEx_PeriphCLKConfig>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80019e6:	f7ff fec5 	bl	8001774 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <HAL_UART_MspInit+0xb8>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	4a19      	ldr	r2, [pc, #100]	@ (8001a54 <HAL_UART_MspInit+0xb8>)
 80019f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019f6:	4b17      	ldr	r3, [pc, #92]	@ (8001a54 <HAL_UART_MspInit+0xb8>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a02:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <HAL_UART_MspInit+0xb8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a13      	ldr	r2, [pc, #76]	@ (8001a54 <HAL_UART_MspInit+0xb8>)
 8001a08:	f043 0308 	orr.w	r3, r3, #8
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <HAL_UART_MspInit+0xb8>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a34:	2307      	movs	r3, #7
 8001a36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a3a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <HAL_UART_MspInit+0xbc>)
 8001a42:	f000 fb1d 	bl	8002080 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001a46:	bf00      	nop
 8001a48:	37a8      	adds	r7, #168	@ 0xa8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40004800 	.word	0x40004800
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40020c00 	.word	0x40020c00

08001a5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0aa      	sub	sp, #168	@ 0xa8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2280      	movs	r2, #128	@ 0x80
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f004 fb88 	bl	8006192 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a8a:	d159      	bne.n	8001b40 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001a8c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a90:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a98:	f107 0314 	add.w	r3, r7, #20
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f002 f9dd 	bl	8003e5c <HAL_RCCEx_PeriphCLKConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001aa8:	f7ff fe64 	bl	8001774 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aac:	4b26      	ldr	r3, [pc, #152]	@ (8001b48 <HAL_PCD_MspInit+0xec>)
 8001aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab0:	4a25      	ldr	r2, [pc, #148]	@ (8001b48 <HAL_PCD_MspInit+0xec>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab8:	4b23      	ldr	r3, [pc, #140]	@ (8001b48 <HAL_PCD_MspInit+0xec>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001ac4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001ac8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001ade:	230a      	movs	r3, #10
 8001ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4818      	ldr	r0, [pc, #96]	@ (8001b4c <HAL_PCD_MspInit+0xf0>)
 8001aec:	f000 fac8 	bl	8002080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001af0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001af4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b04:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4810      	ldr	r0, [pc, #64]	@ (8001b4c <HAL_PCD_MspInit+0xf0>)
 8001b0c:	f000 fab8 	bl	8002080 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b10:	4b0d      	ldr	r3, [pc, #52]	@ (8001b48 <HAL_PCD_MspInit+0xec>)
 8001b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b14:	4a0c      	ldr	r2, [pc, #48]	@ (8001b48 <HAL_PCD_MspInit+0xec>)
 8001b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b1a:	6353      	str	r3, [r2, #52]	@ 0x34
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <HAL_PCD_MspInit+0xec>)
 8001b1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <HAL_PCD_MspInit+0xec>)
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2c:	4a06      	ldr	r2, [pc, #24]	@ (8001b48 <HAL_PCD_MspInit+0xec>)
 8001b2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b32:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <HAL_PCD_MspInit+0xec>)
 8001b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001b40:	bf00      	nop
 8001b42:	37a8      	adds	r7, #168	@ 0xa8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40020000 	.word	0x40020000

08001b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <NMI_Handler+0x4>

08001b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <HardFault_Handler+0x4>

08001b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <MemManage_Handler+0x4>

08001b68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <BusFault_Handler+0x4>

08001b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b74:	bf00      	nop
 8001b76:	e7fd      	b.n	8001b74 <UsageFault_Handler+0x4>

08001b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba6:	f000 f941 	bl	8001e2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}

08001bae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	af00      	add	r7, sp, #0
  return 1;
 8001bb2:	2301      	movs	r3, #1
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_kill>:

int _kill(int pid, int sig)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bc8:	f004 fb36 	bl	8006238 <__errno>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2216      	movs	r2, #22
 8001bd0:	601a      	str	r2, [r3, #0]
  return -1;
 8001bd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <_exit>:

void _exit (int status)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001be6:	f04f 31ff 	mov.w	r1, #4294967295
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffe7 	bl	8001bbe <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <_exit+0x12>

08001bf4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	e00a      	b.n	8001c1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c06:	f3af 8000 	nop.w
 8001c0a:	4601      	mov	r1, r0
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	1c5a      	adds	r2, r3, #1
 8001c10:	60ba      	str	r2, [r7, #8]
 8001c12:	b2ca      	uxtb	r2, r1
 8001c14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	dbf0      	blt.n	8001c06 <_read+0x12>
  }

  return len;
 8001c24:	687b      	ldr	r3, [r7, #4]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b086      	sub	sp, #24
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	e009      	b.n	8001c54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	60ba      	str	r2, [r7, #8]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fb1d 	bl	8001288 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	dbf1      	blt.n	8001c40 <_write+0x12>
  }
  return len;
 8001c5c:	687b      	ldr	r3, [r7, #4]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <_close>:

int _close(int file)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr

08001c7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c8e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <_isatty>:

int _isatty(int file)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cd8:	4a14      	ldr	r2, [pc, #80]	@ (8001d2c <_sbrk+0x5c>)
 8001cda:	4b15      	ldr	r3, [pc, #84]	@ (8001d30 <_sbrk+0x60>)
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce4:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <_sbrk+0x64>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d102      	bne.n	8001cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <_sbrk+0x64>)
 8001cee:	4a12      	ldr	r2, [pc, #72]	@ (8001d38 <_sbrk+0x68>)
 8001cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <_sbrk+0x64>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d207      	bcs.n	8001d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d00:	f004 fa9a 	bl	8006238 <__errno>
 8001d04:	4603      	mov	r3, r0
 8001d06:	220c      	movs	r2, #12
 8001d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0e:	e009      	b.n	8001d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d10:	4b08      	ldr	r3, [pc, #32]	@ (8001d34 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d16:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <_sbrk+0x64>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	4a05      	ldr	r2, [pc, #20]	@ (8001d34 <_sbrk+0x64>)
 8001d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d22:	68fb      	ldr	r3, [r7, #12]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20040000 	.word	0x20040000
 8001d30:	00000400 	.word	0x00000400
 8001d34:	200008a4 	.word	0x200008a4
 8001d38:	200009f8 	.word	0x200009f8

08001d3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d40:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <SystemInit+0x20>)
 8001d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d46:	4a05      	ldr	r2, [pc, #20]	@ (8001d5c <SystemInit+0x20>)
 8001d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001d60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit 
 8001d64:	f7ff ffea 	bl	8001d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d68:	480c      	ldr	r0, [pc, #48]	@ (8001d9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d6a:	490d      	ldr	r1, [pc, #52]	@ (8001da0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001da4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d70:	e002      	b.n	8001d78 <LoopCopyDataInit>

08001d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d76:	3304      	adds	r3, #4

08001d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d7c:	d3f9      	bcc.n	8001d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d80:	4c0a      	ldr	r4, [pc, #40]	@ (8001dac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d84:	e001      	b.n	8001d8a <LoopFillZerobss>

08001d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d88:	3204      	adds	r2, #4

08001d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d8c:	d3fb      	bcc.n	8001d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d8e:	f004 fa59 	bl	8006244 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d92:	f7ff fa8b 	bl	80012ac <main>
  bx  lr    
 8001d96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d98:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001da4:	080087c0 	.word	0x080087c0
  ldr r2, =_sbss
 8001da8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001dac:	200009f8 	.word	0x200009f8

08001db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db0:	e7fe      	b.n	8001db0 <ADC_IRQHandler>

08001db2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001db6:	2003      	movs	r0, #3
 8001db8:	f000 f92e 	bl	8002018 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	f000 f805 	bl	8001dcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dc2:	f7ff fcdd 	bl	8001780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dd4:	4b12      	ldr	r3, [pc, #72]	@ (8001e20 <HAL_InitTick+0x54>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <HAL_InitTick+0x58>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001de2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f93b 	bl	8002066 <HAL_SYSTICK_Config>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e00e      	b.n	8001e18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b0f      	cmp	r3, #15
 8001dfe:	d80a      	bhi.n	8001e16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e00:	2200      	movs	r2, #0
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
 8001e08:	f000 f911 	bl	800202e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e0c:	4a06      	ldr	r2, [pc, #24]	@ (8001e28 <HAL_InitTick+0x5c>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e000      	b.n	8001e18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20000000 	.word	0x20000000
 8001e24:	20000008 	.word	0x20000008
 8001e28:	20000004 	.word	0x20000004

08001e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_IncTick+0x20>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <HAL_IncTick+0x24>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a04      	ldr	r2, [pc, #16]	@ (8001e50 <HAL_IncTick+0x24>)
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	200008a8 	.word	0x200008a8

08001e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b03      	ldr	r3, [pc, #12]	@ (8001e68 <HAL_GetTick+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	200008a8 	.word	0x200008a8

08001e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e74:	f7ff ffee 	bl	8001e54 <HAL_GetTick>
 8001e78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e84:	d005      	beq.n	8001e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e86:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb0 <HAL_Delay+0x44>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4413      	add	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e92:	bf00      	nop
 8001e94:	f7ff ffde 	bl	8001e54 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d8f7      	bhi.n	8001e94 <HAL_Delay+0x28>
  {
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000008 	.word	0x20000008

08001eb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001edc:	4b06      	ldr	r3, [pc, #24]	@ (8001ef8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ee2:	4a04      	ldr	r2, [pc, #16]	@ (8001ef4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	60d3      	str	r3, [r2, #12]
}
 8001ee8:	bf00      	nop
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00
 8001ef8:	05fa0000 	.word	0x05fa0000

08001efc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f00:	4b04      	ldr	r3, [pc, #16]	@ (8001f14 <__NVIC_GetPriorityGrouping+0x18>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	f003 0307 	and.w	r3, r3, #7
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	6039      	str	r1, [r7, #0]
 8001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	db0a      	blt.n	8001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	b2da      	uxtb	r2, r3
 8001f30:	490c      	ldr	r1, [pc, #48]	@ (8001f64 <__NVIC_SetPriority+0x4c>)
 8001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f36:	0112      	lsls	r2, r2, #4
 8001f38:	b2d2      	uxtb	r2, r2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f40:	e00a      	b.n	8001f58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4908      	ldr	r1, [pc, #32]	@ (8001f68 <__NVIC_SetPriority+0x50>)
 8001f48:	79fb      	ldrb	r3, [r7, #7]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	3b04      	subs	r3, #4
 8001f50:	0112      	lsls	r2, r2, #4
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	440b      	add	r3, r1
 8001f56:	761a      	strb	r2, [r3, #24]
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000e100 	.word	0xe000e100
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b089      	sub	sp, #36	@ 0x24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f1c3 0307 	rsb	r3, r3, #7
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	bf28      	it	cs
 8001f8a:	2304      	movcs	r3, #4
 8001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3304      	adds	r3, #4
 8001f92:	2b06      	cmp	r3, #6
 8001f94:	d902      	bls.n	8001f9c <NVIC_EncodePriority+0x30>
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3b03      	subs	r3, #3
 8001f9a:	e000      	b.n	8001f9e <NVIC_EncodePriority+0x32>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43da      	mvns	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	401a      	ands	r2, r3
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	43d9      	mvns	r1, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	4313      	orrs	r3, r2
         );
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3724      	adds	r7, #36	@ 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fe4:	d301      	bcc.n	8001fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e00f      	b.n	800200a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fea:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <SysTick_Config+0x40>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ff2:	210f      	movs	r1, #15
 8001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff8:	f7ff ff8e 	bl	8001f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ffc:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <SysTick_Config+0x40>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002002:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <SysTick_Config+0x40>)
 8002004:	2207      	movs	r2, #7
 8002006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	e000e010 	.word	0xe000e010

08002018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ff47 	bl	8001eb4 <__NVIC_SetPriorityGrouping>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800202e:	b580      	push	{r7, lr}
 8002030:	b086      	sub	sp, #24
 8002032:	af00      	add	r7, sp, #0
 8002034:	4603      	mov	r3, r0
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002040:	f7ff ff5c 	bl	8001efc <__NVIC_GetPriorityGrouping>
 8002044:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	68b9      	ldr	r1, [r7, #8]
 800204a:	6978      	ldr	r0, [r7, #20]
 800204c:	f7ff ff8e 	bl	8001f6c <NVIC_EncodePriority>
 8002050:	4602      	mov	r2, r0
 8002052:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002056:	4611      	mov	r1, r2
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff ff5d 	bl	8001f18 <__NVIC_SetPriority>
}
 800205e:	bf00      	nop
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ffb0 	bl	8001fd4 <SysTick_Config>
 8002074:	4603      	mov	r3, r0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	@ 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	e169      	b.n	8002374 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020a0:	2201      	movs	r2, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	f040 8158 	bne.w	800236e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d005      	beq.n	80020d6 <HAL_GPIO_Init+0x56>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d130      	bne.n	8002138 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2203      	movs	r2, #3
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 0201 	and.w	r2, r3, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b03      	cmp	r3, #3
 8002142:	d017      	beq.n	8002174 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d123      	bne.n	80021c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	08da      	lsrs	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3208      	adds	r2, #8
 8002188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	220f      	movs	r2, #15
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	08da      	lsrs	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3208      	adds	r2, #8
 80021c2:	69b9      	ldr	r1, [r7, #24]
 80021c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	2203      	movs	r2, #3
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0203 	and.w	r2, r3, #3
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80b2 	beq.w	800236e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	4b60      	ldr	r3, [pc, #384]	@ (800238c <HAL_GPIO_Init+0x30c>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800220e:	4a5f      	ldr	r2, [pc, #380]	@ (800238c <HAL_GPIO_Init+0x30c>)
 8002210:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002214:	6453      	str	r3, [r2, #68]	@ 0x44
 8002216:	4b5d      	ldr	r3, [pc, #372]	@ (800238c <HAL_GPIO_Init+0x30c>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002222:	4a5b      	ldr	r2, [pc, #364]	@ (8002390 <HAL_GPIO_Init+0x310>)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	3302      	adds	r3, #2
 800222a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	220f      	movs	r2, #15
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a52      	ldr	r2, [pc, #328]	@ (8002394 <HAL_GPIO_Init+0x314>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d02b      	beq.n	80022a6 <HAL_GPIO_Init+0x226>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a51      	ldr	r2, [pc, #324]	@ (8002398 <HAL_GPIO_Init+0x318>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d025      	beq.n	80022a2 <HAL_GPIO_Init+0x222>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a50      	ldr	r2, [pc, #320]	@ (800239c <HAL_GPIO_Init+0x31c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01f      	beq.n	800229e <HAL_GPIO_Init+0x21e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4f      	ldr	r2, [pc, #316]	@ (80023a0 <HAL_GPIO_Init+0x320>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d019      	beq.n	800229a <HAL_GPIO_Init+0x21a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4e      	ldr	r2, [pc, #312]	@ (80023a4 <HAL_GPIO_Init+0x324>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <HAL_GPIO_Init+0x216>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a4d      	ldr	r2, [pc, #308]	@ (80023a8 <HAL_GPIO_Init+0x328>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00d      	beq.n	8002292 <HAL_GPIO_Init+0x212>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4c      	ldr	r2, [pc, #304]	@ (80023ac <HAL_GPIO_Init+0x32c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <HAL_GPIO_Init+0x20e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4b      	ldr	r2, [pc, #300]	@ (80023b0 <HAL_GPIO_Init+0x330>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_GPIO_Init+0x20a>
 8002286:	2307      	movs	r3, #7
 8002288:	e00e      	b.n	80022a8 <HAL_GPIO_Init+0x228>
 800228a:	2308      	movs	r3, #8
 800228c:	e00c      	b.n	80022a8 <HAL_GPIO_Init+0x228>
 800228e:	2306      	movs	r3, #6
 8002290:	e00a      	b.n	80022a8 <HAL_GPIO_Init+0x228>
 8002292:	2305      	movs	r3, #5
 8002294:	e008      	b.n	80022a8 <HAL_GPIO_Init+0x228>
 8002296:	2304      	movs	r3, #4
 8002298:	e006      	b.n	80022a8 <HAL_GPIO_Init+0x228>
 800229a:	2303      	movs	r3, #3
 800229c:	e004      	b.n	80022a8 <HAL_GPIO_Init+0x228>
 800229e:	2302      	movs	r3, #2
 80022a0:	e002      	b.n	80022a8 <HAL_GPIO_Init+0x228>
 80022a2:	2301      	movs	r3, #1
 80022a4:	e000      	b.n	80022a8 <HAL_GPIO_Init+0x228>
 80022a6:	2300      	movs	r3, #0
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	f002 0203 	and.w	r2, r2, #3
 80022ae:	0092      	lsls	r2, r2, #2
 80022b0:	4093      	lsls	r3, r2
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022b8:	4935      	ldr	r1, [pc, #212]	@ (8002390 <HAL_GPIO_Init+0x310>)
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	3302      	adds	r3, #2
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c6:	4b3b      	ldr	r3, [pc, #236]	@ (80023b4 <HAL_GPIO_Init+0x334>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80022e2:	69ba      	ldr	r2, [r7, #24]
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ea:	4a32      	ldr	r2, [pc, #200]	@ (80023b4 <HAL_GPIO_Init+0x334>)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022f0:	4b30      	ldr	r3, [pc, #192]	@ (80023b4 <HAL_GPIO_Init+0x334>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d003      	beq.n	8002314 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002314:	4a27      	ldr	r2, [pc, #156]	@ (80023b4 <HAL_GPIO_Init+0x334>)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800231a:	4b26      	ldr	r3, [pc, #152]	@ (80023b4 <HAL_GPIO_Init+0x334>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233e:	4a1d      	ldr	r2, [pc, #116]	@ (80023b4 <HAL_GPIO_Init+0x334>)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002344:	4b1b      	ldr	r3, [pc, #108]	@ (80023b4 <HAL_GPIO_Init+0x334>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002368:	4a12      	ldr	r2, [pc, #72]	@ (80023b4 <HAL_GPIO_Init+0x334>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	3301      	adds	r3, #1
 8002372:	61fb      	str	r3, [r7, #28]
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	2b0f      	cmp	r3, #15
 8002378:	f67f ae92 	bls.w	80020a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	3724      	adds	r7, #36	@ 0x24
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	40013800 	.word	0x40013800
 8002394:	40020000 	.word	0x40020000
 8002398:	40020400 	.word	0x40020400
 800239c:	40020800 	.word	0x40020800
 80023a0:	40020c00 	.word	0x40020c00
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40021400 	.word	0x40021400
 80023ac:	40021800 	.word	0x40021800
 80023b0:	40021c00 	.word	0x40021c00
 80023b4:	40013c00 	.word	0x40013c00

080023b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	807b      	strh	r3, [r7, #2]
 80023c4:	4613      	mov	r3, r2
 80023c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023c8:	787b      	ldrb	r3, [r7, #1]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ce:	887a      	ldrh	r2, [r7, #2]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023d4:	e003      	b.n	80023de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023d6:	887b      	ldrh	r3, [r7, #2]
 80023d8:	041a      	lsls	r2, r3, #16
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	619a      	str	r2, [r3, #24]
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e08b      	b.n	8002516 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d106      	bne.n	8002418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff f9d8 	bl	80017c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2224      	movs	r2, #36	@ 0x24
 800241c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800243c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800244c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d107      	bne.n	8002466 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	e006      	b.n	8002474 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002472:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d108      	bne.n	800248e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	e007      	b.n	800249e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800249c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6859      	ldr	r1, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002520 <HAL_I2C_Init+0x134>)
 80024aa:	430b      	orrs	r3, r1
 80024ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68da      	ldr	r2, [r3, #12]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69d9      	ldr	r1, [r3, #28]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a1a      	ldr	r2, [r3, #32]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0201 	orr.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	02008000 	.word	0x02008000

08002524 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af02      	add	r7, sp, #8
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	461a      	mov	r2, r3
 8002530:	460b      	mov	r3, r1
 8002532:	817b      	strh	r3, [r7, #10]
 8002534:	4613      	mov	r3, r2
 8002536:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b20      	cmp	r3, #32
 8002542:	f040 80fd 	bne.w	8002740 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800254c:	2b01      	cmp	r3, #1
 800254e:	d101      	bne.n	8002554 <HAL_I2C_Master_Transmit+0x30>
 8002550:	2302      	movs	r3, #2
 8002552:	e0f6      	b.n	8002742 <HAL_I2C_Master_Transmit+0x21e>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800255c:	f7ff fc7a 	bl	8001e54 <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	2319      	movs	r3, #25
 8002568:	2201      	movs	r2, #1
 800256a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 faf6 	bl	8002b60 <I2C_WaitOnFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e0e1      	b.n	8002742 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2221      	movs	r2, #33	@ 0x21
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2210      	movs	r2, #16
 800258a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	893a      	ldrh	r2, [r7, #8]
 800259e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2bff      	cmp	r3, #255	@ 0xff
 80025ae:	d906      	bls.n	80025be <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	22ff      	movs	r2, #255	@ 0xff
 80025b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80025b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e007      	b.n	80025ce <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80025c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025cc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d024      	beq.n	8002620 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260a:	b2db      	uxtb	r3, r3
 800260c:	3301      	adds	r3, #1
 800260e:	b2da      	uxtb	r2, r3
 8002610:	8979      	ldrh	r1, [r7, #10]
 8002612:	4b4e      	ldr	r3, [pc, #312]	@ (800274c <HAL_I2C_Master_Transmit+0x228>)
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 fcf1 	bl	8003000 <I2C_TransferConfig>
 800261e:	e066      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002624:	b2da      	uxtb	r2, r3
 8002626:	8979      	ldrh	r1, [r7, #10]
 8002628:	4b48      	ldr	r3, [pc, #288]	@ (800274c <HAL_I2C_Master_Transmit+0x228>)
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 fce6 	bl	8003000 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002634:	e05b      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	6a39      	ldr	r1, [r7, #32]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 fae9 	bl	8002c12 <I2C_WaitOnTXISFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e07b      	b.n	8002742 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002664:	b29b      	uxth	r3, r3
 8002666:	3b01      	subs	r3, #1
 8002668:	b29a      	uxth	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d034      	beq.n	80026ee <HAL_I2C_Master_Transmit+0x1ca>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002688:	2b00      	cmp	r3, #0
 800268a:	d130      	bne.n	80026ee <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	2200      	movs	r2, #0
 8002694:	2180      	movs	r1, #128	@ 0x80
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fa62 	bl	8002b60 <I2C_WaitOnFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e04d      	b.n	8002742 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2bff      	cmp	r3, #255	@ 0xff
 80026ae:	d90e      	bls.n	80026ce <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	22ff      	movs	r2, #255	@ 0xff
 80026b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	8979      	ldrh	r1, [r7, #10]
 80026be:	2300      	movs	r3, #0
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 fc9a 	bl	8003000 <I2C_TransferConfig>
 80026cc:	e00f      	b.n	80026ee <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	8979      	ldrh	r1, [r7, #10]
 80026e0:	2300      	movs	r3, #0
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f000 fc89 	bl	8003000 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d19e      	bne.n	8002636 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	6a39      	ldr	r1, [r7, #32]
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 facf 	bl	8002ca0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e01a      	b.n	8002742 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2220      	movs	r2, #32
 8002712:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6859      	ldr	r1, [r3, #4]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <HAL_I2C_Master_Transmit+0x22c>)
 8002720:	400b      	ands	r3, r1
 8002722:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	e000      	b.n	8002742 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002740:	2302      	movs	r3, #2
  }
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	80002000 	.word	0x80002000
 8002750:	fe00e800 	.word	0xfe00e800

08002754 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af02      	add	r7, sp, #8
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	461a      	mov	r2, r3
 8002760:	460b      	mov	r3, r1
 8002762:	817b      	strh	r3, [r7, #10]
 8002764:	4613      	mov	r3, r2
 8002766:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b20      	cmp	r3, #32
 8002772:	f040 80db 	bne.w	800292c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <HAL_I2C_Master_Receive+0x30>
 8002780:	2302      	movs	r3, #2
 8002782:	e0d4      	b.n	800292e <HAL_I2C_Master_Receive+0x1da>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800278c:	f7ff fb62 	bl	8001e54 <HAL_GetTick>
 8002790:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	2319      	movs	r3, #25
 8002798:	2201      	movs	r2, #1
 800279a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f9de 	bl	8002b60 <I2C_WaitOnFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e0bf      	b.n	800292e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2222      	movs	r2, #34	@ 0x22
 80027b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2210      	movs	r2, #16
 80027ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	893a      	ldrh	r2, [r7, #8]
 80027ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2bff      	cmp	r3, #255	@ 0xff
 80027de:	d90e      	bls.n	80027fe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	8979      	ldrh	r1, [r7, #10]
 80027ee:	4b52      	ldr	r3, [pc, #328]	@ (8002938 <HAL_I2C_Master_Receive+0x1e4>)
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 fc02 	bl	8003000 <I2C_TransferConfig>
 80027fc:	e06d      	b.n	80028da <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002802:	b29a      	uxth	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280c:	b2da      	uxtb	r2, r3
 800280e:	8979      	ldrh	r1, [r7, #10]
 8002810:	4b49      	ldr	r3, [pc, #292]	@ (8002938 <HAL_I2C_Master_Receive+0x1e4>)
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 fbf1 	bl	8003000 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800281e:	e05c      	b.n	80028da <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	6a39      	ldr	r1, [r7, #32]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f000 fa7f 	bl	8002d28 <I2C_WaitOnRXNEFlagUntilTimeout>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e07c      	b.n	800292e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285c:	b29b      	uxth	r3, r3
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d034      	beq.n	80028da <HAL_I2C_Master_Receive+0x186>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	d130      	bne.n	80028da <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	2200      	movs	r2, #0
 8002880:	2180      	movs	r1, #128	@ 0x80
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 f96c 	bl	8002b60 <I2C_WaitOnFlagUntilTimeout>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e04d      	b.n	800292e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	2bff      	cmp	r3, #255	@ 0xff
 800289a:	d90e      	bls.n	80028ba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	22ff      	movs	r2, #255	@ 0xff
 80028a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	8979      	ldrh	r1, [r7, #10]
 80028aa:	2300      	movs	r3, #0
 80028ac:	9300      	str	r3, [sp, #0]
 80028ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fba4 	bl	8003000 <I2C_TransferConfig>
 80028b8:	e00f      	b.n	80028da <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028be:	b29a      	uxth	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	8979      	ldrh	r1, [r7, #10]
 80028cc:	2300      	movs	r3, #0
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 fb93 	bl	8003000 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028de:	b29b      	uxth	r3, r3
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d19d      	bne.n	8002820 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	6a39      	ldr	r1, [r7, #32]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f9d9 	bl	8002ca0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e01a      	b.n	800292e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2220      	movs	r2, #32
 80028fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	6859      	ldr	r1, [r3, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <HAL_I2C_Master_Receive+0x1e8>)
 800290c:	400b      	ands	r3, r1
 800290e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	e000      	b.n	800292e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800292c:	2302      	movs	r3, #2
  }
}
 800292e:	4618      	mov	r0, r3
 8002930:	3718      	adds	r7, #24
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	80002400 	.word	0x80002400
 800293c:	fe00e800 	.word	0xfe00e800

08002940 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	@ 0x28
 8002944:	af02      	add	r7, sp, #8
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	603b      	str	r3, [r7, #0]
 800294c:	460b      	mov	r3, r1
 800294e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b20      	cmp	r3, #32
 800295e:	f040 80d2 	bne.w	8002b06 <HAL_I2C_IsDeviceReady+0x1c6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800296c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002970:	d101      	bne.n	8002976 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002972:	2302      	movs	r3, #2
 8002974:	e0c8      	b.n	8002b08 <HAL_I2C_IsDeviceReady+0x1c8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800297c:	2b01      	cmp	r3, #1
 800297e:	d101      	bne.n	8002984 <HAL_I2C_IsDeviceReady+0x44>
 8002980:	2302      	movs	r3, #2
 8002982:	e0c1      	b.n	8002b08 <HAL_I2C_IsDeviceReady+0x1c8>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2224      	movs	r2, #36	@ 0x24
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d105      	bne.n	80029ae <HAL_I2C_IsDeviceReady+0x6e>
 80029a2:	897b      	ldrh	r3, [r7, #10]
 80029a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029a8:	4b59      	ldr	r3, [pc, #356]	@ (8002b10 <HAL_I2C_IsDeviceReady+0x1d0>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	e004      	b.n	80029b8 <HAL_I2C_IsDeviceReady+0x78>
 80029ae:	897b      	ldrh	r3, [r7, #10]
 80029b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80029b4:	4b57      	ldr	r3, [pc, #348]	@ (8002b14 <HAL_I2C_IsDeviceReady+0x1d4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	6812      	ldr	r2, [r2, #0]
 80029bc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80029be:	f7ff fa49 	bl	8001e54 <HAL_GetTick>
 80029c2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	bf0c      	ite	eq
 80029d2:	2301      	moveq	r3, #1
 80029d4:	2300      	movne	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f003 0310 	and.w	r3, r3, #16
 80029e4:	2b10      	cmp	r3, #16
 80029e6:	bf0c      	ite	eq
 80029e8:	2301      	moveq	r3, #1
 80029ea:	2300      	movne	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80029f0:	e034      	b.n	8002a5c <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f8:	d01a      	beq.n	8002a30 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7ff fa2b 	bl	8001e54 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <HAL_I2C_IsDeviceReady+0xd0>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10f      	bne.n	8002a30 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1c:	f043 0220 	orr.w	r2, r3, #32
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e06b      	b.n	8002b08 <HAL_I2C_IsDeviceReady+0x1c8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f003 0320 	and.w	r3, r3, #32
 8002a3a:	2b20      	cmp	r3, #32
 8002a3c:	bf0c      	ite	eq
 8002a3e:	2301      	moveq	r3, #1
 8002a40:	2300      	movne	r3, #0
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f003 0310 	and.w	r3, r3, #16
 8002a50:	2b10      	cmp	r3, #16
 8002a52:	bf0c      	ite	eq
 8002a54:	2301      	moveq	r3, #1
 8002a56:	2300      	movne	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002a5c:	7ffb      	ldrb	r3, [r7, #31]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d102      	bne.n	8002a68 <HAL_I2C_IsDeviceReady+0x128>
 8002a62:	7fbb      	ldrb	r3, [r7, #30]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0c4      	beq.n	80029f2 <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	f003 0310 	and.w	r3, r3, #16
 8002a72:	2b10      	cmp	r3, #16
 8002a74:	d01a      	beq.n	8002aac <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2120      	movs	r1, #32
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f000 f86d 	bl	8002b60 <I2C_WaitOnFlagUntilTimeout>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e03b      	b.n	8002b08 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2220      	movs	r2, #32
 8002a96:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e02d      	b.n	8002b08 <HAL_I2C_IsDeviceReady+0x1c8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2120      	movs	r1, #32
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f852 	bl	8002b60 <I2C_WaitOnFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d001      	beq.n	8002ac6 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e020      	b.n	8002b08 <HAL_I2C_IsDeviceReady+0x1c8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2210      	movs	r2, #16
 8002acc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	f63f af5a 	bhi.w	800299a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2220      	movs	r2, #32
 8002aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af2:	f043 0220 	orr.w	r2, r3, #32
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <HAL_I2C_IsDeviceReady+0x1c8>
  }
  else
  {
    return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
  }
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	02002000 	.word	0x02002000
 8002b14:	02002800 	.word	0x02002800

08002b18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d103      	bne.n	8002b36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2200      	movs	r2, #0
 8002b34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	f003 0301 	and.w	r3, r3, #1
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d007      	beq.n	8002b54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699a      	ldr	r2, [r3, #24]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	619a      	str	r2, [r3, #24]
  }
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b70:	e03b      	b.n	8002bea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	6839      	ldr	r1, [r7, #0]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f962 	bl	8002e40 <I2C_IsErrorOccurred>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e041      	b.n	8002c0a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d02d      	beq.n	8002bea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8e:	f7ff f961 	bl	8001e54 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d302      	bcc.n	8002ba4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d122      	bne.n	8002bea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699a      	ldr	r2, [r3, #24]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	4013      	ands	r3, r2
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d113      	bne.n	8002bea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	f043 0220 	orr.w	r2, r3, #32
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e00f      	b.n	8002c0a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699a      	ldr	r2, [r3, #24]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	bf0c      	ite	eq
 8002bfa:	2301      	moveq	r3, #1
 8002bfc:	2300      	movne	r3, #0
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	79fb      	ldrb	r3, [r7, #7]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d0b4      	beq.n	8002b72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b084      	sub	sp, #16
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c1e:	e033      	b.n	8002c88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f90b 	bl	8002e40 <I2C_IsErrorOccurred>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e031      	b.n	8002c98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3a:	d025      	beq.n	8002c88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3c:	f7ff f90a 	bl	8001e54 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d302      	bcc.n	8002c52 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d11a      	bne.n	8002c88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	f003 0302 	and.w	r3, r3, #2
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d013      	beq.n	8002c88 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e007      	b.n	8002c98 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d1c4      	bne.n	8002c20 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cac:	e02f      	b.n	8002d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f8c4 	bl	8002e40 <I2C_IsErrorOccurred>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e02d      	b.n	8002d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cc2:	f7ff f8c7 	bl	8001e54 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	68ba      	ldr	r2, [r7, #8]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d302      	bcc.n	8002cd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d11a      	bne.n	8002d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	f003 0320 	and.w	r3, r3, #32
 8002ce2:	2b20      	cmp	r3, #32
 8002ce4:	d013      	beq.n	8002d0e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cea:	f043 0220 	orr.w	r2, r3, #32
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2220      	movs	r2, #32
 8002cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e007      	b.n	8002d1e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d1c8      	bne.n	8002cae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002d38:	e071      	b.n	8002e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f87e 	bl	8002e40 <I2C_IsErrorOccurred>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d13b      	bne.n	8002dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d138      	bne.n	8002dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d105      	bne.n	8002d7c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f003 0310 	and.w	r3, r3, #16
 8002d86:	2b10      	cmp	r3, #16
 8002d88:	d121      	bne.n	8002dce <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2210      	movs	r2, #16
 8002d90:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2204      	movs	r2, #4
 8002d96:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2220      	movs	r2, #32
 8002d9e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6859      	ldr	r1, [r3, #4]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4b24      	ldr	r3, [pc, #144]	@ (8002e3c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002dac:	400b      	ands	r3, r1
 8002dae:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	75fb      	strb	r3, [r7, #23]
 8002dcc:	e002      	b.n	8002dd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002dd4:	f7ff f83e 	bl	8001e54 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d302      	bcc.n	8002dea <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d119      	bne.n	8002e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002dea:	7dfb      	ldrb	r3, [r7, #23]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d116      	bne.n	8002e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d00f      	beq.n	8002e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e02:	f043 0220 	orr.w	r2, r3, #32
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d002      	beq.n	8002e32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d083      	beq.n	8002d3a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	fe00e800 	.word	0xfe00e800

08002e40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	@ 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d068      	beq.n	8002f3e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2210      	movs	r2, #16
 8002e72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e74:	e049      	b.n	8002f0a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7c:	d045      	beq.n	8002f0a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e7e:	f7fe ffe9 	bl	8001e54 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d302      	bcc.n	8002e94 <I2C_IsErrorOccurred+0x54>
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d13a      	bne.n	8002f0a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ea6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002eb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eb6:	d121      	bne.n	8002efc <I2C_IsErrorOccurred+0xbc>
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ebe:	d01d      	beq.n	8002efc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002ec0:	7cfb      	ldrb	r3, [r7, #19]
 8002ec2:	2b20      	cmp	r3, #32
 8002ec4:	d01a      	beq.n	8002efc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ed4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ed6:	f7fe ffbd 	bl	8001e54 <HAL_GetTick>
 8002eda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002edc:	e00e      	b.n	8002efc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ede:	f7fe ffb9 	bl	8001e54 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b19      	cmp	r3, #25
 8002eea:	d907      	bls.n	8002efc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	f043 0320 	orr.w	r3, r3, #32
 8002ef2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002efa:	e006      	b.n	8002f0a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d1e9      	bne.n	8002ede <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d003      	beq.n	8002f20 <I2C_IsErrorOccurred+0xe0>
 8002f18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0aa      	beq.n	8002e76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002f20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d103      	bne.n	8002f30 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	f043 0304 	orr.w	r3, r3, #4
 8002f36:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00b      	beq.n	8002f68 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	f043 0301 	orr.w	r3, r3, #1
 8002f56:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002f60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	f043 0308 	orr.w	r3, r3, #8
 8002f78:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00b      	beq.n	8002fac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	f043 0302 	orr.w	r3, r3, #2
 8002f9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002fa4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d01c      	beq.n	8002fee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f7ff fdaf 	bl	8002b18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6859      	ldr	r1, [r3, #4]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8002ffc <I2C_IsErrorOccurred+0x1bc>)
 8002fc6:	400b      	ands	r3, r1
 8002fc8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002fee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3728      	adds	r7, #40	@ 0x28
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	fe00e800 	.word	0xfe00e800

08003000 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	607b      	str	r3, [r7, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	817b      	strh	r3, [r7, #10]
 800300e:	4613      	mov	r3, r2
 8003010:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003012:	897b      	ldrh	r3, [r7, #10]
 8003014:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003018:	7a7b      	ldrb	r3, [r7, #9]
 800301a:	041b      	lsls	r3, r3, #16
 800301c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003020:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	4313      	orrs	r3, r2
 800302a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800302e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685a      	ldr	r2, [r3, #4]
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	0d5b      	lsrs	r3, r3, #21
 800303a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800303e:	4b08      	ldr	r3, [pc, #32]	@ (8003060 <I2C_TransferConfig+0x60>)
 8003040:	430b      	orrs	r3, r1
 8003042:	43db      	mvns	r3, r3
 8003044:	ea02 0103 	and.w	r1, r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003052:	bf00      	nop
 8003054:	371c      	adds	r7, #28
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	03ff63ff 	.word	0x03ff63ff

08003064 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b20      	cmp	r3, #32
 8003078:	d138      	bne.n	80030ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003084:	2302      	movs	r3, #2
 8003086:	e032      	b.n	80030ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2224      	movs	r2, #36	@ 0x24
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6819      	ldr	r1, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0201 	orr.w	r2, r2, #1
 80030d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	e000      	b.n	80030ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030ec:	2302      	movs	r3, #2
  }
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b085      	sub	sp, #20
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b20      	cmp	r3, #32
 800310e:	d139      	bne.n	8003184 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800311a:	2302      	movs	r3, #2
 800311c:	e033      	b.n	8003186 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2224      	movs	r2, #36	@ 0x24
 800312a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800314c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	021b      	lsls	r3, r3, #8
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	e000      	b.n	8003186 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003184:	2302      	movs	r3, #2
  }
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b086      	sub	sp, #24
 8003196:	af02      	add	r7, sp, #8
 8003198:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e108      	b.n	80033b6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d106      	bne.n	80031c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fe fc4c 	bl	8001a5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2203      	movs	r2, #3
 80031c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031d2:	d102      	bne.n	80031da <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f001 ffc2 	bl	8005168 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	7c1a      	ldrb	r2, [r3, #16]
 80031ec:	f88d 2000 	strb.w	r2, [sp]
 80031f0:	3304      	adds	r3, #4
 80031f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031f4:	f001 ff2c 	bl	8005050 <USB_CoreInit>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2202      	movs	r2, #2
 8003202:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e0d5      	b.n	80033b6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2100      	movs	r1, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f001 ffba 	bl	800518a <USB_SetCurrentMode>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2202      	movs	r2, #2
 8003220:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e0c6      	b.n	80033b6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003228:	2300      	movs	r3, #0
 800322a:	73fb      	strb	r3, [r7, #15]
 800322c:	e04a      	b.n	80032c4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800322e:	7bfa      	ldrb	r2, [r7, #15]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	3315      	adds	r3, #21
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003242:	7bfa      	ldrb	r2, [r7, #15]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	3314      	adds	r3, #20
 8003252:	7bfa      	ldrb	r2, [r7, #15]
 8003254:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003256:	7bfa      	ldrb	r2, [r7, #15]
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	b298      	uxth	r0, r3
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	332e      	adds	r3, #46	@ 0x2e
 800326a:	4602      	mov	r2, r0
 800326c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800326e:	7bfa      	ldrb	r2, [r7, #15]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	00db      	lsls	r3, r3, #3
 8003276:	4413      	add	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	3318      	adds	r3, #24
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003282:	7bfa      	ldrb	r2, [r7, #15]
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	4613      	mov	r3, r2
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	440b      	add	r3, r1
 8003290:	331c      	adds	r3, #28
 8003292:	2200      	movs	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003296:	7bfa      	ldrb	r2, [r7, #15]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	4413      	add	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	3320      	adds	r3, #32
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032aa:	7bfa      	ldrb	r2, [r7, #15]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	4413      	add	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	3324      	adds	r3, #36	@ 0x24
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	3301      	adds	r3, #1
 80032c2:	73fb      	strb	r3, [r7, #15]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	791b      	ldrb	r3, [r3, #4]
 80032c8:	7bfa      	ldrb	r2, [r7, #15]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d3af      	bcc.n	800322e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ce:	2300      	movs	r3, #0
 80032d0:	73fb      	strb	r3, [r7, #15]
 80032d2:	e044      	b.n	800335e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80032d4:	7bfa      	ldrb	r2, [r7, #15]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	4413      	add	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80032e6:	2200      	movs	r2, #0
 80032e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80032ea:	7bfa      	ldrb	r2, [r7, #15]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80032fc:	7bfa      	ldrb	r2, [r7, #15]
 80032fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003358:	7bfb      	ldrb	r3, [r7, #15]
 800335a:	3301      	adds	r3, #1
 800335c:	73fb      	strb	r3, [r7, #15]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	791b      	ldrb	r3, [r3, #4]
 8003362:	7bfa      	ldrb	r2, [r7, #15]
 8003364:	429a      	cmp	r2, r3
 8003366:	d3b5      	bcc.n	80032d4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6818      	ldr	r0, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	7c1a      	ldrb	r2, [r3, #16]
 8003370:	f88d 2000 	strb.w	r2, [sp]
 8003374:	3304      	adds	r3, #4
 8003376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003378:	f001 ff54 	bl	8005224 <USB_DevInit>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e013      	b.n	80033b6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	7b1b      	ldrb	r3, [r3, #12]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d102      	bne.n	80033aa <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f80b 	bl	80033c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f002 f921 	bl	80055f6 <USB_DevDisconnect>

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033ee:	4b05      	ldr	r3, [pc, #20]	@ (8003404 <HAL_PCDEx_ActivateLPM+0x44>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	10000003 	.word	0x10000003

08003408 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800340c:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a04      	ldr	r2, [pc, #16]	@ (8003424 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003416:	6013      	str	r3, [r2, #0]
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40007000 	.word	0x40007000

08003428 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	4b23      	ldr	r3, [pc, #140]	@ (80034c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	4a22      	ldr	r2, [pc, #136]	@ (80034c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003438:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800343c:	6413      	str	r3, [r2, #64]	@ 0x40
 800343e:	4b20      	ldr	r3, [pc, #128]	@ (80034c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003442:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800344a:	4b1e      	ldr	r3, [pc, #120]	@ (80034c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a1d      	ldr	r2, [pc, #116]	@ (80034c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003454:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003456:	f7fe fcfd 	bl	8001e54 <HAL_GetTick>
 800345a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800345c:	e009      	b.n	8003472 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800345e:	f7fe fcf9 	bl	8001e54 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800346c:	d901      	bls.n	8003472 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e022      	b.n	80034b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003472:	4b14      	ldr	r3, [pc, #80]	@ (80034c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800347a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800347e:	d1ee      	bne.n	800345e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003480:	4b10      	ldr	r3, [pc, #64]	@ (80034c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a0f      	ldr	r2, [pc, #60]	@ (80034c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800348a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800348c:	f7fe fce2 	bl	8001e54 <HAL_GetTick>
 8003490:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003492:	e009      	b.n	80034a8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003494:	f7fe fcde 	bl	8001e54 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034a2:	d901      	bls.n	80034a8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e007      	b.n	80034b8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80034a8:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80034b4:	d1ee      	bne.n	8003494 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40007000 	.word	0x40007000

080034c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80034d0:	2300      	movs	r3, #0
 80034d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e291      	b.n	8003a02 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 8087 	beq.w	80035fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034ec:	4b96      	ldr	r3, [pc, #600]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 030c 	and.w	r3, r3, #12
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d00c      	beq.n	8003512 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f8:	4b93      	ldr	r3, [pc, #588]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d112      	bne.n	800352a <HAL_RCC_OscConfig+0x62>
 8003504:	4b90      	ldr	r3, [pc, #576]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800350c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003510:	d10b      	bne.n	800352a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003512:	4b8d      	ldr	r3, [pc, #564]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d06c      	beq.n	80035f8 <HAL_RCC_OscConfig+0x130>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d168      	bne.n	80035f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e26b      	b.n	8003a02 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x7a>
 8003534:	4b84      	ldr	r3, [pc, #528]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a83      	ldr	r2, [pc, #524]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 800353a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800353e:	6013      	str	r3, [r2, #0]
 8003540:	e02e      	b.n	80035a0 <HAL_RCC_OscConfig+0xd8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x9c>
 800354a:	4b7f      	ldr	r3, [pc, #508]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a7e      	ldr	r2, [pc, #504]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	4b7c      	ldr	r3, [pc, #496]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a7b      	ldr	r2, [pc, #492]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 800355c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e01d      	b.n	80035a0 <HAL_RCC_OscConfig+0xd8>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0xc0>
 800356e:	4b76      	ldr	r3, [pc, #472]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a75      	ldr	r2, [pc, #468]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b73      	ldr	r3, [pc, #460]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a72      	ldr	r2, [pc, #456]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e00b      	b.n	80035a0 <HAL_RCC_OscConfig+0xd8>
 8003588:	4b6f      	ldr	r3, [pc, #444]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a6e      	ldr	r2, [pc, #440]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 800358e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	4b6c      	ldr	r3, [pc, #432]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a6b      	ldr	r2, [pc, #428]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 800359a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800359e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d013      	beq.n	80035d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe fc54 	bl	8001e54 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fe fc50 	bl	8001e54 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	@ 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e21f      	b.n	8003a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	4b61      	ldr	r3, [pc, #388]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0xe8>
 80035ce:	e014      	b.n	80035fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fe fc40 	bl	8001e54 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d8:	f7fe fc3c 	bl	8001e54 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	@ 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e20b      	b.n	8003a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ea:	4b57      	ldr	r3, [pc, #348]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0x110>
 80035f6:	e000      	b.n	80035fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d069      	beq.n	80036da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003606:	4b50      	ldr	r3, [pc, #320]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003612:	4b4d      	ldr	r3, [pc, #308]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b08      	cmp	r3, #8
 800361c:	d11c      	bne.n	8003658 <HAL_RCC_OscConfig+0x190>
 800361e:	4b4a      	ldr	r3, [pc, #296]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d116      	bne.n	8003658 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362a:	4b47      	ldr	r3, [pc, #284]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_RCC_OscConfig+0x17a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d001      	beq.n	8003642 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e1df      	b.n	8003a02 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003642:	4b41      	ldr	r3, [pc, #260]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	493d      	ldr	r1, [pc, #244]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003656:	e040      	b.n	80036da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d023      	beq.n	80036a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003660:	4b39      	ldr	r3, [pc, #228]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a38      	ldr	r2, [pc, #224]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fe fbf2 	bl	8001e54 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003674:	f7fe fbee 	bl	8001e54 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e1bd      	b.n	8003a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003686:	4b30      	ldr	r3, [pc, #192]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003692:	4b2d      	ldr	r3, [pc, #180]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4929      	ldr	r1, [pc, #164]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
 80036a6:	e018      	b.n	80036da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a8:	4b27      	ldr	r3, [pc, #156]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a26      	ldr	r2, [pc, #152]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 80036ae:	f023 0301 	bic.w	r3, r3, #1
 80036b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7fe fbce 	bl	8001e54 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036bc:	f7fe fbca 	bl	8001e54 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e199      	b.n	8003a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d038      	beq.n	8003758 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d019      	beq.n	8003722 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ee:	4b16      	ldr	r3, [pc, #88]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 80036f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036f2:	4a15      	ldr	r2, [pc, #84]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fa:	f7fe fbab 	bl	8001e54 <HAL_GetTick>
 80036fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003700:	e008      	b.n	8003714 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003702:	f7fe fba7 	bl	8001e54 <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	2b02      	cmp	r3, #2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e176      	b.n	8003a02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003714:	4b0c      	ldr	r3, [pc, #48]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003716:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0f0      	beq.n	8003702 <HAL_RCC_OscConfig+0x23a>
 8003720:	e01a      	b.n	8003758 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003722:	4b09      	ldr	r3, [pc, #36]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003726:	4a08      	ldr	r2, [pc, #32]	@ (8003748 <HAL_RCC_OscConfig+0x280>)
 8003728:	f023 0301 	bic.w	r3, r3, #1
 800372c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372e:	f7fe fb91 	bl	8001e54 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003734:	e00a      	b.n	800374c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003736:	f7fe fb8d 	bl	8001e54 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	2b02      	cmp	r3, #2
 8003742:	d903      	bls.n	800374c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e15c      	b.n	8003a02 <HAL_RCC_OscConfig+0x53a>
 8003748:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800374c:	4b91      	ldr	r3, [pc, #580]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 800374e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ee      	bne.n	8003736 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80a4 	beq.w	80038ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003766:	4b8b      	ldr	r3, [pc, #556]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10d      	bne.n	800378e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003772:	4b88      	ldr	r3, [pc, #544]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	4a87      	ldr	r2, [pc, #540]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 8003778:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800377c:	6413      	str	r3, [r2, #64]	@ 0x40
 800377e:	4b85      	ldr	r3, [pc, #532]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800378e:	4b82      	ldr	r3, [pc, #520]	@ (8003998 <HAL_RCC_OscConfig+0x4d0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d118      	bne.n	80037cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800379a:	4b7f      	ldr	r3, [pc, #508]	@ (8003998 <HAL_RCC_OscConfig+0x4d0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a7e      	ldr	r2, [pc, #504]	@ (8003998 <HAL_RCC_OscConfig+0x4d0>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a6:	f7fe fb55 	bl	8001e54 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ae:	f7fe fb51 	bl	8001e54 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b64      	cmp	r3, #100	@ 0x64
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e120      	b.n	8003a02 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037c0:	4b75      	ldr	r3, [pc, #468]	@ (8003998 <HAL_RCC_OscConfig+0x4d0>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x31a>
 80037d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e0:	e02d      	b.n	800383e <HAL_RCC_OscConfig+0x376>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x33c>
 80037ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ee:	4a69      	ldr	r2, [pc, #420]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f6:	4b67      	ldr	r3, [pc, #412]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fa:	4a66      	ldr	r2, [pc, #408]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 80037fc:	f023 0304 	bic.w	r3, r3, #4
 8003800:	6713      	str	r3, [r2, #112]	@ 0x70
 8003802:	e01c      	b.n	800383e <HAL_RCC_OscConfig+0x376>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	2b05      	cmp	r3, #5
 800380a:	d10c      	bne.n	8003826 <HAL_RCC_OscConfig+0x35e>
 800380c:	4b61      	ldr	r3, [pc, #388]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003810:	4a60      	ldr	r2, [pc, #384]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 8003812:	f043 0304 	orr.w	r3, r3, #4
 8003816:	6713      	str	r3, [r2, #112]	@ 0x70
 8003818:	4b5e      	ldr	r3, [pc, #376]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 800381a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800381c:	4a5d      	ldr	r2, [pc, #372]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	6713      	str	r3, [r2, #112]	@ 0x70
 8003824:	e00b      	b.n	800383e <HAL_RCC_OscConfig+0x376>
 8003826:	4b5b      	ldr	r3, [pc, #364]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 8003828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382a:	4a5a      	ldr	r2, [pc, #360]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	6713      	str	r3, [r2, #112]	@ 0x70
 8003832:	4b58      	ldr	r3, [pc, #352]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003836:	4a57      	ldr	r2, [pc, #348]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 8003838:	f023 0304 	bic.w	r3, r3, #4
 800383c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d015      	beq.n	8003872 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003846:	f7fe fb05 	bl	8001e54 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384c:	e00a      	b.n	8003864 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384e:	f7fe fb01 	bl	8001e54 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385c:	4293      	cmp	r3, r2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e0ce      	b.n	8003a02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003864:	4b4b      	ldr	r3, [pc, #300]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 8003866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0ee      	beq.n	800384e <HAL_RCC_OscConfig+0x386>
 8003870:	e014      	b.n	800389c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003872:	f7fe faef 	bl	8001e54 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003878:	e00a      	b.n	8003890 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387a:	f7fe faeb 	bl	8001e54 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003888:	4293      	cmp	r3, r2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e0b8      	b.n	8003a02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003890:	4b40      	ldr	r3, [pc, #256]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 8003892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1ee      	bne.n	800387a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800389c:	7dfb      	ldrb	r3, [r7, #23]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d105      	bne.n	80038ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 80038a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 80038a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ac:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 80a4 	beq.w	8003a00 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038b8:	4b36      	ldr	r3, [pc, #216]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 030c 	and.w	r3, r3, #12
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d06b      	beq.n	800399c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d149      	bne.n	8003960 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038cc:	4b31      	ldr	r3, [pc, #196]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a30      	ldr	r2, [pc, #192]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 80038d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fe fabc 	bl	8001e54 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fe fab8 	bl	8001e54 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e087      	b.n	8003a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f2:	4b28      	ldr	r3, [pc, #160]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69da      	ldr	r2, [r3, #28]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	019b      	lsls	r3, r3, #6
 800390e:	431a      	orrs	r2, r3
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003914:	085b      	lsrs	r3, r3, #1
 8003916:	3b01      	subs	r3, #1
 8003918:	041b      	lsls	r3, r3, #16
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003920:	061b      	lsls	r3, r3, #24
 8003922:	4313      	orrs	r3, r2
 8003924:	4a1b      	ldr	r2, [pc, #108]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 8003926:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800392a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800392c:	4b19      	ldr	r3, [pc, #100]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a18      	ldr	r2, [pc, #96]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 8003932:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003938:	f7fe fa8c 	bl	8001e54 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003940:	f7fe fa88 	bl	8001e54 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e057      	b.n	8003a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003952:	4b10      	ldr	r3, [pc, #64]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d0f0      	beq.n	8003940 <HAL_RCC_OscConfig+0x478>
 800395e:	e04f      	b.n	8003a00 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003960:	4b0c      	ldr	r3, [pc, #48]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a0b      	ldr	r2, [pc, #44]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 8003966:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800396a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fe fa72 	bl	8001e54 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003974:	f7fe fa6e 	bl	8001e54 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b02      	cmp	r3, #2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e03d      	b.n	8003a02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003986:	4b03      	ldr	r3, [pc, #12]	@ (8003994 <HAL_RCC_OscConfig+0x4cc>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x4ac>
 8003992:	e035      	b.n	8003a00 <HAL_RCC_OscConfig+0x538>
 8003994:	40023800 	.word	0x40023800
 8003998:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800399c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a0c <HAL_RCC_OscConfig+0x544>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d028      	beq.n	80039fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d121      	bne.n	80039fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d11a      	bne.n	80039fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039cc:	4013      	ands	r3, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039d2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d111      	bne.n	80039fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	3b01      	subs	r3, #1
 80039e6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d107      	bne.n	80039fc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d001      	beq.n	8003a00 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800

08003a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0d0      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a28:	4b6a      	ldr	r3, [pc, #424]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 030f 	and.w	r3, r3, #15
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d910      	bls.n	8003a58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b67      	ldr	r3, [pc, #412]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 020f 	bic.w	r2, r3, #15
 8003a3e:	4965      	ldr	r1, [pc, #404]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b63      	ldr	r3, [pc, #396]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0b8      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a70:	4b59      	ldr	r3, [pc, #356]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4a58      	ldr	r2, [pc, #352]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a88:	4b53      	ldr	r3, [pc, #332]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4a52      	ldr	r2, [pc, #328]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a94:	4b50      	ldr	r3, [pc, #320]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	494d      	ldr	r1, [pc, #308]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d040      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aba:	4b47      	ldr	r3, [pc, #284]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d115      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e07f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad2:	4b41      	ldr	r3, [pc, #260]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e073      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e06b      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003af2:	4b39      	ldr	r3, [pc, #228]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f023 0203 	bic.w	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4936      	ldr	r1, [pc, #216]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b04:	f7fe f9a6 	bl	8001e54 <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0c:	f7fe f9a2 	bl	8001e54 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e053      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 020c 	and.w	r2, r3, #12
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d1eb      	bne.n	8003b0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b34:	4b27      	ldr	r3, [pc, #156]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 030f 	and.w	r3, r3, #15
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d210      	bcs.n	8003b64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b42:	4b24      	ldr	r3, [pc, #144]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 020f 	bic.w	r2, r3, #15
 8003b4a:	4922      	ldr	r1, [pc, #136]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b20      	ldr	r3, [pc, #128]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e032      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b70:	4b19      	ldr	r3, [pc, #100]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4916      	ldr	r1, [pc, #88]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b8e:	4b12      	ldr	r3, [pc, #72]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	490e      	ldr	r1, [pc, #56]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ba2:	f000 f821 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	490a      	ldr	r1, [pc, #40]	@ (8003bdc <HAL_RCC_ClockConfig+0x1cc>)
 8003bb4:	5ccb      	ldrb	r3, [r1, r3]
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	4a09      	ldr	r2, [pc, #36]	@ (8003be0 <HAL_RCC_ClockConfig+0x1d0>)
 8003bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bbe:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <HAL_RCC_ClockConfig+0x1d4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fe f902 	bl	8001dcc <HAL_InitTick>

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023c00 	.word	0x40023c00
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	08008428 	.word	0x08008428
 8003be0:	20000000 	.word	0x20000000
 8003be4:	20000004 	.word	0x20000004

08003be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bec:	b094      	sub	sp, #80	@ 0x50
 8003bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c00:	4b79      	ldr	r3, [pc, #484]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d00d      	beq.n	8003c28 <HAL_RCC_GetSysClockFreq+0x40>
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	f200 80e1 	bhi.w	8003dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x34>
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d003      	beq.n	8003c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c1a:	e0db      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c1c:	4b73      	ldr	r3, [pc, #460]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x204>)
 8003c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c20:	e0db      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c22:	4b73      	ldr	r3, [pc, #460]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c26:	e0d8      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c28:	4b6f      	ldr	r3, [pc, #444]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003c32:	4b6d      	ldr	r3, [pc, #436]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d063      	beq.n	8003d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	099b      	lsrs	r3, r3, #6
 8003c44:	2200      	movs	r2, #0
 8003c46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c52:	2300      	movs	r3, #0
 8003c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	462b      	mov	r3, r5
 8003c5e:	f04f 0000 	mov.w	r0, #0
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	0159      	lsls	r1, r3, #5
 8003c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c6c:	0150      	lsls	r0, r2, #5
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4621      	mov	r1, r4
 8003c74:	1a51      	subs	r1, r2, r1
 8003c76:	6139      	str	r1, [r7, #16]
 8003c78:	4629      	mov	r1, r5
 8003c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c8c:	4659      	mov	r1, fp
 8003c8e:	018b      	lsls	r3, r1, #6
 8003c90:	4651      	mov	r1, sl
 8003c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c96:	4651      	mov	r1, sl
 8003c98:	018a      	lsls	r2, r1, #6
 8003c9a:	4651      	mov	r1, sl
 8003c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cba:	4690      	mov	r8, r2
 8003cbc:	4699      	mov	r9, r3
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	eb18 0303 	adds.w	r3, r8, r3
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	462b      	mov	r3, r5
 8003cc8:	eb49 0303 	adc.w	r3, r9, r3
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cda:	4629      	mov	r1, r5
 8003cdc:	024b      	lsls	r3, r1, #9
 8003cde:	4621      	mov	r1, r4
 8003ce0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	024a      	lsls	r2, r1, #9
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cee:	2200      	movs	r2, #0
 8003cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cf8:	f7fc ff7e 	bl	8000bf8 <__aeabi_uldivmod>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4613      	mov	r3, r2
 8003d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d04:	e058      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d06:	4b38      	ldr	r3, [pc, #224]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	099b      	lsrs	r3, r3, #6
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	4611      	mov	r1, r2
 8003d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d16:	623b      	str	r3, [r7, #32]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d20:	4642      	mov	r2, r8
 8003d22:	464b      	mov	r3, r9
 8003d24:	f04f 0000 	mov.w	r0, #0
 8003d28:	f04f 0100 	mov.w	r1, #0
 8003d2c:	0159      	lsls	r1, r3, #5
 8003d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d32:	0150      	lsls	r0, r2, #5
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4641      	mov	r1, r8
 8003d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d3e:	4649      	mov	r1, r9
 8003d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d58:	ebb2 040a 	subs.w	r4, r2, sl
 8003d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	00eb      	lsls	r3, r5, #3
 8003d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d6e:	00e2      	lsls	r2, r4, #3
 8003d70:	4614      	mov	r4, r2
 8003d72:	461d      	mov	r5, r3
 8003d74:	4643      	mov	r3, r8
 8003d76:	18e3      	adds	r3, r4, r3
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	eb45 0303 	adc.w	r3, r5, r3
 8003d80:	607b      	str	r3, [r7, #4]
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d8e:	4629      	mov	r1, r5
 8003d90:	028b      	lsls	r3, r1, #10
 8003d92:	4621      	mov	r1, r4
 8003d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d98:	4621      	mov	r1, r4
 8003d9a:	028a      	lsls	r2, r1, #10
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4619      	mov	r1, r3
 8003da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003da2:	2200      	movs	r2, #0
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	61fa      	str	r2, [r7, #28]
 8003da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dac:	f7fc ff24 	bl	8000bf8 <__aeabi_uldivmod>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4613      	mov	r3, r2
 8003db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003db8:	4b0b      	ldr	r3, [pc, #44]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	0c1b      	lsrs	r3, r3, #16
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003dc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dd2:	e002      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dd4:	4b05      	ldr	r3, [pc, #20]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x204>)
 8003dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3750      	adds	r7, #80	@ 0x50
 8003de0:	46bd      	mov	sp, r7
 8003de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800
 8003dec:	00f42400 	.word	0x00f42400
 8003df0:	007a1200 	.word	0x007a1200

08003df4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df8:	4b03      	ldr	r3, [pc, #12]	@ (8003e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000000 	.word	0x20000000

08003e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e10:	f7ff fff0 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 8003e14:	4602      	mov	r2, r0
 8003e16:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	0a9b      	lsrs	r3, r3, #10
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	4903      	ldr	r1, [pc, #12]	@ (8003e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e22:	5ccb      	ldrb	r3, [r1, r3]
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	08008438 	.word	0x08008438

08003e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e38:	f7ff ffdc 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	0b5b      	lsrs	r3, r3, #13
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	4903      	ldr	r1, [pc, #12]	@ (8003e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e4a:	5ccb      	ldrb	r3, [r1, r3]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	40023800 	.word	0x40023800
 8003e58:	08008438 	.word	0x08008438

08003e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d012      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e80:	4b65      	ldr	r3, [pc, #404]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a64      	ldr	r2, [pc, #400]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e86:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e8a:	6093      	str	r3, [r2, #8]
 8003e8c:	4b62      	ldr	r3, [pc, #392]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e94:	4960      	ldr	r1, [pc, #384]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d017      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003eb2:	4b59      	ldr	r3, [pc, #356]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003eb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eb8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ec0:	4955      	ldr	r1, [pc, #340]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ecc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d017      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003eee:	4b4a      	ldr	r3, [pc, #296]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ef4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efc:	4946      	ldr	r1, [pc, #280]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f08:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f0c:	d101      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 808b 	beq.w	8004042 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f30:	4a39      	ldr	r2, [pc, #228]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f36:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f38:	4b37      	ldr	r3, [pc, #220]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f44:	4b35      	ldr	r3, [pc, #212]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a34      	ldr	r2, [pc, #208]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f50:	f7fd ff80 	bl	8001e54 <HAL_GetTick>
 8003f54:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f58:	f7fd ff7c 	bl	8001e54 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b64      	cmp	r3, #100	@ 0x64
 8003f64:	d901      	bls.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e2bc      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f6a:	4b2c      	ldr	r3, [pc, #176]	@ (800401c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f76:	4b28      	ldr	r3, [pc, #160]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f7e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d035      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d02e      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f94:	4b20      	ldr	r3, [pc, #128]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f9c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003faa:	4b1b      	ldr	r3, [pc, #108]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fae:	4a1a      	ldr	r2, [pc, #104]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fb4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003fb6:	4a18      	ldr	r2, [pc, #96]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fbc:	4b16      	ldr	r3, [pc, #88]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d114      	bne.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7fd ff44 	bl	8001e54 <HAL_GetTick>
 8003fcc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fce:	e00a      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd0:	f7fd ff40 	bl	8001e54 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e27e      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0ee      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ffa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ffe:	d111      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 8004000:	4b05      	ldr	r3, [pc, #20]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800400c:	4b04      	ldr	r3, [pc, #16]	@ (8004020 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800400e:	400b      	ands	r3, r1
 8004010:	4901      	ldr	r1, [pc, #4]	@ (8004018 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
 8004016:	e00b      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004018:	40023800 	.word	0x40023800
 800401c:	40007000 	.word	0x40007000
 8004020:	0ffffcff 	.word	0x0ffffcff
 8004024:	4ba4      	ldr	r3, [pc, #656]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4aa3      	ldr	r2, [pc, #652]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800402a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800402e:	6093      	str	r3, [r2, #8]
 8004030:	4ba1      	ldr	r3, [pc, #644]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004032:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403c:	499e      	ldr	r1, [pc, #632]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800403e:	4313      	orrs	r3, r2
 8004040:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0310 	and.w	r3, r3, #16
 800404a:	2b00      	cmp	r3, #0
 800404c:	d010      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800404e:	4b9a      	ldr	r3, [pc, #616]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004054:	4a98      	ldr	r2, [pc, #608]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004056:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800405a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800405e:	4b96      	ldr	r3, [pc, #600]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004060:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004068:	4993      	ldr	r1, [pc, #588]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800407c:	4b8e      	ldr	r3, [pc, #568]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004082:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800408a:	498b      	ldr	r1, [pc, #556]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800409e:	4b86      	ldr	r3, [pc, #536]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ac:	4982      	ldr	r1, [pc, #520]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040c0:	4b7d      	ldr	r3, [pc, #500]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040ce:	497a      	ldr	r1, [pc, #488]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040e2:	4b75      	ldr	r3, [pc, #468]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e8:	f023 0203 	bic.w	r2, r3, #3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f0:	4971      	ldr	r1, [pc, #452]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004104:	4b6c      	ldr	r3, [pc, #432]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410a:	f023 020c 	bic.w	r2, r3, #12
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004112:	4969      	ldr	r1, [pc, #420]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004126:	4b64      	ldr	r3, [pc, #400]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004128:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800412c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004134:	4960      	ldr	r1, [pc, #384]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004136:	4313      	orrs	r3, r2
 8004138:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004148:	4b5b      	ldr	r3, [pc, #364]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800414e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004156:	4958      	ldr	r1, [pc, #352]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800416a:	4b53      	ldr	r3, [pc, #332]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800416c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004170:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004178:	494f      	ldr	r1, [pc, #316]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800417a:	4313      	orrs	r3, r2
 800417c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800418c:	4b4a      	ldr	r3, [pc, #296]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004192:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800419a:	4947      	ldr	r1, [pc, #284]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80041ae:	4b42      	ldr	r3, [pc, #264]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041bc:	493e      	ldr	r1, [pc, #248]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80041d0:	4b39      	ldr	r3, [pc, #228]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041de:	4936      	ldr	r1, [pc, #216]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d011      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041f2:	4b31      	ldr	r3, [pc, #196]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80041f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004200:	492d      	ldr	r1, [pc, #180]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800420c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004210:	d101      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 8004212:	2301      	movs	r3, #1
 8004214:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004222:	4b25      	ldr	r3, [pc, #148]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004228:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004230:	4921      	ldr	r1, [pc, #132]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004244:	4b1c      	ldr	r3, [pc, #112]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004252:	4919      	ldr	r1, [pc, #100]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004266:	4b14      	ldr	r3, [pc, #80]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800426c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004274:	4910      	ldr	r1, [pc, #64]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d006      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 809d 	beq.w	80043ca <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004290:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a08      	ldr	r2, [pc, #32]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8004296:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800429a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429c:	f7fd fdda 	bl	8001e54 <HAL_GetTick>
 80042a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042a2:	e00b      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042a4:	f7fd fdd6 	bl	8001e54 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b64      	cmp	r3, #100	@ 0x64
 80042b0:	d904      	bls.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e116      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 80042b6:	bf00      	nop
 80042b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042bc:	4b8b      	ldr	r3, [pc, #556]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1ed      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d017      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d113      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042dc:	4b83      	ldr	r3, [pc, #524]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80042de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042e2:	0e1b      	lsrs	r3, r3, #24
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	019a      	lsls	r2, r3, #6
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	061b      	lsls	r3, r3, #24
 80042f4:	431a      	orrs	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	071b      	lsls	r3, r3, #28
 80042fc:	497b      	ldr	r1, [pc, #492]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x4be>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004314:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004318:	d00a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004322:	2b00      	cmp	r3, #0
 8004324:	d024      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800432e:	d11f      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004330:	4b6e      	ldr	r3, [pc, #440]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004336:	0f1b      	lsrs	r3, r3, #28
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	019a      	lsls	r2, r3, #6
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	061b      	lsls	r3, r3, #24
 800434a:	431a      	orrs	r2, r3
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	071b      	lsls	r3, r3, #28
 8004350:	4966      	ldr	r1, [pc, #408]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004358:	4b64      	ldr	r3, [pc, #400]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800435a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800435e:	f023 021f 	bic.w	r2, r3, #31
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	3b01      	subs	r3, #1
 8004368:	4960      	ldr	r1, [pc, #384]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800436a:	4313      	orrs	r3, r2
 800436c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00d      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	019a      	lsls	r2, r3, #6
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	061b      	lsls	r3, r3, #24
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	071b      	lsls	r3, r3, #28
 8004390:	4956      	ldr	r1, [pc, #344]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004398:	4b54      	ldr	r3, [pc, #336]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a53      	ldr	r2, [pc, #332]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800439e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a4:	f7fd fd56 	bl	8001e54 <HAL_GetTick>
 80043a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043ac:	f7fd fd52 	bl	8001e54 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	@ 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e092      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043be:	4b4b      	ldr	r3, [pc, #300]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	f040 8088 	bne.w	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043d2:	4b46      	ldr	r3, [pc, #280]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a45      	ldr	r2, [pc, #276]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80043d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043de:	f7fd fd39 	bl	8001e54 <HAL_GetTick>
 80043e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043e6:	f7fd fd35 	bl	8001e54 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b64      	cmp	r3, #100	@ 0x64
 80043f2:	d901      	bls.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e075      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043f8:	4b3c      	ldr	r3, [pc, #240]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004404:	d0ef      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x5be>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004416:	2b00      	cmp	r3, #0
 8004418:	d009      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004422:	2b00      	cmp	r3, #0
 8004424:	d024      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442a:	2b00      	cmp	r3, #0
 800442c:	d120      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800442e:	4b2f      	ldr	r3, [pc, #188]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	019a      	lsls	r2, r3, #6
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	041b      	lsls	r3, r3, #16
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	061b      	lsls	r3, r3, #24
 800444e:	4927      	ldr	r1, [pc, #156]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004450:	4313      	orrs	r3, r2
 8004452:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004456:	4b25      	ldr	r3, [pc, #148]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004458:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800445c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	3b01      	subs	r3, #1
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	4920      	ldr	r1, [pc, #128]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d018      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x652>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004480:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004484:	d113      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004486:	4b19      	ldr	r3, [pc, #100]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8004488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448c:	0e1b      	lsrs	r3, r3, #24
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	019a      	lsls	r2, r3, #6
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	041b      	lsls	r3, r3, #16
 80044a0:	431a      	orrs	r2, r3
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	4911      	ldr	r1, [pc, #68]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044ae:	4b0f      	ldr	r3, [pc, #60]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a0e      	ldr	r2, [pc, #56]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ba:	f7fd fccb 	bl	8001e54 <HAL_GetTick>
 80044be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044c0:	e008      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044c2:	f7fd fcc7 	bl	8001e54 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	2b64      	cmp	r3, #100	@ 0x64
 80044ce:	d901      	bls.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e007      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044d4:	4b05      	ldr	r3, [pc, #20]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044e0:	d1ef      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3720      	adds	r7, #32
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40023800 	.word	0x40023800

080044f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e09d      	b.n	800463e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004506:	2b00      	cmp	r3, #0
 8004508:	d108      	bne.n	800451c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004512:	d009      	beq.n	8004528 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	61da      	str	r2, [r3, #28]
 800451a:	e005      	b.n	8004528 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fd f9e6 	bl	8001914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800455e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004568:	d902      	bls.n	8004570 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	e002      	b.n	8004576 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004570:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004574:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800457e:	d007      	beq.n	8004590 <HAL_SPI_Init+0xa0>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004588:	d002      	beq.n	8004590 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045d2:	ea42 0103 	orr.w	r1, r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045da:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	0c1b      	lsrs	r3, r3, #16
 80045ec:	f003 0204 	and.w	r2, r3, #4
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	431a      	orrs	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800460c:	ea42 0103 	orr.w	r1, r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69da      	ldr	r2, [r3, #28]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800462c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e040      	b.n	80046da <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7fd f997 	bl	800199c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2224      	movs	r2, #36	@ 0x24
 8004672:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0201 	bic.w	r2, r2, #1
 8004682:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 fb15 	bl	8004cbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f8ae 	bl	80047f4 <UART_SetConfig>
 8004698:	4603      	mov	r3, r0
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e01b      	b.n	80046da <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0201 	orr.w	r2, r2, #1
 80046d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f000 fb94 	bl	8004e00 <UART_CheckIdleState>
 80046d8:	4603      	mov	r3, r0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b08a      	sub	sp, #40	@ 0x28
 80046e6:	af02      	add	r7, sp, #8
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	60b9      	str	r1, [r7, #8]
 80046ec:	603b      	str	r3, [r7, #0]
 80046ee:	4613      	mov	r3, r2
 80046f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	d177      	bne.n	80047ea <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <HAL_UART_Transmit+0x24>
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e070      	b.n	80047ec <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2221      	movs	r2, #33	@ 0x21
 8004716:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004718:	f7fd fb9c 	bl	8001e54 <HAL_GetTick>
 800471c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	88fa      	ldrh	r2, [r7, #6]
 8004722:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	88fa      	ldrh	r2, [r7, #6]
 800472a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004736:	d108      	bne.n	800474a <HAL_UART_Transmit+0x68>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d104      	bne.n	800474a <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004740:	2300      	movs	r3, #0
 8004742:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	e003      	b.n	8004752 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004752:	e02f      	b.n	80047b4 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2200      	movs	r2, #0
 800475c:	2180      	movs	r1, #128	@ 0x80
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fba5 	bl	8004eae <UART_WaitOnFlagUntilTimeout>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d004      	beq.n	8004774 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2220      	movs	r2, #32
 800476e:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e03b      	b.n	80047ec <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10b      	bne.n	8004792 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004788:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	3302      	adds	r3, #2
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	e007      	b.n	80047a2 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	781a      	ldrb	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	3301      	adds	r3, #1
 80047a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	3b01      	subs	r3, #1
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1c9      	bne.n	8004754 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2200      	movs	r2, #0
 80047c8:	2140      	movs	r1, #64	@ 0x40
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 fb6f 	bl	8004eae <UART_WaitOnFlagUntilTimeout>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d004      	beq.n	80047e0 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2220      	movs	r2, #32
 80047da:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e005      	b.n	80047ec <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e000      	b.n	80047ec <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
  }
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3720      	adds	r7, #32
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4ba6      	ldr	r3, [pc, #664]	@ (8004ab8 <UART_SetConfig+0x2c4>)
 8004820:	4013      	ands	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	6979      	ldr	r1, [r7, #20]
 8004828:	430b      	orrs	r3, r1
 800482a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	430a      	orrs	r2, r1
 8004864:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a94      	ldr	r2, [pc, #592]	@ (8004abc <UART_SetConfig+0x2c8>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d120      	bne.n	80048b2 <UART_SetConfig+0xbe>
 8004870:	4b93      	ldr	r3, [pc, #588]	@ (8004ac0 <UART_SetConfig+0x2cc>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004876:	f003 0303 	and.w	r3, r3, #3
 800487a:	2b03      	cmp	r3, #3
 800487c:	d816      	bhi.n	80048ac <UART_SetConfig+0xb8>
 800487e:	a201      	add	r2, pc, #4	@ (adr r2, 8004884 <UART_SetConfig+0x90>)
 8004880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004884:	08004895 	.word	0x08004895
 8004888:	080048a1 	.word	0x080048a1
 800488c:	0800489b 	.word	0x0800489b
 8004890:	080048a7 	.word	0x080048a7
 8004894:	2301      	movs	r3, #1
 8004896:	77fb      	strb	r3, [r7, #31]
 8004898:	e150      	b.n	8004b3c <UART_SetConfig+0x348>
 800489a:	2302      	movs	r3, #2
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e14d      	b.n	8004b3c <UART_SetConfig+0x348>
 80048a0:	2304      	movs	r3, #4
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e14a      	b.n	8004b3c <UART_SetConfig+0x348>
 80048a6:	2308      	movs	r3, #8
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e147      	b.n	8004b3c <UART_SetConfig+0x348>
 80048ac:	2310      	movs	r3, #16
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e144      	b.n	8004b3c <UART_SetConfig+0x348>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a83      	ldr	r2, [pc, #524]	@ (8004ac4 <UART_SetConfig+0x2d0>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d132      	bne.n	8004922 <UART_SetConfig+0x12e>
 80048bc:	4b80      	ldr	r3, [pc, #512]	@ (8004ac0 <UART_SetConfig+0x2cc>)
 80048be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	2b0c      	cmp	r3, #12
 80048c8:	d828      	bhi.n	800491c <UART_SetConfig+0x128>
 80048ca:	a201      	add	r2, pc, #4	@ (adr r2, 80048d0 <UART_SetConfig+0xdc>)
 80048cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d0:	08004905 	.word	0x08004905
 80048d4:	0800491d 	.word	0x0800491d
 80048d8:	0800491d 	.word	0x0800491d
 80048dc:	0800491d 	.word	0x0800491d
 80048e0:	08004911 	.word	0x08004911
 80048e4:	0800491d 	.word	0x0800491d
 80048e8:	0800491d 	.word	0x0800491d
 80048ec:	0800491d 	.word	0x0800491d
 80048f0:	0800490b 	.word	0x0800490b
 80048f4:	0800491d 	.word	0x0800491d
 80048f8:	0800491d 	.word	0x0800491d
 80048fc:	0800491d 	.word	0x0800491d
 8004900:	08004917 	.word	0x08004917
 8004904:	2300      	movs	r3, #0
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e118      	b.n	8004b3c <UART_SetConfig+0x348>
 800490a:	2302      	movs	r3, #2
 800490c:	77fb      	strb	r3, [r7, #31]
 800490e:	e115      	b.n	8004b3c <UART_SetConfig+0x348>
 8004910:	2304      	movs	r3, #4
 8004912:	77fb      	strb	r3, [r7, #31]
 8004914:	e112      	b.n	8004b3c <UART_SetConfig+0x348>
 8004916:	2308      	movs	r3, #8
 8004918:	77fb      	strb	r3, [r7, #31]
 800491a:	e10f      	b.n	8004b3c <UART_SetConfig+0x348>
 800491c:	2310      	movs	r3, #16
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e10c      	b.n	8004b3c <UART_SetConfig+0x348>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a68      	ldr	r2, [pc, #416]	@ (8004ac8 <UART_SetConfig+0x2d4>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d120      	bne.n	800496e <UART_SetConfig+0x17a>
 800492c:	4b64      	ldr	r3, [pc, #400]	@ (8004ac0 <UART_SetConfig+0x2cc>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004932:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004936:	2b30      	cmp	r3, #48	@ 0x30
 8004938:	d013      	beq.n	8004962 <UART_SetConfig+0x16e>
 800493a:	2b30      	cmp	r3, #48	@ 0x30
 800493c:	d814      	bhi.n	8004968 <UART_SetConfig+0x174>
 800493e:	2b20      	cmp	r3, #32
 8004940:	d009      	beq.n	8004956 <UART_SetConfig+0x162>
 8004942:	2b20      	cmp	r3, #32
 8004944:	d810      	bhi.n	8004968 <UART_SetConfig+0x174>
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <UART_SetConfig+0x15c>
 800494a:	2b10      	cmp	r3, #16
 800494c:	d006      	beq.n	800495c <UART_SetConfig+0x168>
 800494e:	e00b      	b.n	8004968 <UART_SetConfig+0x174>
 8004950:	2300      	movs	r3, #0
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	e0f2      	b.n	8004b3c <UART_SetConfig+0x348>
 8004956:	2302      	movs	r3, #2
 8004958:	77fb      	strb	r3, [r7, #31]
 800495a:	e0ef      	b.n	8004b3c <UART_SetConfig+0x348>
 800495c:	2304      	movs	r3, #4
 800495e:	77fb      	strb	r3, [r7, #31]
 8004960:	e0ec      	b.n	8004b3c <UART_SetConfig+0x348>
 8004962:	2308      	movs	r3, #8
 8004964:	77fb      	strb	r3, [r7, #31]
 8004966:	e0e9      	b.n	8004b3c <UART_SetConfig+0x348>
 8004968:	2310      	movs	r3, #16
 800496a:	77fb      	strb	r3, [r7, #31]
 800496c:	e0e6      	b.n	8004b3c <UART_SetConfig+0x348>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a56      	ldr	r2, [pc, #344]	@ (8004acc <UART_SetConfig+0x2d8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d120      	bne.n	80049ba <UART_SetConfig+0x1c6>
 8004978:	4b51      	ldr	r3, [pc, #324]	@ (8004ac0 <UART_SetConfig+0x2cc>)
 800497a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800497e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004982:	2bc0      	cmp	r3, #192	@ 0xc0
 8004984:	d013      	beq.n	80049ae <UART_SetConfig+0x1ba>
 8004986:	2bc0      	cmp	r3, #192	@ 0xc0
 8004988:	d814      	bhi.n	80049b4 <UART_SetConfig+0x1c0>
 800498a:	2b80      	cmp	r3, #128	@ 0x80
 800498c:	d009      	beq.n	80049a2 <UART_SetConfig+0x1ae>
 800498e:	2b80      	cmp	r3, #128	@ 0x80
 8004990:	d810      	bhi.n	80049b4 <UART_SetConfig+0x1c0>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <UART_SetConfig+0x1a8>
 8004996:	2b40      	cmp	r3, #64	@ 0x40
 8004998:	d006      	beq.n	80049a8 <UART_SetConfig+0x1b4>
 800499a:	e00b      	b.n	80049b4 <UART_SetConfig+0x1c0>
 800499c:	2300      	movs	r3, #0
 800499e:	77fb      	strb	r3, [r7, #31]
 80049a0:	e0cc      	b.n	8004b3c <UART_SetConfig+0x348>
 80049a2:	2302      	movs	r3, #2
 80049a4:	77fb      	strb	r3, [r7, #31]
 80049a6:	e0c9      	b.n	8004b3c <UART_SetConfig+0x348>
 80049a8:	2304      	movs	r3, #4
 80049aa:	77fb      	strb	r3, [r7, #31]
 80049ac:	e0c6      	b.n	8004b3c <UART_SetConfig+0x348>
 80049ae:	2308      	movs	r3, #8
 80049b0:	77fb      	strb	r3, [r7, #31]
 80049b2:	e0c3      	b.n	8004b3c <UART_SetConfig+0x348>
 80049b4:	2310      	movs	r3, #16
 80049b6:	77fb      	strb	r3, [r7, #31]
 80049b8:	e0c0      	b.n	8004b3c <UART_SetConfig+0x348>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a44      	ldr	r2, [pc, #272]	@ (8004ad0 <UART_SetConfig+0x2dc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d125      	bne.n	8004a10 <UART_SetConfig+0x21c>
 80049c4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ac0 <UART_SetConfig+0x2cc>)
 80049c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049d2:	d017      	beq.n	8004a04 <UART_SetConfig+0x210>
 80049d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049d8:	d817      	bhi.n	8004a0a <UART_SetConfig+0x216>
 80049da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049de:	d00b      	beq.n	80049f8 <UART_SetConfig+0x204>
 80049e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049e4:	d811      	bhi.n	8004a0a <UART_SetConfig+0x216>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <UART_SetConfig+0x1fe>
 80049ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ee:	d006      	beq.n	80049fe <UART_SetConfig+0x20a>
 80049f0:	e00b      	b.n	8004a0a <UART_SetConfig+0x216>
 80049f2:	2300      	movs	r3, #0
 80049f4:	77fb      	strb	r3, [r7, #31]
 80049f6:	e0a1      	b.n	8004b3c <UART_SetConfig+0x348>
 80049f8:	2302      	movs	r3, #2
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e09e      	b.n	8004b3c <UART_SetConfig+0x348>
 80049fe:	2304      	movs	r3, #4
 8004a00:	77fb      	strb	r3, [r7, #31]
 8004a02:	e09b      	b.n	8004b3c <UART_SetConfig+0x348>
 8004a04:	2308      	movs	r3, #8
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e098      	b.n	8004b3c <UART_SetConfig+0x348>
 8004a0a:	2310      	movs	r3, #16
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e095      	b.n	8004b3c <UART_SetConfig+0x348>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a2f      	ldr	r2, [pc, #188]	@ (8004ad4 <UART_SetConfig+0x2e0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d125      	bne.n	8004a66 <UART_SetConfig+0x272>
 8004a1a:	4b29      	ldr	r3, [pc, #164]	@ (8004ac0 <UART_SetConfig+0x2cc>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a20:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a24:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a28:	d017      	beq.n	8004a5a <UART_SetConfig+0x266>
 8004a2a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a2e:	d817      	bhi.n	8004a60 <UART_SetConfig+0x26c>
 8004a30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a34:	d00b      	beq.n	8004a4e <UART_SetConfig+0x25a>
 8004a36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a3a:	d811      	bhi.n	8004a60 <UART_SetConfig+0x26c>
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <UART_SetConfig+0x254>
 8004a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a44:	d006      	beq.n	8004a54 <UART_SetConfig+0x260>
 8004a46:	e00b      	b.n	8004a60 <UART_SetConfig+0x26c>
 8004a48:	2301      	movs	r3, #1
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e076      	b.n	8004b3c <UART_SetConfig+0x348>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	77fb      	strb	r3, [r7, #31]
 8004a52:	e073      	b.n	8004b3c <UART_SetConfig+0x348>
 8004a54:	2304      	movs	r3, #4
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e070      	b.n	8004b3c <UART_SetConfig+0x348>
 8004a5a:	2308      	movs	r3, #8
 8004a5c:	77fb      	strb	r3, [r7, #31]
 8004a5e:	e06d      	b.n	8004b3c <UART_SetConfig+0x348>
 8004a60:	2310      	movs	r3, #16
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e06a      	b.n	8004b3c <UART_SetConfig+0x348>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ad8 <UART_SetConfig+0x2e4>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d138      	bne.n	8004ae2 <UART_SetConfig+0x2ee>
 8004a70:	4b13      	ldr	r3, [pc, #76]	@ (8004ac0 <UART_SetConfig+0x2cc>)
 8004a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a76:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004a7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a7e:	d017      	beq.n	8004ab0 <UART_SetConfig+0x2bc>
 8004a80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a84:	d82a      	bhi.n	8004adc <UART_SetConfig+0x2e8>
 8004a86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a8a:	d00b      	beq.n	8004aa4 <UART_SetConfig+0x2b0>
 8004a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a90:	d824      	bhi.n	8004adc <UART_SetConfig+0x2e8>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <UART_SetConfig+0x2aa>
 8004a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a9a:	d006      	beq.n	8004aaa <UART_SetConfig+0x2b6>
 8004a9c:	e01e      	b.n	8004adc <UART_SetConfig+0x2e8>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	77fb      	strb	r3, [r7, #31]
 8004aa2:	e04b      	b.n	8004b3c <UART_SetConfig+0x348>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	77fb      	strb	r3, [r7, #31]
 8004aa8:	e048      	b.n	8004b3c <UART_SetConfig+0x348>
 8004aaa:	2304      	movs	r3, #4
 8004aac:	77fb      	strb	r3, [r7, #31]
 8004aae:	e045      	b.n	8004b3c <UART_SetConfig+0x348>
 8004ab0:	2308      	movs	r3, #8
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e042      	b.n	8004b3c <UART_SetConfig+0x348>
 8004ab6:	bf00      	nop
 8004ab8:	efff69f3 	.word	0xefff69f3
 8004abc:	40011000 	.word	0x40011000
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	40004400 	.word	0x40004400
 8004ac8:	40004800 	.word	0x40004800
 8004acc:	40004c00 	.word	0x40004c00
 8004ad0:	40005000 	.word	0x40005000
 8004ad4:	40011400 	.word	0x40011400
 8004ad8:	40007800 	.word	0x40007800
 8004adc:	2310      	movs	r3, #16
 8004ade:	77fb      	strb	r3, [r7, #31]
 8004ae0:	e02c      	b.n	8004b3c <UART_SetConfig+0x348>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a72      	ldr	r2, [pc, #456]	@ (8004cb0 <UART_SetConfig+0x4bc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d125      	bne.n	8004b38 <UART_SetConfig+0x344>
 8004aec:	4b71      	ldr	r3, [pc, #452]	@ (8004cb4 <UART_SetConfig+0x4c0>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004af6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004afa:	d017      	beq.n	8004b2c <UART_SetConfig+0x338>
 8004afc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004b00:	d817      	bhi.n	8004b32 <UART_SetConfig+0x33e>
 8004b02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b06:	d00b      	beq.n	8004b20 <UART_SetConfig+0x32c>
 8004b08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b0c:	d811      	bhi.n	8004b32 <UART_SetConfig+0x33e>
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <UART_SetConfig+0x326>
 8004b12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b16:	d006      	beq.n	8004b26 <UART_SetConfig+0x332>
 8004b18:	e00b      	b.n	8004b32 <UART_SetConfig+0x33e>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	77fb      	strb	r3, [r7, #31]
 8004b1e:	e00d      	b.n	8004b3c <UART_SetConfig+0x348>
 8004b20:	2302      	movs	r3, #2
 8004b22:	77fb      	strb	r3, [r7, #31]
 8004b24:	e00a      	b.n	8004b3c <UART_SetConfig+0x348>
 8004b26:	2304      	movs	r3, #4
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	e007      	b.n	8004b3c <UART_SetConfig+0x348>
 8004b2c:	2308      	movs	r3, #8
 8004b2e:	77fb      	strb	r3, [r7, #31]
 8004b30:	e004      	b.n	8004b3c <UART_SetConfig+0x348>
 8004b32:	2310      	movs	r3, #16
 8004b34:	77fb      	strb	r3, [r7, #31]
 8004b36:	e001      	b.n	8004b3c <UART_SetConfig+0x348>
 8004b38:	2310      	movs	r3, #16
 8004b3a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b44:	d15b      	bne.n	8004bfe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b46:	7ffb      	ldrb	r3, [r7, #31]
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d828      	bhi.n	8004b9e <UART_SetConfig+0x3aa>
 8004b4c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b54 <UART_SetConfig+0x360>)
 8004b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b52:	bf00      	nop
 8004b54:	08004b79 	.word	0x08004b79
 8004b58:	08004b81 	.word	0x08004b81
 8004b5c:	08004b89 	.word	0x08004b89
 8004b60:	08004b9f 	.word	0x08004b9f
 8004b64:	08004b8f 	.word	0x08004b8f
 8004b68:	08004b9f 	.word	0x08004b9f
 8004b6c:	08004b9f 	.word	0x08004b9f
 8004b70:	08004b9f 	.word	0x08004b9f
 8004b74:	08004b97 	.word	0x08004b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b78:	f7ff f948 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8004b7c:	61b8      	str	r0, [r7, #24]
        break;
 8004b7e:	e013      	b.n	8004ba8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b80:	f7ff f958 	bl	8003e34 <HAL_RCC_GetPCLK2Freq>
 8004b84:	61b8      	str	r0, [r7, #24]
        break;
 8004b86:	e00f      	b.n	8004ba8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b88:	4b4b      	ldr	r3, [pc, #300]	@ (8004cb8 <UART_SetConfig+0x4c4>)
 8004b8a:	61bb      	str	r3, [r7, #24]
        break;
 8004b8c:	e00c      	b.n	8004ba8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b8e:	f7ff f82b 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8004b92:	61b8      	str	r0, [r7, #24]
        break;
 8004b94:	e008      	b.n	8004ba8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b9a:	61bb      	str	r3, [r7, #24]
        break;
 8004b9c:	e004      	b.n	8004ba8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	77bb      	strb	r3, [r7, #30]
        break;
 8004ba6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d074      	beq.n	8004c98 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	005a      	lsls	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	085b      	lsrs	r3, r3, #1
 8004bb8:	441a      	add	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bc2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2b0f      	cmp	r3, #15
 8004bc8:	d916      	bls.n	8004bf8 <UART_SetConfig+0x404>
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd0:	d212      	bcs.n	8004bf8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	f023 030f 	bic.w	r3, r3, #15
 8004bda:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	89fb      	ldrh	r3, [r7, #14]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	89fa      	ldrh	r2, [r7, #14]
 8004bf4:	60da      	str	r2, [r3, #12]
 8004bf6:	e04f      	b.n	8004c98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	77bb      	strb	r3, [r7, #30]
 8004bfc:	e04c      	b.n	8004c98 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bfe:	7ffb      	ldrb	r3, [r7, #31]
 8004c00:	2b08      	cmp	r3, #8
 8004c02:	d828      	bhi.n	8004c56 <UART_SetConfig+0x462>
 8004c04:	a201      	add	r2, pc, #4	@ (adr r2, 8004c0c <UART_SetConfig+0x418>)
 8004c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0a:	bf00      	nop
 8004c0c:	08004c31 	.word	0x08004c31
 8004c10:	08004c39 	.word	0x08004c39
 8004c14:	08004c41 	.word	0x08004c41
 8004c18:	08004c57 	.word	0x08004c57
 8004c1c:	08004c47 	.word	0x08004c47
 8004c20:	08004c57 	.word	0x08004c57
 8004c24:	08004c57 	.word	0x08004c57
 8004c28:	08004c57 	.word	0x08004c57
 8004c2c:	08004c4f 	.word	0x08004c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c30:	f7ff f8ec 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8004c34:	61b8      	str	r0, [r7, #24]
        break;
 8004c36:	e013      	b.n	8004c60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c38:	f7ff f8fc 	bl	8003e34 <HAL_RCC_GetPCLK2Freq>
 8004c3c:	61b8      	str	r0, [r7, #24]
        break;
 8004c3e:	e00f      	b.n	8004c60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c40:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb8 <UART_SetConfig+0x4c4>)
 8004c42:	61bb      	str	r3, [r7, #24]
        break;
 8004c44:	e00c      	b.n	8004c60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c46:	f7fe ffcf 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8004c4a:	61b8      	str	r0, [r7, #24]
        break;
 8004c4c:	e008      	b.n	8004c60 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c52:	61bb      	str	r3, [r7, #24]
        break;
 8004c54:	e004      	b.n	8004c60 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c5e:	bf00      	nop
    }

    if (pclk != 0U)
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d018      	beq.n	8004c98 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	085a      	lsrs	r2, r3, #1
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	441a      	add	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	2b0f      	cmp	r3, #15
 8004c7e:	d909      	bls.n	8004c94 <UART_SetConfig+0x4a0>
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c86:	d205      	bcs.n	8004c94 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	60da      	str	r2, [r3, #12]
 8004c92:	e001      	b.n	8004c98 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ca4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3720      	adds	r7, #32
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40007c00 	.word	0x40007c00
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	00f42400 	.word	0x00f42400

08004cbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc8:	f003 0308 	and.w	r3, r3, #8
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	430a      	orrs	r2, r1
 8004d06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	430a      	orrs	r2, r1
 8004d6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01a      	beq.n	8004dd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dba:	d10a      	bne.n	8004dd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	430a      	orrs	r2, r1
 8004dd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	605a      	str	r2, [r3, #4]
  }
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08c      	sub	sp, #48	@ 0x30
 8004e04:	af02      	add	r7, sp, #8
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e10:	f7fd f820 	bl	8001e54 <HAL_GetTick>
 8004e14:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b08      	cmp	r3, #8
 8004e22:	d12e      	bne.n	8004e82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e28:	9300      	str	r3, [sp, #0]
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f83b 	bl	8004eae <UART_WaitOnFlagUntilTimeout>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d021      	beq.n	8004e82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	e853 3f00 	ldrex	r3, [r3]
 8004e4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e52:	623b      	str	r3, [r7, #32]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e60:	69b9      	ldr	r1, [r7, #24]
 8004e62:	69fa      	ldr	r2, [r7, #28]
 8004e64:	e841 2300 	strex	r3, r2, [r1]
 8004e68:	617b      	str	r3, [r7, #20]
   return(result);
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e6      	bne.n	8004e3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e011      	b.n	8004ea6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3728      	adds	r7, #40	@ 0x28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	603b      	str	r3, [r7, #0]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ebe:	e04f      	b.n	8004f60 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec6:	d04b      	beq.n	8004f60 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ec8:	f7fc ffc4 	bl	8001e54 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d302      	bcc.n	8004ede <UART_WaitOnFlagUntilTimeout+0x30>
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e04e      	b.n	8004f80 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d037      	beq.n	8004f60 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b80      	cmp	r3, #128	@ 0x80
 8004ef4:	d034      	beq.n	8004f60 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b40      	cmp	r3, #64	@ 0x40
 8004efa:	d031      	beq.n	8004f60 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d110      	bne.n	8004f2c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2208      	movs	r2, #8
 8004f10:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 f838 	bl	8004f88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2208      	movs	r2, #8
 8004f1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e029      	b.n	8004f80 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f36:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f3a:	d111      	bne.n	8004f60 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 f81e 	bl	8004f88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e00f      	b.n	8004f80 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	bf0c      	ite	eq
 8004f70:	2301      	moveq	r3, #1
 8004f72:	2300      	movne	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	461a      	mov	r2, r3
 8004f78:	79fb      	ldrb	r3, [r7, #7]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d0a0      	beq.n	8004ec0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b095      	sub	sp, #84	@ 0x54
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f98:	e853 3f00 	ldrex	r3, [r3]
 8004f9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fa4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	461a      	mov	r2, r3
 8004fac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fae:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fb0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e6      	bne.n	8004f90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3308      	adds	r3, #8
 8004fc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fca:	6a3b      	ldr	r3, [r7, #32]
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	f023 0301 	bic.w	r3, r3, #1
 8004fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3308      	adds	r3, #8
 8004fe0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fe2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fe8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fea:	e841 2300 	strex	r3, r2, [r1]
 8004fee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1e5      	bne.n	8004fc2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d118      	bne.n	8005030 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	e853 3f00 	ldrex	r3, [r3]
 800500a:	60bb      	str	r3, [r7, #8]
   return(result);
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f023 0310 	bic.w	r3, r3, #16
 8005012:	647b      	str	r3, [r7, #68]	@ 0x44
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	461a      	mov	r2, r3
 800501a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800501c:	61bb      	str	r3, [r7, #24]
 800501e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005020:	6979      	ldr	r1, [r7, #20]
 8005022:	69ba      	ldr	r2, [r7, #24]
 8005024:	e841 2300 	strex	r3, r2, [r1]
 8005028:	613b      	str	r3, [r7, #16]
   return(result);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1e6      	bne.n	8004ffe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2220      	movs	r2, #32
 8005034:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005044:	bf00      	nop
 8005046:	3754      	adds	r7, #84	@ 0x54
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005050:	b084      	sub	sp, #16
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
 800505a:	f107 001c 	add.w	r0, r7, #28
 800505e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005062:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005066:	2b01      	cmp	r3, #1
 8005068:	d127      	bne.n	80050ba <USB_CoreInit+0x6a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	4b3a      	ldr	r3, [pc, #232]	@ (8005164 <USB_CoreInit+0x114>)
 800507c:	4013      	ands	r3, r2
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f043 0210 	orr.w	r2, r3, #16
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800509a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d105      	bne.n	80050ae <USB_CoreInit+0x5e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fad0 	bl	8005654 <USB_CoreReset>
 80050b4:	4603      	mov	r3, r0
 80050b6:	73fb      	strb	r3, [r7, #15]
 80050b8:	e03c      	b.n	8005134 <USB_CoreInit+0xe4>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80050ba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d127      	bne.n	8005112 <USB_CoreInit+0xc2>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	4b24      	ldr	r3, [pc, #144]	@ (8005164 <USB_CoreInit+0x114>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f023 0210 	bic.w	r2, r3, #16
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 80050f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d105      	bne.n	8005106 <USB_CoreInit+0xb6>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 faa4 	bl	8005654 <USB_CoreReset>
 800510c:	4603      	mov	r3, r0
 800510e:	73fb      	strb	r3, [r7, #15]
 8005110:	e010      	b.n	8005134 <USB_CoreInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fa98 	bl	8005654 <USB_CoreReset>
 8005124:	4603      	mov	r3, r0
 8005126:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8005134:	7fbb      	ldrb	r3, [r7, #30]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d10b      	bne.n	8005152 <USB_CoreInit+0x102>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f043 0206 	orr.w	r2, r3, #6
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f043 0220 	orr.w	r2, r3, #32
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005152:	7bfb      	ldrb	r3, [r7, #15]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800515e:	b004      	add	sp, #16
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	ffbdffbf 	.word	0xffbdffbf

08005168 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f023 0201 	bic.w	r2, r3, #1
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800518a:	b580      	push	{r7, lr}
 800518c:	b084      	sub	sp, #16
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	460b      	mov	r3, r1
 8005194:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80051a6:	78fb      	ldrb	r3, [r7, #3]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d115      	bne.n	80051d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80051b8:	200a      	movs	r0, #10
 80051ba:	f7fc fe57 	bl	8001e6c <HAL_Delay>
      ms += 10U;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	330a      	adds	r3, #10
 80051c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fa37 	bl	8005638 <USB_GetMode>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d01e      	beq.n	800520e <USB_SetCurrentMode+0x84>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2bc7      	cmp	r3, #199	@ 0xc7
 80051d4:	d9f0      	bls.n	80051b8 <USB_SetCurrentMode+0x2e>
 80051d6:	e01a      	b.n	800520e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d115      	bne.n	800520a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80051ea:	200a      	movs	r0, #10
 80051ec:	f7fc fe3e 	bl	8001e6c <HAL_Delay>
      ms += 10U;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	330a      	adds	r3, #10
 80051f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fa1e 	bl	8005638 <USB_GetMode>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d005      	beq.n	800520e <USB_SetCurrentMode+0x84>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2bc7      	cmp	r3, #199	@ 0xc7
 8005206:	d9f0      	bls.n	80051ea <USB_SetCurrentMode+0x60>
 8005208:	e001      	b.n	800520e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e005      	b.n	800521a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2bc8      	cmp	r3, #200	@ 0xc8
 8005212:	d101      	bne.n	8005218 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
 8005216:	e000      	b.n	800521a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005224:	b084      	sub	sp, #16
 8005226:	b580      	push	{r7, lr}
 8005228:	b086      	sub	sp, #24
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
 8005242:	e009      	b.n	8005258 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	3340      	adds	r3, #64	@ 0x40
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	2200      	movs	r2, #0
 8005250:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3301      	adds	r3, #1
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	2b0e      	cmp	r3, #14
 800525c:	d9f2      	bls.n	8005244 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800525e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005262:	2b00      	cmp	r3, #0
 8005264:	d11c      	bne.n	80052a0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005274:	f043 0302 	orr.w	r3, r3, #2
 8005278:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800527e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e005      	b.n	80052ac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80052b2:	461a      	mov	r2, r3
 80052b4:	2300      	movs	r3, #0
 80052b6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d10d      	bne.n	80052dc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d104      	bne.n	80052d2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052c8:	2100      	movs	r1, #0
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f97a 	bl	80055c4 <USB_SetDevSpeed>
 80052d0:	e01a      	b.n	8005308 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052d2:	2101      	movs	r1, #1
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f975 	bl	80055c4 <USB_SetDevSpeed>
 80052da:	e015      	b.n	8005308 <USB_DevInit+0xe4>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) \
 || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80052dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	d10d      	bne.n	8005300 <USB_DevInit+0xdc>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <USB_DevInit+0xd2>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052ec:	2100      	movs	r1, #0
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f968 	bl	80055c4 <USB_SetDevSpeed>
 80052f4:	e008      	b.n	8005308 <USB_DevInit+0xe4>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052f6:	2101      	movs	r1, #1
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f963 	bl	80055c4 <USB_SetDevSpeed>
 80052fe:	e003      	b.n	8005308 <USB_DevInit+0xe4>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005300:	2103      	movs	r1, #3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f95e 	bl	80055c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005308:	2110      	movs	r1, #16
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f8fa 	bl	8005504 <USB_FlushTxFifo>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <USB_DevInit+0xf6>
  {
    ret = HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f924 	bl	8005568 <USB_FlushRxFifo>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <USB_DevInit+0x106>
  {
    ret = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005330:	461a      	mov	r2, r3
 8005332:	2300      	movs	r3, #0
 8005334:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800533c:	461a      	mov	r2, r3
 800533e:	2300      	movs	r3, #0
 8005340:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005348:	461a      	mov	r2, r3
 800534a:	2300      	movs	r3, #0
 800534c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800534e:	2300      	movs	r3, #0
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	e043      	b.n	80053dc <USB_DevInit+0x1b8>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005366:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800536a:	d118      	bne.n	800539e <USB_DevInit+0x17a>
    {
      if (i == 0U)
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10a      	bne.n	8005388 <USB_DevInit+0x164>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	015a      	lsls	r2, r3, #5
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4413      	add	r3, r2
 800537a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800537e:	461a      	mov	r2, r3
 8005380:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e013      	b.n	80053b0 <USB_DevInit+0x18c>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005394:	461a      	mov	r2, r3
 8005396:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	e008      	b.n	80053b0 <USB_DevInit+0x18c>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053aa:	461a      	mov	r2, r3
 80053ac:	2300      	movs	r3, #0
 80053ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053bc:	461a      	mov	r2, r3
 80053be:	2300      	movs	r3, #0
 80053c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	015a      	lsls	r2, r3, #5
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053ce:	461a      	mov	r2, r3
 80053d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80053d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	3301      	adds	r3, #1
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80053e0:	461a      	mov	r2, r3
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d3b5      	bcc.n	8005354 <USB_DevInit+0x130>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	e043      	b.n	8005476 <USB_DevInit+0x252>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005400:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005404:	d118      	bne.n	8005438 <USB_DevInit+0x214>
    {
      if (i == 0U)
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <USB_DevInit+0x1fe>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	015a      	lsls	r2, r3, #5
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005418:	461a      	mov	r2, r3
 800541a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800541e:	6013      	str	r3, [r2, #0]
 8005420:	e013      	b.n	800544a <USB_DevInit+0x226>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	015a      	lsls	r2, r3, #5
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800542e:	461a      	mov	r2, r3
 8005430:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005434:	6013      	str	r3, [r2, #0]
 8005436:	e008      	b.n	800544a <USB_DevInit+0x226>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005444:	461a      	mov	r2, r3
 8005446:	2300      	movs	r3, #0
 8005448:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005456:	461a      	mov	r2, r3
 8005458:	2300      	movs	r3, #0
 800545a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005468:	461a      	mov	r2, r3
 800546a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800546e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	3301      	adds	r3, #1
 8005474:	613b      	str	r3, [r7, #16]
 8005476:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800547a:	461a      	mov	r2, r3
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	4293      	cmp	r3, r2
 8005480:	d3b5      	bcc.n	80053ee <USB_DevInit+0x1ca>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005490:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005494:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80054a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d105      	bne.n	80054b8 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	f043 0210 	orr.w	r2, r3, #16
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	699a      	ldr	r2, [r3, #24]
 80054bc:	4b0f      	ldr	r3, [pc, #60]	@ (80054fc <USB_DevInit+0x2d8>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d005      	beq.n	80054d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	f043 0208 	orr.w	r2, r3, #8
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d105      	bne.n	80054ec <USB_DevInit+0x2c8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699a      	ldr	r2, [r3, #24]
 80054e4:	4b06      	ldr	r3, [pc, #24]	@ (8005500 <USB_DevInit+0x2dc>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80054ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3718      	adds	r7, #24
 80054f2:	46bd      	mov	sp, r7
 80054f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054f8:	b004      	add	sp, #16
 80054fa:	4770      	bx	lr
 80054fc:	803c3800 	.word	0x803c3800
 8005500:	40000004 	.word	0x40000004

08005504 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3301      	adds	r3, #1
 8005516:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800551e:	d901      	bls.n	8005524 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e01b      	b.n	800555c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	daf2      	bge.n	8005512 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800552c:	2300      	movs	r3, #0
 800552e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	019b      	lsls	r3, r3, #6
 8005534:	f043 0220 	orr.w	r2, r3, #32
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3301      	adds	r3, #1
 8005540:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005548:	d901      	bls.n	800554e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e006      	b.n	800555c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b20      	cmp	r3, #32
 8005558:	d0f0      	beq.n	800553c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005570:	2300      	movs	r3, #0
 8005572:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	3301      	adds	r3, #1
 8005578:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005580:	d901      	bls.n	8005586 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e018      	b.n	80055b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	daf2      	bge.n	8005574 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800558e:	2300      	movs	r3, #0
 8005590:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2210      	movs	r2, #16
 8005596:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	3301      	adds	r3, #1
 800559c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80055a4:	d901      	bls.n	80055aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e006      	b.n	80055b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b10      	cmp	r3, #16
 80055b4:	d0f0      	beq.n	8005598 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3714      	adds	r7, #20
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	78fb      	ldrb	r3, [r7, #3]
 80055de:	68f9      	ldr	r1, [r7, #12]
 80055e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055e4:	4313      	orrs	r3, r2
 80055e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b085      	sub	sp, #20
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005610:	f023 0303 	bic.w	r3, r3, #3
 8005614:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005624:	f043 0302 	orr.w	r3, r3, #2
 8005628:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	f003 0301 	and.w	r3, r3, #1
}
 8005648:	4618      	mov	r0, r3
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3301      	adds	r3, #1
 8005664:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800566c:	d901      	bls.n	8005672 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e01b      	b.n	80056aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	daf2      	bge.n	8005660 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f043 0201 	orr.w	r2, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3301      	adds	r3, #1
 800568e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005696:	d901      	bls.n	800569c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e006      	b.n	80056aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d0f0      	beq.n	800568a <USB_CoreReset+0x36>

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <__cvt>:
 80056b6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056ba:	ec57 6b10 	vmov	r6, r7, d0
 80056be:	2f00      	cmp	r7, #0
 80056c0:	460c      	mov	r4, r1
 80056c2:	4619      	mov	r1, r3
 80056c4:	463b      	mov	r3, r7
 80056c6:	bfbb      	ittet	lt
 80056c8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80056cc:	461f      	movlt	r7, r3
 80056ce:	2300      	movge	r3, #0
 80056d0:	232d      	movlt	r3, #45	@ 0x2d
 80056d2:	700b      	strb	r3, [r1, #0]
 80056d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056d6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80056da:	4691      	mov	r9, r2
 80056dc:	f023 0820 	bic.w	r8, r3, #32
 80056e0:	bfbc      	itt	lt
 80056e2:	4632      	movlt	r2, r6
 80056e4:	4616      	movlt	r6, r2
 80056e6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056ea:	d005      	beq.n	80056f8 <__cvt+0x42>
 80056ec:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80056f0:	d100      	bne.n	80056f4 <__cvt+0x3e>
 80056f2:	3401      	adds	r4, #1
 80056f4:	2102      	movs	r1, #2
 80056f6:	e000      	b.n	80056fa <__cvt+0x44>
 80056f8:	2103      	movs	r1, #3
 80056fa:	ab03      	add	r3, sp, #12
 80056fc:	9301      	str	r3, [sp, #4]
 80056fe:	ab02      	add	r3, sp, #8
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	ec47 6b10 	vmov	d0, r6, r7
 8005706:	4653      	mov	r3, sl
 8005708:	4622      	mov	r2, r4
 800570a:	f000 fe4d 	bl	80063a8 <_dtoa_r>
 800570e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005712:	4605      	mov	r5, r0
 8005714:	d119      	bne.n	800574a <__cvt+0x94>
 8005716:	f019 0f01 	tst.w	r9, #1
 800571a:	d00e      	beq.n	800573a <__cvt+0x84>
 800571c:	eb00 0904 	add.w	r9, r0, r4
 8005720:	2200      	movs	r2, #0
 8005722:	2300      	movs	r3, #0
 8005724:	4630      	mov	r0, r6
 8005726:	4639      	mov	r1, r7
 8005728:	f7fb f9f6 	bl	8000b18 <__aeabi_dcmpeq>
 800572c:	b108      	cbz	r0, 8005732 <__cvt+0x7c>
 800572e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005732:	2230      	movs	r2, #48	@ 0x30
 8005734:	9b03      	ldr	r3, [sp, #12]
 8005736:	454b      	cmp	r3, r9
 8005738:	d31e      	bcc.n	8005778 <__cvt+0xc2>
 800573a:	9b03      	ldr	r3, [sp, #12]
 800573c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800573e:	1b5b      	subs	r3, r3, r5
 8005740:	4628      	mov	r0, r5
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	b004      	add	sp, #16
 8005746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800574a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800574e:	eb00 0904 	add.w	r9, r0, r4
 8005752:	d1e5      	bne.n	8005720 <__cvt+0x6a>
 8005754:	7803      	ldrb	r3, [r0, #0]
 8005756:	2b30      	cmp	r3, #48	@ 0x30
 8005758:	d10a      	bne.n	8005770 <__cvt+0xba>
 800575a:	2200      	movs	r2, #0
 800575c:	2300      	movs	r3, #0
 800575e:	4630      	mov	r0, r6
 8005760:	4639      	mov	r1, r7
 8005762:	f7fb f9d9 	bl	8000b18 <__aeabi_dcmpeq>
 8005766:	b918      	cbnz	r0, 8005770 <__cvt+0xba>
 8005768:	f1c4 0401 	rsb	r4, r4, #1
 800576c:	f8ca 4000 	str.w	r4, [sl]
 8005770:	f8da 3000 	ldr.w	r3, [sl]
 8005774:	4499      	add	r9, r3
 8005776:	e7d3      	b.n	8005720 <__cvt+0x6a>
 8005778:	1c59      	adds	r1, r3, #1
 800577a:	9103      	str	r1, [sp, #12]
 800577c:	701a      	strb	r2, [r3, #0]
 800577e:	e7d9      	b.n	8005734 <__cvt+0x7e>

08005780 <__exponent>:
 8005780:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005782:	2900      	cmp	r1, #0
 8005784:	bfba      	itte	lt
 8005786:	4249      	neglt	r1, r1
 8005788:	232d      	movlt	r3, #45	@ 0x2d
 800578a:	232b      	movge	r3, #43	@ 0x2b
 800578c:	2909      	cmp	r1, #9
 800578e:	7002      	strb	r2, [r0, #0]
 8005790:	7043      	strb	r3, [r0, #1]
 8005792:	dd29      	ble.n	80057e8 <__exponent+0x68>
 8005794:	f10d 0307 	add.w	r3, sp, #7
 8005798:	461d      	mov	r5, r3
 800579a:	270a      	movs	r7, #10
 800579c:	461a      	mov	r2, r3
 800579e:	fbb1 f6f7 	udiv	r6, r1, r7
 80057a2:	fb07 1416 	mls	r4, r7, r6, r1
 80057a6:	3430      	adds	r4, #48	@ 0x30
 80057a8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80057ac:	460c      	mov	r4, r1
 80057ae:	2c63      	cmp	r4, #99	@ 0x63
 80057b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80057b4:	4631      	mov	r1, r6
 80057b6:	dcf1      	bgt.n	800579c <__exponent+0x1c>
 80057b8:	3130      	adds	r1, #48	@ 0x30
 80057ba:	1e94      	subs	r4, r2, #2
 80057bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057c0:	1c41      	adds	r1, r0, #1
 80057c2:	4623      	mov	r3, r4
 80057c4:	42ab      	cmp	r3, r5
 80057c6:	d30a      	bcc.n	80057de <__exponent+0x5e>
 80057c8:	f10d 0309 	add.w	r3, sp, #9
 80057cc:	1a9b      	subs	r3, r3, r2
 80057ce:	42ac      	cmp	r4, r5
 80057d0:	bf88      	it	hi
 80057d2:	2300      	movhi	r3, #0
 80057d4:	3302      	adds	r3, #2
 80057d6:	4403      	add	r3, r0
 80057d8:	1a18      	subs	r0, r3, r0
 80057da:	b003      	add	sp, #12
 80057dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057de:	f813 6b01 	ldrb.w	r6, [r3], #1
 80057e2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80057e6:	e7ed      	b.n	80057c4 <__exponent+0x44>
 80057e8:	2330      	movs	r3, #48	@ 0x30
 80057ea:	3130      	adds	r1, #48	@ 0x30
 80057ec:	7083      	strb	r3, [r0, #2]
 80057ee:	70c1      	strb	r1, [r0, #3]
 80057f0:	1d03      	adds	r3, r0, #4
 80057f2:	e7f1      	b.n	80057d8 <__exponent+0x58>

080057f4 <_printf_float>:
 80057f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f8:	b08d      	sub	sp, #52	@ 0x34
 80057fa:	460c      	mov	r4, r1
 80057fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005800:	4616      	mov	r6, r2
 8005802:	461f      	mov	r7, r3
 8005804:	4605      	mov	r5, r0
 8005806:	f000 fccd 	bl	80061a4 <_localeconv_r>
 800580a:	6803      	ldr	r3, [r0, #0]
 800580c:	9304      	str	r3, [sp, #16]
 800580e:	4618      	mov	r0, r3
 8005810:	f7fa fd56 	bl	80002c0 <strlen>
 8005814:	2300      	movs	r3, #0
 8005816:	930a      	str	r3, [sp, #40]	@ 0x28
 8005818:	f8d8 3000 	ldr.w	r3, [r8]
 800581c:	9005      	str	r0, [sp, #20]
 800581e:	3307      	adds	r3, #7
 8005820:	f023 0307 	bic.w	r3, r3, #7
 8005824:	f103 0208 	add.w	r2, r3, #8
 8005828:	f894 a018 	ldrb.w	sl, [r4, #24]
 800582c:	f8d4 b000 	ldr.w	fp, [r4]
 8005830:	f8c8 2000 	str.w	r2, [r8]
 8005834:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005838:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800583c:	9307      	str	r3, [sp, #28]
 800583e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005842:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800584a:	4b9c      	ldr	r3, [pc, #624]	@ (8005abc <_printf_float+0x2c8>)
 800584c:	f04f 32ff 	mov.w	r2, #4294967295
 8005850:	f7fb f994 	bl	8000b7c <__aeabi_dcmpun>
 8005854:	bb70      	cbnz	r0, 80058b4 <_printf_float+0xc0>
 8005856:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800585a:	4b98      	ldr	r3, [pc, #608]	@ (8005abc <_printf_float+0x2c8>)
 800585c:	f04f 32ff 	mov.w	r2, #4294967295
 8005860:	f7fb f96e 	bl	8000b40 <__aeabi_dcmple>
 8005864:	bb30      	cbnz	r0, 80058b4 <_printf_float+0xc0>
 8005866:	2200      	movs	r2, #0
 8005868:	2300      	movs	r3, #0
 800586a:	4640      	mov	r0, r8
 800586c:	4649      	mov	r1, r9
 800586e:	f7fb f95d 	bl	8000b2c <__aeabi_dcmplt>
 8005872:	b110      	cbz	r0, 800587a <_printf_float+0x86>
 8005874:	232d      	movs	r3, #45	@ 0x2d
 8005876:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800587a:	4a91      	ldr	r2, [pc, #580]	@ (8005ac0 <_printf_float+0x2cc>)
 800587c:	4b91      	ldr	r3, [pc, #580]	@ (8005ac4 <_printf_float+0x2d0>)
 800587e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005882:	bf94      	ite	ls
 8005884:	4690      	movls	r8, r2
 8005886:	4698      	movhi	r8, r3
 8005888:	2303      	movs	r3, #3
 800588a:	6123      	str	r3, [r4, #16]
 800588c:	f02b 0304 	bic.w	r3, fp, #4
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	f04f 0900 	mov.w	r9, #0
 8005896:	9700      	str	r7, [sp, #0]
 8005898:	4633      	mov	r3, r6
 800589a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800589c:	4621      	mov	r1, r4
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 f9d2 	bl	8005c48 <_printf_common>
 80058a4:	3001      	adds	r0, #1
 80058a6:	f040 808d 	bne.w	80059c4 <_printf_float+0x1d0>
 80058aa:	f04f 30ff 	mov.w	r0, #4294967295
 80058ae:	b00d      	add	sp, #52	@ 0x34
 80058b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b4:	4642      	mov	r2, r8
 80058b6:	464b      	mov	r3, r9
 80058b8:	4640      	mov	r0, r8
 80058ba:	4649      	mov	r1, r9
 80058bc:	f7fb f95e 	bl	8000b7c <__aeabi_dcmpun>
 80058c0:	b140      	cbz	r0, 80058d4 <_printf_float+0xe0>
 80058c2:	464b      	mov	r3, r9
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	bfbc      	itt	lt
 80058c8:	232d      	movlt	r3, #45	@ 0x2d
 80058ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80058ce:	4a7e      	ldr	r2, [pc, #504]	@ (8005ac8 <_printf_float+0x2d4>)
 80058d0:	4b7e      	ldr	r3, [pc, #504]	@ (8005acc <_printf_float+0x2d8>)
 80058d2:	e7d4      	b.n	800587e <_printf_float+0x8a>
 80058d4:	6863      	ldr	r3, [r4, #4]
 80058d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80058da:	9206      	str	r2, [sp, #24]
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	d13b      	bne.n	8005958 <_printf_float+0x164>
 80058e0:	2306      	movs	r3, #6
 80058e2:	6063      	str	r3, [r4, #4]
 80058e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80058e8:	2300      	movs	r3, #0
 80058ea:	6022      	str	r2, [r4, #0]
 80058ec:	9303      	str	r3, [sp, #12]
 80058ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80058f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80058f4:	ab09      	add	r3, sp, #36	@ 0x24
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	6861      	ldr	r1, [r4, #4]
 80058fa:	ec49 8b10 	vmov	d0, r8, r9
 80058fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005902:	4628      	mov	r0, r5
 8005904:	f7ff fed7 	bl	80056b6 <__cvt>
 8005908:	9b06      	ldr	r3, [sp, #24]
 800590a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800590c:	2b47      	cmp	r3, #71	@ 0x47
 800590e:	4680      	mov	r8, r0
 8005910:	d129      	bne.n	8005966 <_printf_float+0x172>
 8005912:	1cc8      	adds	r0, r1, #3
 8005914:	db02      	blt.n	800591c <_printf_float+0x128>
 8005916:	6863      	ldr	r3, [r4, #4]
 8005918:	4299      	cmp	r1, r3
 800591a:	dd41      	ble.n	80059a0 <_printf_float+0x1ac>
 800591c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005920:	fa5f fa8a 	uxtb.w	sl, sl
 8005924:	3901      	subs	r1, #1
 8005926:	4652      	mov	r2, sl
 8005928:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800592c:	9109      	str	r1, [sp, #36]	@ 0x24
 800592e:	f7ff ff27 	bl	8005780 <__exponent>
 8005932:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005934:	1813      	adds	r3, r2, r0
 8005936:	2a01      	cmp	r2, #1
 8005938:	4681      	mov	r9, r0
 800593a:	6123      	str	r3, [r4, #16]
 800593c:	dc02      	bgt.n	8005944 <_printf_float+0x150>
 800593e:	6822      	ldr	r2, [r4, #0]
 8005940:	07d2      	lsls	r2, r2, #31
 8005942:	d501      	bpl.n	8005948 <_printf_float+0x154>
 8005944:	3301      	adds	r3, #1
 8005946:	6123      	str	r3, [r4, #16]
 8005948:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800594c:	2b00      	cmp	r3, #0
 800594e:	d0a2      	beq.n	8005896 <_printf_float+0xa2>
 8005950:	232d      	movs	r3, #45	@ 0x2d
 8005952:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005956:	e79e      	b.n	8005896 <_printf_float+0xa2>
 8005958:	9a06      	ldr	r2, [sp, #24]
 800595a:	2a47      	cmp	r2, #71	@ 0x47
 800595c:	d1c2      	bne.n	80058e4 <_printf_float+0xf0>
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1c0      	bne.n	80058e4 <_printf_float+0xf0>
 8005962:	2301      	movs	r3, #1
 8005964:	e7bd      	b.n	80058e2 <_printf_float+0xee>
 8005966:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800596a:	d9db      	bls.n	8005924 <_printf_float+0x130>
 800596c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005970:	d118      	bne.n	80059a4 <_printf_float+0x1b0>
 8005972:	2900      	cmp	r1, #0
 8005974:	6863      	ldr	r3, [r4, #4]
 8005976:	dd0b      	ble.n	8005990 <_printf_float+0x19c>
 8005978:	6121      	str	r1, [r4, #16]
 800597a:	b913      	cbnz	r3, 8005982 <_printf_float+0x18e>
 800597c:	6822      	ldr	r2, [r4, #0]
 800597e:	07d0      	lsls	r0, r2, #31
 8005980:	d502      	bpl.n	8005988 <_printf_float+0x194>
 8005982:	3301      	adds	r3, #1
 8005984:	440b      	add	r3, r1
 8005986:	6123      	str	r3, [r4, #16]
 8005988:	65a1      	str	r1, [r4, #88]	@ 0x58
 800598a:	f04f 0900 	mov.w	r9, #0
 800598e:	e7db      	b.n	8005948 <_printf_float+0x154>
 8005990:	b913      	cbnz	r3, 8005998 <_printf_float+0x1a4>
 8005992:	6822      	ldr	r2, [r4, #0]
 8005994:	07d2      	lsls	r2, r2, #31
 8005996:	d501      	bpl.n	800599c <_printf_float+0x1a8>
 8005998:	3302      	adds	r3, #2
 800599a:	e7f4      	b.n	8005986 <_printf_float+0x192>
 800599c:	2301      	movs	r3, #1
 800599e:	e7f2      	b.n	8005986 <_printf_float+0x192>
 80059a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80059a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059a6:	4299      	cmp	r1, r3
 80059a8:	db05      	blt.n	80059b6 <_printf_float+0x1c2>
 80059aa:	6823      	ldr	r3, [r4, #0]
 80059ac:	6121      	str	r1, [r4, #16]
 80059ae:	07d8      	lsls	r0, r3, #31
 80059b0:	d5ea      	bpl.n	8005988 <_printf_float+0x194>
 80059b2:	1c4b      	adds	r3, r1, #1
 80059b4:	e7e7      	b.n	8005986 <_printf_float+0x192>
 80059b6:	2900      	cmp	r1, #0
 80059b8:	bfd4      	ite	le
 80059ba:	f1c1 0202 	rsble	r2, r1, #2
 80059be:	2201      	movgt	r2, #1
 80059c0:	4413      	add	r3, r2
 80059c2:	e7e0      	b.n	8005986 <_printf_float+0x192>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	055a      	lsls	r2, r3, #21
 80059c8:	d407      	bmi.n	80059da <_printf_float+0x1e6>
 80059ca:	6923      	ldr	r3, [r4, #16]
 80059cc:	4642      	mov	r2, r8
 80059ce:	4631      	mov	r1, r6
 80059d0:	4628      	mov	r0, r5
 80059d2:	47b8      	blx	r7
 80059d4:	3001      	adds	r0, #1
 80059d6:	d12b      	bne.n	8005a30 <_printf_float+0x23c>
 80059d8:	e767      	b.n	80058aa <_printf_float+0xb6>
 80059da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059de:	f240 80dd 	bls.w	8005b9c <_printf_float+0x3a8>
 80059e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059e6:	2200      	movs	r2, #0
 80059e8:	2300      	movs	r3, #0
 80059ea:	f7fb f895 	bl	8000b18 <__aeabi_dcmpeq>
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d033      	beq.n	8005a5a <_printf_float+0x266>
 80059f2:	4a37      	ldr	r2, [pc, #220]	@ (8005ad0 <_printf_float+0x2dc>)
 80059f4:	2301      	movs	r3, #1
 80059f6:	4631      	mov	r1, r6
 80059f8:	4628      	mov	r0, r5
 80059fa:	47b8      	blx	r7
 80059fc:	3001      	adds	r0, #1
 80059fe:	f43f af54 	beq.w	80058aa <_printf_float+0xb6>
 8005a02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005a06:	4543      	cmp	r3, r8
 8005a08:	db02      	blt.n	8005a10 <_printf_float+0x21c>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	07d8      	lsls	r0, r3, #31
 8005a0e:	d50f      	bpl.n	8005a30 <_printf_float+0x23c>
 8005a10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a14:	4631      	mov	r1, r6
 8005a16:	4628      	mov	r0, r5
 8005a18:	47b8      	blx	r7
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	f43f af45 	beq.w	80058aa <_printf_float+0xb6>
 8005a20:	f04f 0900 	mov.w	r9, #0
 8005a24:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a28:	f104 0a1a 	add.w	sl, r4, #26
 8005a2c:	45c8      	cmp	r8, r9
 8005a2e:	dc09      	bgt.n	8005a44 <_printf_float+0x250>
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	079b      	lsls	r3, r3, #30
 8005a34:	f100 8103 	bmi.w	8005c3e <_printf_float+0x44a>
 8005a38:	68e0      	ldr	r0, [r4, #12]
 8005a3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a3c:	4298      	cmp	r0, r3
 8005a3e:	bfb8      	it	lt
 8005a40:	4618      	movlt	r0, r3
 8005a42:	e734      	b.n	80058ae <_printf_float+0xba>
 8005a44:	2301      	movs	r3, #1
 8005a46:	4652      	mov	r2, sl
 8005a48:	4631      	mov	r1, r6
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	47b8      	blx	r7
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f43f af2b 	beq.w	80058aa <_printf_float+0xb6>
 8005a54:	f109 0901 	add.w	r9, r9, #1
 8005a58:	e7e8      	b.n	8005a2c <_printf_float+0x238>
 8005a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	dc39      	bgt.n	8005ad4 <_printf_float+0x2e0>
 8005a60:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad0 <_printf_float+0x2dc>)
 8005a62:	2301      	movs	r3, #1
 8005a64:	4631      	mov	r1, r6
 8005a66:	4628      	mov	r0, r5
 8005a68:	47b8      	blx	r7
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	f43f af1d 	beq.w	80058aa <_printf_float+0xb6>
 8005a70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005a74:	ea59 0303 	orrs.w	r3, r9, r3
 8005a78:	d102      	bne.n	8005a80 <_printf_float+0x28c>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	07d9      	lsls	r1, r3, #31
 8005a7e:	d5d7      	bpl.n	8005a30 <_printf_float+0x23c>
 8005a80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a84:	4631      	mov	r1, r6
 8005a86:	4628      	mov	r0, r5
 8005a88:	47b8      	blx	r7
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	f43f af0d 	beq.w	80058aa <_printf_float+0xb6>
 8005a90:	f04f 0a00 	mov.w	sl, #0
 8005a94:	f104 0b1a 	add.w	fp, r4, #26
 8005a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a9a:	425b      	negs	r3, r3
 8005a9c:	4553      	cmp	r3, sl
 8005a9e:	dc01      	bgt.n	8005aa4 <_printf_float+0x2b0>
 8005aa0:	464b      	mov	r3, r9
 8005aa2:	e793      	b.n	80059cc <_printf_float+0x1d8>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	465a      	mov	r2, fp
 8005aa8:	4631      	mov	r1, r6
 8005aaa:	4628      	mov	r0, r5
 8005aac:	47b8      	blx	r7
 8005aae:	3001      	adds	r0, #1
 8005ab0:	f43f aefb 	beq.w	80058aa <_printf_float+0xb6>
 8005ab4:	f10a 0a01 	add.w	sl, sl, #1
 8005ab8:	e7ee      	b.n	8005a98 <_printf_float+0x2a4>
 8005aba:	bf00      	nop
 8005abc:	7fefffff 	.word	0x7fefffff
 8005ac0:	08008440 	.word	0x08008440
 8005ac4:	08008444 	.word	0x08008444
 8005ac8:	08008448 	.word	0x08008448
 8005acc:	0800844c 	.word	0x0800844c
 8005ad0:	08008450 	.word	0x08008450
 8005ad4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005ad6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ada:	4553      	cmp	r3, sl
 8005adc:	bfa8      	it	ge
 8005ade:	4653      	movge	r3, sl
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	4699      	mov	r9, r3
 8005ae4:	dc36      	bgt.n	8005b54 <_printf_float+0x360>
 8005ae6:	f04f 0b00 	mov.w	fp, #0
 8005aea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aee:	f104 021a 	add.w	r2, r4, #26
 8005af2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005af4:	9306      	str	r3, [sp, #24]
 8005af6:	eba3 0309 	sub.w	r3, r3, r9
 8005afa:	455b      	cmp	r3, fp
 8005afc:	dc31      	bgt.n	8005b62 <_printf_float+0x36e>
 8005afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b00:	459a      	cmp	sl, r3
 8005b02:	dc3a      	bgt.n	8005b7a <_printf_float+0x386>
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	07da      	lsls	r2, r3, #31
 8005b08:	d437      	bmi.n	8005b7a <_printf_float+0x386>
 8005b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b0c:	ebaa 0903 	sub.w	r9, sl, r3
 8005b10:	9b06      	ldr	r3, [sp, #24]
 8005b12:	ebaa 0303 	sub.w	r3, sl, r3
 8005b16:	4599      	cmp	r9, r3
 8005b18:	bfa8      	it	ge
 8005b1a:	4699      	movge	r9, r3
 8005b1c:	f1b9 0f00 	cmp.w	r9, #0
 8005b20:	dc33      	bgt.n	8005b8a <_printf_float+0x396>
 8005b22:	f04f 0800 	mov.w	r8, #0
 8005b26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b2a:	f104 0b1a 	add.w	fp, r4, #26
 8005b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b30:	ebaa 0303 	sub.w	r3, sl, r3
 8005b34:	eba3 0309 	sub.w	r3, r3, r9
 8005b38:	4543      	cmp	r3, r8
 8005b3a:	f77f af79 	ble.w	8005a30 <_printf_float+0x23c>
 8005b3e:	2301      	movs	r3, #1
 8005b40:	465a      	mov	r2, fp
 8005b42:	4631      	mov	r1, r6
 8005b44:	4628      	mov	r0, r5
 8005b46:	47b8      	blx	r7
 8005b48:	3001      	adds	r0, #1
 8005b4a:	f43f aeae 	beq.w	80058aa <_printf_float+0xb6>
 8005b4e:	f108 0801 	add.w	r8, r8, #1
 8005b52:	e7ec      	b.n	8005b2e <_printf_float+0x33a>
 8005b54:	4642      	mov	r2, r8
 8005b56:	4631      	mov	r1, r6
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b8      	blx	r7
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d1c2      	bne.n	8005ae6 <_printf_float+0x2f2>
 8005b60:	e6a3      	b.n	80058aa <_printf_float+0xb6>
 8005b62:	2301      	movs	r3, #1
 8005b64:	4631      	mov	r1, r6
 8005b66:	4628      	mov	r0, r5
 8005b68:	9206      	str	r2, [sp, #24]
 8005b6a:	47b8      	blx	r7
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	f43f ae9c 	beq.w	80058aa <_printf_float+0xb6>
 8005b72:	9a06      	ldr	r2, [sp, #24]
 8005b74:	f10b 0b01 	add.w	fp, fp, #1
 8005b78:	e7bb      	b.n	8005af2 <_printf_float+0x2fe>
 8005b7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b7e:	4631      	mov	r1, r6
 8005b80:	4628      	mov	r0, r5
 8005b82:	47b8      	blx	r7
 8005b84:	3001      	adds	r0, #1
 8005b86:	d1c0      	bne.n	8005b0a <_printf_float+0x316>
 8005b88:	e68f      	b.n	80058aa <_printf_float+0xb6>
 8005b8a:	9a06      	ldr	r2, [sp, #24]
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	4442      	add	r2, r8
 8005b90:	4631      	mov	r1, r6
 8005b92:	4628      	mov	r0, r5
 8005b94:	47b8      	blx	r7
 8005b96:	3001      	adds	r0, #1
 8005b98:	d1c3      	bne.n	8005b22 <_printf_float+0x32e>
 8005b9a:	e686      	b.n	80058aa <_printf_float+0xb6>
 8005b9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ba0:	f1ba 0f01 	cmp.w	sl, #1
 8005ba4:	dc01      	bgt.n	8005baa <_printf_float+0x3b6>
 8005ba6:	07db      	lsls	r3, r3, #31
 8005ba8:	d536      	bpl.n	8005c18 <_printf_float+0x424>
 8005baa:	2301      	movs	r3, #1
 8005bac:	4642      	mov	r2, r8
 8005bae:	4631      	mov	r1, r6
 8005bb0:	4628      	mov	r0, r5
 8005bb2:	47b8      	blx	r7
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f43f ae78 	beq.w	80058aa <_printf_float+0xb6>
 8005bba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bbe:	4631      	mov	r1, r6
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	47b8      	blx	r7
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	f43f ae70 	beq.w	80058aa <_printf_float+0xb6>
 8005bca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005bce:	2200      	movs	r2, #0
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bd6:	f7fa ff9f 	bl	8000b18 <__aeabi_dcmpeq>
 8005bda:	b9c0      	cbnz	r0, 8005c0e <_printf_float+0x41a>
 8005bdc:	4653      	mov	r3, sl
 8005bde:	f108 0201 	add.w	r2, r8, #1
 8005be2:	4631      	mov	r1, r6
 8005be4:	4628      	mov	r0, r5
 8005be6:	47b8      	blx	r7
 8005be8:	3001      	adds	r0, #1
 8005bea:	d10c      	bne.n	8005c06 <_printf_float+0x412>
 8005bec:	e65d      	b.n	80058aa <_printf_float+0xb6>
 8005bee:	2301      	movs	r3, #1
 8005bf0:	465a      	mov	r2, fp
 8005bf2:	4631      	mov	r1, r6
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	47b8      	blx	r7
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	f43f ae56 	beq.w	80058aa <_printf_float+0xb6>
 8005bfe:	f108 0801 	add.w	r8, r8, #1
 8005c02:	45d0      	cmp	r8, sl
 8005c04:	dbf3      	blt.n	8005bee <_printf_float+0x3fa>
 8005c06:	464b      	mov	r3, r9
 8005c08:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c0c:	e6df      	b.n	80059ce <_printf_float+0x1da>
 8005c0e:	f04f 0800 	mov.w	r8, #0
 8005c12:	f104 0b1a 	add.w	fp, r4, #26
 8005c16:	e7f4      	b.n	8005c02 <_printf_float+0x40e>
 8005c18:	2301      	movs	r3, #1
 8005c1a:	4642      	mov	r2, r8
 8005c1c:	e7e1      	b.n	8005be2 <_printf_float+0x3ee>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	464a      	mov	r2, r9
 8005c22:	4631      	mov	r1, r6
 8005c24:	4628      	mov	r0, r5
 8005c26:	47b8      	blx	r7
 8005c28:	3001      	adds	r0, #1
 8005c2a:	f43f ae3e 	beq.w	80058aa <_printf_float+0xb6>
 8005c2e:	f108 0801 	add.w	r8, r8, #1
 8005c32:	68e3      	ldr	r3, [r4, #12]
 8005c34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c36:	1a5b      	subs	r3, r3, r1
 8005c38:	4543      	cmp	r3, r8
 8005c3a:	dcf0      	bgt.n	8005c1e <_printf_float+0x42a>
 8005c3c:	e6fc      	b.n	8005a38 <_printf_float+0x244>
 8005c3e:	f04f 0800 	mov.w	r8, #0
 8005c42:	f104 0919 	add.w	r9, r4, #25
 8005c46:	e7f4      	b.n	8005c32 <_printf_float+0x43e>

08005c48 <_printf_common>:
 8005c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c4c:	4616      	mov	r6, r2
 8005c4e:	4698      	mov	r8, r3
 8005c50:	688a      	ldr	r2, [r1, #8]
 8005c52:	690b      	ldr	r3, [r1, #16]
 8005c54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	bfb8      	it	lt
 8005c5c:	4613      	movlt	r3, r2
 8005c5e:	6033      	str	r3, [r6, #0]
 8005c60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c64:	4607      	mov	r7, r0
 8005c66:	460c      	mov	r4, r1
 8005c68:	b10a      	cbz	r2, 8005c6e <_printf_common+0x26>
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	6033      	str	r3, [r6, #0]
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	0699      	lsls	r1, r3, #26
 8005c72:	bf42      	ittt	mi
 8005c74:	6833      	ldrmi	r3, [r6, #0]
 8005c76:	3302      	addmi	r3, #2
 8005c78:	6033      	strmi	r3, [r6, #0]
 8005c7a:	6825      	ldr	r5, [r4, #0]
 8005c7c:	f015 0506 	ands.w	r5, r5, #6
 8005c80:	d106      	bne.n	8005c90 <_printf_common+0x48>
 8005c82:	f104 0a19 	add.w	sl, r4, #25
 8005c86:	68e3      	ldr	r3, [r4, #12]
 8005c88:	6832      	ldr	r2, [r6, #0]
 8005c8a:	1a9b      	subs	r3, r3, r2
 8005c8c:	42ab      	cmp	r3, r5
 8005c8e:	dc26      	bgt.n	8005cde <_printf_common+0x96>
 8005c90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c94:	6822      	ldr	r2, [r4, #0]
 8005c96:	3b00      	subs	r3, #0
 8005c98:	bf18      	it	ne
 8005c9a:	2301      	movne	r3, #1
 8005c9c:	0692      	lsls	r2, r2, #26
 8005c9e:	d42b      	bmi.n	8005cf8 <_printf_common+0xb0>
 8005ca0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ca4:	4641      	mov	r1, r8
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	47c8      	blx	r9
 8005caa:	3001      	adds	r0, #1
 8005cac:	d01e      	beq.n	8005cec <_printf_common+0xa4>
 8005cae:	6823      	ldr	r3, [r4, #0]
 8005cb0:	6922      	ldr	r2, [r4, #16]
 8005cb2:	f003 0306 	and.w	r3, r3, #6
 8005cb6:	2b04      	cmp	r3, #4
 8005cb8:	bf02      	ittt	eq
 8005cba:	68e5      	ldreq	r5, [r4, #12]
 8005cbc:	6833      	ldreq	r3, [r6, #0]
 8005cbe:	1aed      	subeq	r5, r5, r3
 8005cc0:	68a3      	ldr	r3, [r4, #8]
 8005cc2:	bf0c      	ite	eq
 8005cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cc8:	2500      	movne	r5, #0
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	bfc4      	itt	gt
 8005cce:	1a9b      	subgt	r3, r3, r2
 8005cd0:	18ed      	addgt	r5, r5, r3
 8005cd2:	2600      	movs	r6, #0
 8005cd4:	341a      	adds	r4, #26
 8005cd6:	42b5      	cmp	r5, r6
 8005cd8:	d11a      	bne.n	8005d10 <_printf_common+0xc8>
 8005cda:	2000      	movs	r0, #0
 8005cdc:	e008      	b.n	8005cf0 <_printf_common+0xa8>
 8005cde:	2301      	movs	r3, #1
 8005ce0:	4652      	mov	r2, sl
 8005ce2:	4641      	mov	r1, r8
 8005ce4:	4638      	mov	r0, r7
 8005ce6:	47c8      	blx	r9
 8005ce8:	3001      	adds	r0, #1
 8005cea:	d103      	bne.n	8005cf4 <_printf_common+0xac>
 8005cec:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf4:	3501      	adds	r5, #1
 8005cf6:	e7c6      	b.n	8005c86 <_printf_common+0x3e>
 8005cf8:	18e1      	adds	r1, r4, r3
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	2030      	movs	r0, #48	@ 0x30
 8005cfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d02:	4422      	add	r2, r4
 8005d04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d0c:	3302      	adds	r3, #2
 8005d0e:	e7c7      	b.n	8005ca0 <_printf_common+0x58>
 8005d10:	2301      	movs	r3, #1
 8005d12:	4622      	mov	r2, r4
 8005d14:	4641      	mov	r1, r8
 8005d16:	4638      	mov	r0, r7
 8005d18:	47c8      	blx	r9
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d0e6      	beq.n	8005cec <_printf_common+0xa4>
 8005d1e:	3601      	adds	r6, #1
 8005d20:	e7d9      	b.n	8005cd6 <_printf_common+0x8e>
	...

08005d24 <_printf_i>:
 8005d24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d28:	7e0f      	ldrb	r7, [r1, #24]
 8005d2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d2c:	2f78      	cmp	r7, #120	@ 0x78
 8005d2e:	4691      	mov	r9, r2
 8005d30:	4680      	mov	r8, r0
 8005d32:	460c      	mov	r4, r1
 8005d34:	469a      	mov	sl, r3
 8005d36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d3a:	d807      	bhi.n	8005d4c <_printf_i+0x28>
 8005d3c:	2f62      	cmp	r7, #98	@ 0x62
 8005d3e:	d80a      	bhi.n	8005d56 <_printf_i+0x32>
 8005d40:	2f00      	cmp	r7, #0
 8005d42:	f000 80d2 	beq.w	8005eea <_printf_i+0x1c6>
 8005d46:	2f58      	cmp	r7, #88	@ 0x58
 8005d48:	f000 80b9 	beq.w	8005ebe <_printf_i+0x19a>
 8005d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d54:	e03a      	b.n	8005dcc <_printf_i+0xa8>
 8005d56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d5a:	2b15      	cmp	r3, #21
 8005d5c:	d8f6      	bhi.n	8005d4c <_printf_i+0x28>
 8005d5e:	a101      	add	r1, pc, #4	@ (adr r1, 8005d64 <_printf_i+0x40>)
 8005d60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d64:	08005dbd 	.word	0x08005dbd
 8005d68:	08005dd1 	.word	0x08005dd1
 8005d6c:	08005d4d 	.word	0x08005d4d
 8005d70:	08005d4d 	.word	0x08005d4d
 8005d74:	08005d4d 	.word	0x08005d4d
 8005d78:	08005d4d 	.word	0x08005d4d
 8005d7c:	08005dd1 	.word	0x08005dd1
 8005d80:	08005d4d 	.word	0x08005d4d
 8005d84:	08005d4d 	.word	0x08005d4d
 8005d88:	08005d4d 	.word	0x08005d4d
 8005d8c:	08005d4d 	.word	0x08005d4d
 8005d90:	08005ed1 	.word	0x08005ed1
 8005d94:	08005dfb 	.word	0x08005dfb
 8005d98:	08005e8b 	.word	0x08005e8b
 8005d9c:	08005d4d 	.word	0x08005d4d
 8005da0:	08005d4d 	.word	0x08005d4d
 8005da4:	08005ef3 	.word	0x08005ef3
 8005da8:	08005d4d 	.word	0x08005d4d
 8005dac:	08005dfb 	.word	0x08005dfb
 8005db0:	08005d4d 	.word	0x08005d4d
 8005db4:	08005d4d 	.word	0x08005d4d
 8005db8:	08005e93 	.word	0x08005e93
 8005dbc:	6833      	ldr	r3, [r6, #0]
 8005dbe:	1d1a      	adds	r2, r3, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6032      	str	r2, [r6, #0]
 8005dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005dc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005dcc:	2301      	movs	r3, #1
 8005dce:	e09d      	b.n	8005f0c <_printf_i+0x1e8>
 8005dd0:	6833      	ldr	r3, [r6, #0]
 8005dd2:	6820      	ldr	r0, [r4, #0]
 8005dd4:	1d19      	adds	r1, r3, #4
 8005dd6:	6031      	str	r1, [r6, #0]
 8005dd8:	0606      	lsls	r6, r0, #24
 8005dda:	d501      	bpl.n	8005de0 <_printf_i+0xbc>
 8005ddc:	681d      	ldr	r5, [r3, #0]
 8005dde:	e003      	b.n	8005de8 <_printf_i+0xc4>
 8005de0:	0645      	lsls	r5, r0, #25
 8005de2:	d5fb      	bpl.n	8005ddc <_printf_i+0xb8>
 8005de4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005de8:	2d00      	cmp	r5, #0
 8005dea:	da03      	bge.n	8005df4 <_printf_i+0xd0>
 8005dec:	232d      	movs	r3, #45	@ 0x2d
 8005dee:	426d      	negs	r5, r5
 8005df0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005df4:	4859      	ldr	r0, [pc, #356]	@ (8005f5c <_printf_i+0x238>)
 8005df6:	230a      	movs	r3, #10
 8005df8:	e011      	b.n	8005e1e <_printf_i+0xfa>
 8005dfa:	6821      	ldr	r1, [r4, #0]
 8005dfc:	6833      	ldr	r3, [r6, #0]
 8005dfe:	0608      	lsls	r0, r1, #24
 8005e00:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e04:	d402      	bmi.n	8005e0c <_printf_i+0xe8>
 8005e06:	0649      	lsls	r1, r1, #25
 8005e08:	bf48      	it	mi
 8005e0a:	b2ad      	uxthmi	r5, r5
 8005e0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e0e:	4853      	ldr	r0, [pc, #332]	@ (8005f5c <_printf_i+0x238>)
 8005e10:	6033      	str	r3, [r6, #0]
 8005e12:	bf14      	ite	ne
 8005e14:	230a      	movne	r3, #10
 8005e16:	2308      	moveq	r3, #8
 8005e18:	2100      	movs	r1, #0
 8005e1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e1e:	6866      	ldr	r6, [r4, #4]
 8005e20:	60a6      	str	r6, [r4, #8]
 8005e22:	2e00      	cmp	r6, #0
 8005e24:	bfa2      	ittt	ge
 8005e26:	6821      	ldrge	r1, [r4, #0]
 8005e28:	f021 0104 	bicge.w	r1, r1, #4
 8005e2c:	6021      	strge	r1, [r4, #0]
 8005e2e:	b90d      	cbnz	r5, 8005e34 <_printf_i+0x110>
 8005e30:	2e00      	cmp	r6, #0
 8005e32:	d04b      	beq.n	8005ecc <_printf_i+0x1a8>
 8005e34:	4616      	mov	r6, r2
 8005e36:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e3a:	fb03 5711 	mls	r7, r3, r1, r5
 8005e3e:	5dc7      	ldrb	r7, [r0, r7]
 8005e40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e44:	462f      	mov	r7, r5
 8005e46:	42bb      	cmp	r3, r7
 8005e48:	460d      	mov	r5, r1
 8005e4a:	d9f4      	bls.n	8005e36 <_printf_i+0x112>
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d10b      	bne.n	8005e68 <_printf_i+0x144>
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	07df      	lsls	r7, r3, #31
 8005e54:	d508      	bpl.n	8005e68 <_printf_i+0x144>
 8005e56:	6923      	ldr	r3, [r4, #16]
 8005e58:	6861      	ldr	r1, [r4, #4]
 8005e5a:	4299      	cmp	r1, r3
 8005e5c:	bfde      	ittt	le
 8005e5e:	2330      	movle	r3, #48	@ 0x30
 8005e60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e68:	1b92      	subs	r2, r2, r6
 8005e6a:	6122      	str	r2, [r4, #16]
 8005e6c:	f8cd a000 	str.w	sl, [sp]
 8005e70:	464b      	mov	r3, r9
 8005e72:	aa03      	add	r2, sp, #12
 8005e74:	4621      	mov	r1, r4
 8005e76:	4640      	mov	r0, r8
 8005e78:	f7ff fee6 	bl	8005c48 <_printf_common>
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d14a      	bne.n	8005f16 <_printf_i+0x1f2>
 8005e80:	f04f 30ff 	mov.w	r0, #4294967295
 8005e84:	b004      	add	sp, #16
 8005e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8a:	6823      	ldr	r3, [r4, #0]
 8005e8c:	f043 0320 	orr.w	r3, r3, #32
 8005e90:	6023      	str	r3, [r4, #0]
 8005e92:	4833      	ldr	r0, [pc, #204]	@ (8005f60 <_printf_i+0x23c>)
 8005e94:	2778      	movs	r7, #120	@ 0x78
 8005e96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e9a:	6823      	ldr	r3, [r4, #0]
 8005e9c:	6831      	ldr	r1, [r6, #0]
 8005e9e:	061f      	lsls	r7, r3, #24
 8005ea0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ea4:	d402      	bmi.n	8005eac <_printf_i+0x188>
 8005ea6:	065f      	lsls	r7, r3, #25
 8005ea8:	bf48      	it	mi
 8005eaa:	b2ad      	uxthmi	r5, r5
 8005eac:	6031      	str	r1, [r6, #0]
 8005eae:	07d9      	lsls	r1, r3, #31
 8005eb0:	bf44      	itt	mi
 8005eb2:	f043 0320 	orrmi.w	r3, r3, #32
 8005eb6:	6023      	strmi	r3, [r4, #0]
 8005eb8:	b11d      	cbz	r5, 8005ec2 <_printf_i+0x19e>
 8005eba:	2310      	movs	r3, #16
 8005ebc:	e7ac      	b.n	8005e18 <_printf_i+0xf4>
 8005ebe:	4827      	ldr	r0, [pc, #156]	@ (8005f5c <_printf_i+0x238>)
 8005ec0:	e7e9      	b.n	8005e96 <_printf_i+0x172>
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	f023 0320 	bic.w	r3, r3, #32
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	e7f6      	b.n	8005eba <_printf_i+0x196>
 8005ecc:	4616      	mov	r6, r2
 8005ece:	e7bd      	b.n	8005e4c <_printf_i+0x128>
 8005ed0:	6833      	ldr	r3, [r6, #0]
 8005ed2:	6825      	ldr	r5, [r4, #0]
 8005ed4:	6961      	ldr	r1, [r4, #20]
 8005ed6:	1d18      	adds	r0, r3, #4
 8005ed8:	6030      	str	r0, [r6, #0]
 8005eda:	062e      	lsls	r6, r5, #24
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	d501      	bpl.n	8005ee4 <_printf_i+0x1c0>
 8005ee0:	6019      	str	r1, [r3, #0]
 8005ee2:	e002      	b.n	8005eea <_printf_i+0x1c6>
 8005ee4:	0668      	lsls	r0, r5, #25
 8005ee6:	d5fb      	bpl.n	8005ee0 <_printf_i+0x1bc>
 8005ee8:	8019      	strh	r1, [r3, #0]
 8005eea:	2300      	movs	r3, #0
 8005eec:	6123      	str	r3, [r4, #16]
 8005eee:	4616      	mov	r6, r2
 8005ef0:	e7bc      	b.n	8005e6c <_printf_i+0x148>
 8005ef2:	6833      	ldr	r3, [r6, #0]
 8005ef4:	1d1a      	adds	r2, r3, #4
 8005ef6:	6032      	str	r2, [r6, #0]
 8005ef8:	681e      	ldr	r6, [r3, #0]
 8005efa:	6862      	ldr	r2, [r4, #4]
 8005efc:	2100      	movs	r1, #0
 8005efe:	4630      	mov	r0, r6
 8005f00:	f7fa f98e 	bl	8000220 <memchr>
 8005f04:	b108      	cbz	r0, 8005f0a <_printf_i+0x1e6>
 8005f06:	1b80      	subs	r0, r0, r6
 8005f08:	6060      	str	r0, [r4, #4]
 8005f0a:	6863      	ldr	r3, [r4, #4]
 8005f0c:	6123      	str	r3, [r4, #16]
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f14:	e7aa      	b.n	8005e6c <_printf_i+0x148>
 8005f16:	6923      	ldr	r3, [r4, #16]
 8005f18:	4632      	mov	r2, r6
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	4640      	mov	r0, r8
 8005f1e:	47d0      	blx	sl
 8005f20:	3001      	adds	r0, #1
 8005f22:	d0ad      	beq.n	8005e80 <_printf_i+0x15c>
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	079b      	lsls	r3, r3, #30
 8005f28:	d413      	bmi.n	8005f52 <_printf_i+0x22e>
 8005f2a:	68e0      	ldr	r0, [r4, #12]
 8005f2c:	9b03      	ldr	r3, [sp, #12]
 8005f2e:	4298      	cmp	r0, r3
 8005f30:	bfb8      	it	lt
 8005f32:	4618      	movlt	r0, r3
 8005f34:	e7a6      	b.n	8005e84 <_printf_i+0x160>
 8005f36:	2301      	movs	r3, #1
 8005f38:	4632      	mov	r2, r6
 8005f3a:	4649      	mov	r1, r9
 8005f3c:	4640      	mov	r0, r8
 8005f3e:	47d0      	blx	sl
 8005f40:	3001      	adds	r0, #1
 8005f42:	d09d      	beq.n	8005e80 <_printf_i+0x15c>
 8005f44:	3501      	adds	r5, #1
 8005f46:	68e3      	ldr	r3, [r4, #12]
 8005f48:	9903      	ldr	r1, [sp, #12]
 8005f4a:	1a5b      	subs	r3, r3, r1
 8005f4c:	42ab      	cmp	r3, r5
 8005f4e:	dcf2      	bgt.n	8005f36 <_printf_i+0x212>
 8005f50:	e7eb      	b.n	8005f2a <_printf_i+0x206>
 8005f52:	2500      	movs	r5, #0
 8005f54:	f104 0619 	add.w	r6, r4, #25
 8005f58:	e7f5      	b.n	8005f46 <_printf_i+0x222>
 8005f5a:	bf00      	nop
 8005f5c:	08008452 	.word	0x08008452
 8005f60:	08008463 	.word	0x08008463

08005f64 <std>:
 8005f64:	2300      	movs	r3, #0
 8005f66:	b510      	push	{r4, lr}
 8005f68:	4604      	mov	r4, r0
 8005f6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f72:	6083      	str	r3, [r0, #8]
 8005f74:	8181      	strh	r1, [r0, #12]
 8005f76:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f78:	81c2      	strh	r2, [r0, #14]
 8005f7a:	6183      	str	r3, [r0, #24]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	2208      	movs	r2, #8
 8005f80:	305c      	adds	r0, #92	@ 0x5c
 8005f82:	f000 f906 	bl	8006192 <memset>
 8005f86:	4b0d      	ldr	r3, [pc, #52]	@ (8005fbc <std+0x58>)
 8005f88:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc0 <std+0x5c>)
 8005f8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc4 <std+0x60>)
 8005f90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f92:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc8 <std+0x64>)
 8005f94:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f96:	4b0d      	ldr	r3, [pc, #52]	@ (8005fcc <std+0x68>)
 8005f98:	6224      	str	r4, [r4, #32]
 8005f9a:	429c      	cmp	r4, r3
 8005f9c:	d006      	beq.n	8005fac <std+0x48>
 8005f9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005fa2:	4294      	cmp	r4, r2
 8005fa4:	d002      	beq.n	8005fac <std+0x48>
 8005fa6:	33d0      	adds	r3, #208	@ 0xd0
 8005fa8:	429c      	cmp	r4, r3
 8005faa:	d105      	bne.n	8005fb8 <std+0x54>
 8005fac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb4:	f000 b96a 	b.w	800628c <__retarget_lock_init_recursive>
 8005fb8:	bd10      	pop	{r4, pc}
 8005fba:	bf00      	nop
 8005fbc:	0800610d 	.word	0x0800610d
 8005fc0:	0800612f 	.word	0x0800612f
 8005fc4:	08006167 	.word	0x08006167
 8005fc8:	0800618b 	.word	0x0800618b
 8005fcc:	200008ac 	.word	0x200008ac

08005fd0 <stdio_exit_handler>:
 8005fd0:	4a02      	ldr	r2, [pc, #8]	@ (8005fdc <stdio_exit_handler+0xc>)
 8005fd2:	4903      	ldr	r1, [pc, #12]	@ (8005fe0 <stdio_exit_handler+0x10>)
 8005fd4:	4803      	ldr	r0, [pc, #12]	@ (8005fe4 <stdio_exit_handler+0x14>)
 8005fd6:	f000 b869 	b.w	80060ac <_fwalk_sglue>
 8005fda:	bf00      	nop
 8005fdc:	2000000c 	.word	0x2000000c
 8005fe0:	08007bc1 	.word	0x08007bc1
 8005fe4:	2000001c 	.word	0x2000001c

08005fe8 <cleanup_stdio>:
 8005fe8:	6841      	ldr	r1, [r0, #4]
 8005fea:	4b0c      	ldr	r3, [pc, #48]	@ (800601c <cleanup_stdio+0x34>)
 8005fec:	4299      	cmp	r1, r3
 8005fee:	b510      	push	{r4, lr}
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	d001      	beq.n	8005ff8 <cleanup_stdio+0x10>
 8005ff4:	f001 fde4 	bl	8007bc0 <_fflush_r>
 8005ff8:	68a1      	ldr	r1, [r4, #8]
 8005ffa:	4b09      	ldr	r3, [pc, #36]	@ (8006020 <cleanup_stdio+0x38>)
 8005ffc:	4299      	cmp	r1, r3
 8005ffe:	d002      	beq.n	8006006 <cleanup_stdio+0x1e>
 8006000:	4620      	mov	r0, r4
 8006002:	f001 fddd 	bl	8007bc0 <_fflush_r>
 8006006:	68e1      	ldr	r1, [r4, #12]
 8006008:	4b06      	ldr	r3, [pc, #24]	@ (8006024 <cleanup_stdio+0x3c>)
 800600a:	4299      	cmp	r1, r3
 800600c:	d004      	beq.n	8006018 <cleanup_stdio+0x30>
 800600e:	4620      	mov	r0, r4
 8006010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006014:	f001 bdd4 	b.w	8007bc0 <_fflush_r>
 8006018:	bd10      	pop	{r4, pc}
 800601a:	bf00      	nop
 800601c:	200008ac 	.word	0x200008ac
 8006020:	20000914 	.word	0x20000914
 8006024:	2000097c 	.word	0x2000097c

08006028 <global_stdio_init.part.0>:
 8006028:	b510      	push	{r4, lr}
 800602a:	4b0b      	ldr	r3, [pc, #44]	@ (8006058 <global_stdio_init.part.0+0x30>)
 800602c:	4c0b      	ldr	r4, [pc, #44]	@ (800605c <global_stdio_init.part.0+0x34>)
 800602e:	4a0c      	ldr	r2, [pc, #48]	@ (8006060 <global_stdio_init.part.0+0x38>)
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	4620      	mov	r0, r4
 8006034:	2200      	movs	r2, #0
 8006036:	2104      	movs	r1, #4
 8006038:	f7ff ff94 	bl	8005f64 <std>
 800603c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006040:	2201      	movs	r2, #1
 8006042:	2109      	movs	r1, #9
 8006044:	f7ff ff8e 	bl	8005f64 <std>
 8006048:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800604c:	2202      	movs	r2, #2
 800604e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006052:	2112      	movs	r1, #18
 8006054:	f7ff bf86 	b.w	8005f64 <std>
 8006058:	200009e4 	.word	0x200009e4
 800605c:	200008ac 	.word	0x200008ac
 8006060:	08005fd1 	.word	0x08005fd1

08006064 <__sfp_lock_acquire>:
 8006064:	4801      	ldr	r0, [pc, #4]	@ (800606c <__sfp_lock_acquire+0x8>)
 8006066:	f000 b912 	b.w	800628e <__retarget_lock_acquire_recursive>
 800606a:	bf00      	nop
 800606c:	200009ed 	.word	0x200009ed

08006070 <__sfp_lock_release>:
 8006070:	4801      	ldr	r0, [pc, #4]	@ (8006078 <__sfp_lock_release+0x8>)
 8006072:	f000 b90d 	b.w	8006290 <__retarget_lock_release_recursive>
 8006076:	bf00      	nop
 8006078:	200009ed 	.word	0x200009ed

0800607c <__sinit>:
 800607c:	b510      	push	{r4, lr}
 800607e:	4604      	mov	r4, r0
 8006080:	f7ff fff0 	bl	8006064 <__sfp_lock_acquire>
 8006084:	6a23      	ldr	r3, [r4, #32]
 8006086:	b11b      	cbz	r3, 8006090 <__sinit+0x14>
 8006088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800608c:	f7ff bff0 	b.w	8006070 <__sfp_lock_release>
 8006090:	4b04      	ldr	r3, [pc, #16]	@ (80060a4 <__sinit+0x28>)
 8006092:	6223      	str	r3, [r4, #32]
 8006094:	4b04      	ldr	r3, [pc, #16]	@ (80060a8 <__sinit+0x2c>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f5      	bne.n	8006088 <__sinit+0xc>
 800609c:	f7ff ffc4 	bl	8006028 <global_stdio_init.part.0>
 80060a0:	e7f2      	b.n	8006088 <__sinit+0xc>
 80060a2:	bf00      	nop
 80060a4:	08005fe9 	.word	0x08005fe9
 80060a8:	200009e4 	.word	0x200009e4

080060ac <_fwalk_sglue>:
 80060ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b0:	4607      	mov	r7, r0
 80060b2:	4688      	mov	r8, r1
 80060b4:	4614      	mov	r4, r2
 80060b6:	2600      	movs	r6, #0
 80060b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060bc:	f1b9 0901 	subs.w	r9, r9, #1
 80060c0:	d505      	bpl.n	80060ce <_fwalk_sglue+0x22>
 80060c2:	6824      	ldr	r4, [r4, #0]
 80060c4:	2c00      	cmp	r4, #0
 80060c6:	d1f7      	bne.n	80060b8 <_fwalk_sglue+0xc>
 80060c8:	4630      	mov	r0, r6
 80060ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ce:	89ab      	ldrh	r3, [r5, #12]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d907      	bls.n	80060e4 <_fwalk_sglue+0x38>
 80060d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060d8:	3301      	adds	r3, #1
 80060da:	d003      	beq.n	80060e4 <_fwalk_sglue+0x38>
 80060dc:	4629      	mov	r1, r5
 80060de:	4638      	mov	r0, r7
 80060e0:	47c0      	blx	r8
 80060e2:	4306      	orrs	r6, r0
 80060e4:	3568      	adds	r5, #104	@ 0x68
 80060e6:	e7e9      	b.n	80060bc <_fwalk_sglue+0x10>

080060e8 <iprintf>:
 80060e8:	b40f      	push	{r0, r1, r2, r3}
 80060ea:	b507      	push	{r0, r1, r2, lr}
 80060ec:	4906      	ldr	r1, [pc, #24]	@ (8006108 <iprintf+0x20>)
 80060ee:	ab04      	add	r3, sp, #16
 80060f0:	6808      	ldr	r0, [r1, #0]
 80060f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80060f6:	6881      	ldr	r1, [r0, #8]
 80060f8:	9301      	str	r3, [sp, #4]
 80060fa:	f001 fbc5 	bl	8007888 <_vfiprintf_r>
 80060fe:	b003      	add	sp, #12
 8006100:	f85d eb04 	ldr.w	lr, [sp], #4
 8006104:	b004      	add	sp, #16
 8006106:	4770      	bx	lr
 8006108:	20000018 	.word	0x20000018

0800610c <__sread>:
 800610c:	b510      	push	{r4, lr}
 800610e:	460c      	mov	r4, r1
 8006110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006114:	f000 f86c 	bl	80061f0 <_read_r>
 8006118:	2800      	cmp	r0, #0
 800611a:	bfab      	itete	ge
 800611c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800611e:	89a3      	ldrhlt	r3, [r4, #12]
 8006120:	181b      	addge	r3, r3, r0
 8006122:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006126:	bfac      	ite	ge
 8006128:	6563      	strge	r3, [r4, #84]	@ 0x54
 800612a:	81a3      	strhlt	r3, [r4, #12]
 800612c:	bd10      	pop	{r4, pc}

0800612e <__swrite>:
 800612e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006132:	461f      	mov	r7, r3
 8006134:	898b      	ldrh	r3, [r1, #12]
 8006136:	05db      	lsls	r3, r3, #23
 8006138:	4605      	mov	r5, r0
 800613a:	460c      	mov	r4, r1
 800613c:	4616      	mov	r6, r2
 800613e:	d505      	bpl.n	800614c <__swrite+0x1e>
 8006140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006144:	2302      	movs	r3, #2
 8006146:	2200      	movs	r2, #0
 8006148:	f000 f840 	bl	80061cc <_lseek_r>
 800614c:	89a3      	ldrh	r3, [r4, #12]
 800614e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006152:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006156:	81a3      	strh	r3, [r4, #12]
 8006158:	4632      	mov	r2, r6
 800615a:	463b      	mov	r3, r7
 800615c:	4628      	mov	r0, r5
 800615e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006162:	f000 b857 	b.w	8006214 <_write_r>

08006166 <__sseek>:
 8006166:	b510      	push	{r4, lr}
 8006168:	460c      	mov	r4, r1
 800616a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800616e:	f000 f82d 	bl	80061cc <_lseek_r>
 8006172:	1c43      	adds	r3, r0, #1
 8006174:	89a3      	ldrh	r3, [r4, #12]
 8006176:	bf15      	itete	ne
 8006178:	6560      	strne	r0, [r4, #84]	@ 0x54
 800617a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800617e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006182:	81a3      	strheq	r3, [r4, #12]
 8006184:	bf18      	it	ne
 8006186:	81a3      	strhne	r3, [r4, #12]
 8006188:	bd10      	pop	{r4, pc}

0800618a <__sclose>:
 800618a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800618e:	f000 b80d 	b.w	80061ac <_close_r>

08006192 <memset>:
 8006192:	4402      	add	r2, r0
 8006194:	4603      	mov	r3, r0
 8006196:	4293      	cmp	r3, r2
 8006198:	d100      	bne.n	800619c <memset+0xa>
 800619a:	4770      	bx	lr
 800619c:	f803 1b01 	strb.w	r1, [r3], #1
 80061a0:	e7f9      	b.n	8006196 <memset+0x4>
	...

080061a4 <_localeconv_r>:
 80061a4:	4800      	ldr	r0, [pc, #0]	@ (80061a8 <_localeconv_r+0x4>)
 80061a6:	4770      	bx	lr
 80061a8:	20000158 	.word	0x20000158

080061ac <_close_r>:
 80061ac:	b538      	push	{r3, r4, r5, lr}
 80061ae:	4d06      	ldr	r5, [pc, #24]	@ (80061c8 <_close_r+0x1c>)
 80061b0:	2300      	movs	r3, #0
 80061b2:	4604      	mov	r4, r0
 80061b4:	4608      	mov	r0, r1
 80061b6:	602b      	str	r3, [r5, #0]
 80061b8:	f7fb fd55 	bl	8001c66 <_close>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <_close_r+0x1a>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	b103      	cbz	r3, 80061c6 <_close_r+0x1a>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	200009e8 	.word	0x200009e8

080061cc <_lseek_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d07      	ldr	r5, [pc, #28]	@ (80061ec <_lseek_r+0x20>)
 80061d0:	4604      	mov	r4, r0
 80061d2:	4608      	mov	r0, r1
 80061d4:	4611      	mov	r1, r2
 80061d6:	2200      	movs	r2, #0
 80061d8:	602a      	str	r2, [r5, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	f7fb fd6a 	bl	8001cb4 <_lseek>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <_lseek_r+0x1e>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b103      	cbz	r3, 80061ea <_lseek_r+0x1e>
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	200009e8 	.word	0x200009e8

080061f0 <_read_r>:
 80061f0:	b538      	push	{r3, r4, r5, lr}
 80061f2:	4d07      	ldr	r5, [pc, #28]	@ (8006210 <_read_r+0x20>)
 80061f4:	4604      	mov	r4, r0
 80061f6:	4608      	mov	r0, r1
 80061f8:	4611      	mov	r1, r2
 80061fa:	2200      	movs	r2, #0
 80061fc:	602a      	str	r2, [r5, #0]
 80061fe:	461a      	mov	r2, r3
 8006200:	f7fb fcf8 	bl	8001bf4 <_read>
 8006204:	1c43      	adds	r3, r0, #1
 8006206:	d102      	bne.n	800620e <_read_r+0x1e>
 8006208:	682b      	ldr	r3, [r5, #0]
 800620a:	b103      	cbz	r3, 800620e <_read_r+0x1e>
 800620c:	6023      	str	r3, [r4, #0]
 800620e:	bd38      	pop	{r3, r4, r5, pc}
 8006210:	200009e8 	.word	0x200009e8

08006214 <_write_r>:
 8006214:	b538      	push	{r3, r4, r5, lr}
 8006216:	4d07      	ldr	r5, [pc, #28]	@ (8006234 <_write_r+0x20>)
 8006218:	4604      	mov	r4, r0
 800621a:	4608      	mov	r0, r1
 800621c:	4611      	mov	r1, r2
 800621e:	2200      	movs	r2, #0
 8006220:	602a      	str	r2, [r5, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	f7fb fd03 	bl	8001c2e <_write>
 8006228:	1c43      	adds	r3, r0, #1
 800622a:	d102      	bne.n	8006232 <_write_r+0x1e>
 800622c:	682b      	ldr	r3, [r5, #0]
 800622e:	b103      	cbz	r3, 8006232 <_write_r+0x1e>
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	bd38      	pop	{r3, r4, r5, pc}
 8006234:	200009e8 	.word	0x200009e8

08006238 <__errno>:
 8006238:	4b01      	ldr	r3, [pc, #4]	@ (8006240 <__errno+0x8>)
 800623a:	6818      	ldr	r0, [r3, #0]
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	20000018 	.word	0x20000018

08006244 <__libc_init_array>:
 8006244:	b570      	push	{r4, r5, r6, lr}
 8006246:	4d0d      	ldr	r5, [pc, #52]	@ (800627c <__libc_init_array+0x38>)
 8006248:	4c0d      	ldr	r4, [pc, #52]	@ (8006280 <__libc_init_array+0x3c>)
 800624a:	1b64      	subs	r4, r4, r5
 800624c:	10a4      	asrs	r4, r4, #2
 800624e:	2600      	movs	r6, #0
 8006250:	42a6      	cmp	r6, r4
 8006252:	d109      	bne.n	8006268 <__libc_init_array+0x24>
 8006254:	4d0b      	ldr	r5, [pc, #44]	@ (8006284 <__libc_init_array+0x40>)
 8006256:	4c0c      	ldr	r4, [pc, #48]	@ (8006288 <__libc_init_array+0x44>)
 8006258:	f001 fec0 	bl	8007fdc <_init>
 800625c:	1b64      	subs	r4, r4, r5
 800625e:	10a4      	asrs	r4, r4, #2
 8006260:	2600      	movs	r6, #0
 8006262:	42a6      	cmp	r6, r4
 8006264:	d105      	bne.n	8006272 <__libc_init_array+0x2e>
 8006266:	bd70      	pop	{r4, r5, r6, pc}
 8006268:	f855 3b04 	ldr.w	r3, [r5], #4
 800626c:	4798      	blx	r3
 800626e:	3601      	adds	r6, #1
 8006270:	e7ee      	b.n	8006250 <__libc_init_array+0xc>
 8006272:	f855 3b04 	ldr.w	r3, [r5], #4
 8006276:	4798      	blx	r3
 8006278:	3601      	adds	r6, #1
 800627a:	e7f2      	b.n	8006262 <__libc_init_array+0x1e>
 800627c:	080087b8 	.word	0x080087b8
 8006280:	080087b8 	.word	0x080087b8
 8006284:	080087b8 	.word	0x080087b8
 8006288:	080087bc 	.word	0x080087bc

0800628c <__retarget_lock_init_recursive>:
 800628c:	4770      	bx	lr

0800628e <__retarget_lock_acquire_recursive>:
 800628e:	4770      	bx	lr

08006290 <__retarget_lock_release_recursive>:
 8006290:	4770      	bx	lr

08006292 <quorem>:
 8006292:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006296:	6903      	ldr	r3, [r0, #16]
 8006298:	690c      	ldr	r4, [r1, #16]
 800629a:	42a3      	cmp	r3, r4
 800629c:	4607      	mov	r7, r0
 800629e:	db7e      	blt.n	800639e <quorem+0x10c>
 80062a0:	3c01      	subs	r4, #1
 80062a2:	f101 0814 	add.w	r8, r1, #20
 80062a6:	00a3      	lsls	r3, r4, #2
 80062a8:	f100 0514 	add.w	r5, r0, #20
 80062ac:	9300      	str	r3, [sp, #0]
 80062ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062bc:	3301      	adds	r3, #1
 80062be:	429a      	cmp	r2, r3
 80062c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80062c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80062c8:	d32e      	bcc.n	8006328 <quorem+0x96>
 80062ca:	f04f 0a00 	mov.w	sl, #0
 80062ce:	46c4      	mov	ip, r8
 80062d0:	46ae      	mov	lr, r5
 80062d2:	46d3      	mov	fp, sl
 80062d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80062d8:	b298      	uxth	r0, r3
 80062da:	fb06 a000 	mla	r0, r6, r0, sl
 80062de:	0c02      	lsrs	r2, r0, #16
 80062e0:	0c1b      	lsrs	r3, r3, #16
 80062e2:	fb06 2303 	mla	r3, r6, r3, r2
 80062e6:	f8de 2000 	ldr.w	r2, [lr]
 80062ea:	b280      	uxth	r0, r0
 80062ec:	b292      	uxth	r2, r2
 80062ee:	1a12      	subs	r2, r2, r0
 80062f0:	445a      	add	r2, fp
 80062f2:	f8de 0000 	ldr.w	r0, [lr]
 80062f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006300:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006304:	b292      	uxth	r2, r2
 8006306:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800630a:	45e1      	cmp	r9, ip
 800630c:	f84e 2b04 	str.w	r2, [lr], #4
 8006310:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006314:	d2de      	bcs.n	80062d4 <quorem+0x42>
 8006316:	9b00      	ldr	r3, [sp, #0]
 8006318:	58eb      	ldr	r3, [r5, r3]
 800631a:	b92b      	cbnz	r3, 8006328 <quorem+0x96>
 800631c:	9b01      	ldr	r3, [sp, #4]
 800631e:	3b04      	subs	r3, #4
 8006320:	429d      	cmp	r5, r3
 8006322:	461a      	mov	r2, r3
 8006324:	d32f      	bcc.n	8006386 <quorem+0xf4>
 8006326:	613c      	str	r4, [r7, #16]
 8006328:	4638      	mov	r0, r7
 800632a:	f001 f97b 	bl	8007624 <__mcmp>
 800632e:	2800      	cmp	r0, #0
 8006330:	db25      	blt.n	800637e <quorem+0xec>
 8006332:	4629      	mov	r1, r5
 8006334:	2000      	movs	r0, #0
 8006336:	f858 2b04 	ldr.w	r2, [r8], #4
 800633a:	f8d1 c000 	ldr.w	ip, [r1]
 800633e:	fa1f fe82 	uxth.w	lr, r2
 8006342:	fa1f f38c 	uxth.w	r3, ip
 8006346:	eba3 030e 	sub.w	r3, r3, lr
 800634a:	4403      	add	r3, r0
 800634c:	0c12      	lsrs	r2, r2, #16
 800634e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006352:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006356:	b29b      	uxth	r3, r3
 8006358:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800635c:	45c1      	cmp	r9, r8
 800635e:	f841 3b04 	str.w	r3, [r1], #4
 8006362:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006366:	d2e6      	bcs.n	8006336 <quorem+0xa4>
 8006368:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800636c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006370:	b922      	cbnz	r2, 800637c <quorem+0xea>
 8006372:	3b04      	subs	r3, #4
 8006374:	429d      	cmp	r5, r3
 8006376:	461a      	mov	r2, r3
 8006378:	d30b      	bcc.n	8006392 <quorem+0x100>
 800637a:	613c      	str	r4, [r7, #16]
 800637c:	3601      	adds	r6, #1
 800637e:	4630      	mov	r0, r6
 8006380:	b003      	add	sp, #12
 8006382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	3b04      	subs	r3, #4
 800638a:	2a00      	cmp	r2, #0
 800638c:	d1cb      	bne.n	8006326 <quorem+0x94>
 800638e:	3c01      	subs	r4, #1
 8006390:	e7c6      	b.n	8006320 <quorem+0x8e>
 8006392:	6812      	ldr	r2, [r2, #0]
 8006394:	3b04      	subs	r3, #4
 8006396:	2a00      	cmp	r2, #0
 8006398:	d1ef      	bne.n	800637a <quorem+0xe8>
 800639a:	3c01      	subs	r4, #1
 800639c:	e7ea      	b.n	8006374 <quorem+0xe2>
 800639e:	2000      	movs	r0, #0
 80063a0:	e7ee      	b.n	8006380 <quorem+0xee>
 80063a2:	0000      	movs	r0, r0
 80063a4:	0000      	movs	r0, r0
	...

080063a8 <_dtoa_r>:
 80063a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ac:	69c7      	ldr	r7, [r0, #28]
 80063ae:	b099      	sub	sp, #100	@ 0x64
 80063b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80063b4:	ec55 4b10 	vmov	r4, r5, d0
 80063b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80063ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80063bc:	4683      	mov	fp, r0
 80063be:	920e      	str	r2, [sp, #56]	@ 0x38
 80063c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80063c2:	b97f      	cbnz	r7, 80063e4 <_dtoa_r+0x3c>
 80063c4:	2010      	movs	r0, #16
 80063c6:	f000 fdfd 	bl	8006fc4 <malloc>
 80063ca:	4602      	mov	r2, r0
 80063cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80063d0:	b920      	cbnz	r0, 80063dc <_dtoa_r+0x34>
 80063d2:	4ba7      	ldr	r3, [pc, #668]	@ (8006670 <_dtoa_r+0x2c8>)
 80063d4:	21ef      	movs	r1, #239	@ 0xef
 80063d6:	48a7      	ldr	r0, [pc, #668]	@ (8006674 <_dtoa_r+0x2cc>)
 80063d8:	f001 fccc 	bl	8007d74 <__assert_func>
 80063dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80063e0:	6007      	str	r7, [r0, #0]
 80063e2:	60c7      	str	r7, [r0, #12]
 80063e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80063e8:	6819      	ldr	r1, [r3, #0]
 80063ea:	b159      	cbz	r1, 8006404 <_dtoa_r+0x5c>
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	604a      	str	r2, [r1, #4]
 80063f0:	2301      	movs	r3, #1
 80063f2:	4093      	lsls	r3, r2
 80063f4:	608b      	str	r3, [r1, #8]
 80063f6:	4658      	mov	r0, fp
 80063f8:	f000 feda 	bl	80071b0 <_Bfree>
 80063fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	1e2b      	subs	r3, r5, #0
 8006406:	bfb9      	ittee	lt
 8006408:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800640c:	9303      	strlt	r3, [sp, #12]
 800640e:	2300      	movge	r3, #0
 8006410:	6033      	strge	r3, [r6, #0]
 8006412:	9f03      	ldr	r7, [sp, #12]
 8006414:	4b98      	ldr	r3, [pc, #608]	@ (8006678 <_dtoa_r+0x2d0>)
 8006416:	bfbc      	itt	lt
 8006418:	2201      	movlt	r2, #1
 800641a:	6032      	strlt	r2, [r6, #0]
 800641c:	43bb      	bics	r3, r7
 800641e:	d112      	bne.n	8006446 <_dtoa_r+0x9e>
 8006420:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006422:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800642c:	4323      	orrs	r3, r4
 800642e:	f000 854d 	beq.w	8006ecc <_dtoa_r+0xb24>
 8006432:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006434:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800668c <_dtoa_r+0x2e4>
 8006438:	2b00      	cmp	r3, #0
 800643a:	f000 854f 	beq.w	8006edc <_dtoa_r+0xb34>
 800643e:	f10a 0303 	add.w	r3, sl, #3
 8006442:	f000 bd49 	b.w	8006ed8 <_dtoa_r+0xb30>
 8006446:	ed9d 7b02 	vldr	d7, [sp, #8]
 800644a:	2200      	movs	r2, #0
 800644c:	ec51 0b17 	vmov	r0, r1, d7
 8006450:	2300      	movs	r3, #0
 8006452:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006456:	f7fa fb5f 	bl	8000b18 <__aeabi_dcmpeq>
 800645a:	4680      	mov	r8, r0
 800645c:	b158      	cbz	r0, 8006476 <_dtoa_r+0xce>
 800645e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006460:	2301      	movs	r3, #1
 8006462:	6013      	str	r3, [r2, #0]
 8006464:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006466:	b113      	cbz	r3, 800646e <_dtoa_r+0xc6>
 8006468:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800646a:	4b84      	ldr	r3, [pc, #528]	@ (800667c <_dtoa_r+0x2d4>)
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006690 <_dtoa_r+0x2e8>
 8006472:	f000 bd33 	b.w	8006edc <_dtoa_r+0xb34>
 8006476:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800647a:	aa16      	add	r2, sp, #88	@ 0x58
 800647c:	a917      	add	r1, sp, #92	@ 0x5c
 800647e:	4658      	mov	r0, fp
 8006480:	f001 f980 	bl	8007784 <__d2b>
 8006484:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006488:	4681      	mov	r9, r0
 800648a:	2e00      	cmp	r6, #0
 800648c:	d077      	beq.n	800657e <_dtoa_r+0x1d6>
 800648e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006490:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006498:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800649c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80064a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80064a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80064a8:	4619      	mov	r1, r3
 80064aa:	2200      	movs	r2, #0
 80064ac:	4b74      	ldr	r3, [pc, #464]	@ (8006680 <_dtoa_r+0x2d8>)
 80064ae:	f7f9 ff13 	bl	80002d8 <__aeabi_dsub>
 80064b2:	a369      	add	r3, pc, #420	@ (adr r3, 8006658 <_dtoa_r+0x2b0>)
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f7fa f8c6 	bl	8000648 <__aeabi_dmul>
 80064bc:	a368      	add	r3, pc, #416	@ (adr r3, 8006660 <_dtoa_r+0x2b8>)
 80064be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c2:	f7f9 ff0b 	bl	80002dc <__adddf3>
 80064c6:	4604      	mov	r4, r0
 80064c8:	4630      	mov	r0, r6
 80064ca:	460d      	mov	r5, r1
 80064cc:	f7fa f852 	bl	8000574 <__aeabi_i2d>
 80064d0:	a365      	add	r3, pc, #404	@ (adr r3, 8006668 <_dtoa_r+0x2c0>)
 80064d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d6:	f7fa f8b7 	bl	8000648 <__aeabi_dmul>
 80064da:	4602      	mov	r2, r0
 80064dc:	460b      	mov	r3, r1
 80064de:	4620      	mov	r0, r4
 80064e0:	4629      	mov	r1, r5
 80064e2:	f7f9 fefb 	bl	80002dc <__adddf3>
 80064e6:	4604      	mov	r4, r0
 80064e8:	460d      	mov	r5, r1
 80064ea:	f7fa fb5d 	bl	8000ba8 <__aeabi_d2iz>
 80064ee:	2200      	movs	r2, #0
 80064f0:	4607      	mov	r7, r0
 80064f2:	2300      	movs	r3, #0
 80064f4:	4620      	mov	r0, r4
 80064f6:	4629      	mov	r1, r5
 80064f8:	f7fa fb18 	bl	8000b2c <__aeabi_dcmplt>
 80064fc:	b140      	cbz	r0, 8006510 <_dtoa_r+0x168>
 80064fe:	4638      	mov	r0, r7
 8006500:	f7fa f838 	bl	8000574 <__aeabi_i2d>
 8006504:	4622      	mov	r2, r4
 8006506:	462b      	mov	r3, r5
 8006508:	f7fa fb06 	bl	8000b18 <__aeabi_dcmpeq>
 800650c:	b900      	cbnz	r0, 8006510 <_dtoa_r+0x168>
 800650e:	3f01      	subs	r7, #1
 8006510:	2f16      	cmp	r7, #22
 8006512:	d851      	bhi.n	80065b8 <_dtoa_r+0x210>
 8006514:	4b5b      	ldr	r3, [pc, #364]	@ (8006684 <_dtoa_r+0x2dc>)
 8006516:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006522:	f7fa fb03 	bl	8000b2c <__aeabi_dcmplt>
 8006526:	2800      	cmp	r0, #0
 8006528:	d048      	beq.n	80065bc <_dtoa_r+0x214>
 800652a:	3f01      	subs	r7, #1
 800652c:	2300      	movs	r3, #0
 800652e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006530:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006532:	1b9b      	subs	r3, r3, r6
 8006534:	1e5a      	subs	r2, r3, #1
 8006536:	bf44      	itt	mi
 8006538:	f1c3 0801 	rsbmi	r8, r3, #1
 800653c:	2300      	movmi	r3, #0
 800653e:	9208      	str	r2, [sp, #32]
 8006540:	bf54      	ite	pl
 8006542:	f04f 0800 	movpl.w	r8, #0
 8006546:	9308      	strmi	r3, [sp, #32]
 8006548:	2f00      	cmp	r7, #0
 800654a:	db39      	blt.n	80065c0 <_dtoa_r+0x218>
 800654c:	9b08      	ldr	r3, [sp, #32]
 800654e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006550:	443b      	add	r3, r7
 8006552:	9308      	str	r3, [sp, #32]
 8006554:	2300      	movs	r3, #0
 8006556:	930a      	str	r3, [sp, #40]	@ 0x28
 8006558:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800655a:	2b09      	cmp	r3, #9
 800655c:	d864      	bhi.n	8006628 <_dtoa_r+0x280>
 800655e:	2b05      	cmp	r3, #5
 8006560:	bfc4      	itt	gt
 8006562:	3b04      	subgt	r3, #4
 8006564:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006568:	f1a3 0302 	sub.w	r3, r3, #2
 800656c:	bfcc      	ite	gt
 800656e:	2400      	movgt	r4, #0
 8006570:	2401      	movle	r4, #1
 8006572:	2b03      	cmp	r3, #3
 8006574:	d863      	bhi.n	800663e <_dtoa_r+0x296>
 8006576:	e8df f003 	tbb	[pc, r3]
 800657a:	372a      	.short	0x372a
 800657c:	5535      	.short	0x5535
 800657e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006582:	441e      	add	r6, r3
 8006584:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006588:	2b20      	cmp	r3, #32
 800658a:	bfc1      	itttt	gt
 800658c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006590:	409f      	lslgt	r7, r3
 8006592:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006596:	fa24 f303 	lsrgt.w	r3, r4, r3
 800659a:	bfd6      	itet	le
 800659c:	f1c3 0320 	rsble	r3, r3, #32
 80065a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80065a4:	fa04 f003 	lslle.w	r0, r4, r3
 80065a8:	f7f9 ffd4 	bl	8000554 <__aeabi_ui2d>
 80065ac:	2201      	movs	r2, #1
 80065ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80065b2:	3e01      	subs	r6, #1
 80065b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80065b6:	e777      	b.n	80064a8 <_dtoa_r+0x100>
 80065b8:	2301      	movs	r3, #1
 80065ba:	e7b8      	b.n	800652e <_dtoa_r+0x186>
 80065bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80065be:	e7b7      	b.n	8006530 <_dtoa_r+0x188>
 80065c0:	427b      	negs	r3, r7
 80065c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80065c4:	2300      	movs	r3, #0
 80065c6:	eba8 0807 	sub.w	r8, r8, r7
 80065ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80065cc:	e7c4      	b.n	8006558 <_dtoa_r+0x1b0>
 80065ce:	2300      	movs	r3, #0
 80065d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dc35      	bgt.n	8006644 <_dtoa_r+0x29c>
 80065d8:	2301      	movs	r3, #1
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	9307      	str	r3, [sp, #28]
 80065de:	461a      	mov	r2, r3
 80065e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80065e2:	e00b      	b.n	80065fc <_dtoa_r+0x254>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e7f3      	b.n	80065d0 <_dtoa_r+0x228>
 80065e8:	2300      	movs	r3, #0
 80065ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065ee:	18fb      	adds	r3, r7, r3
 80065f0:	9300      	str	r3, [sp, #0]
 80065f2:	3301      	adds	r3, #1
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	9307      	str	r3, [sp, #28]
 80065f8:	bfb8      	it	lt
 80065fa:	2301      	movlt	r3, #1
 80065fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006600:	2100      	movs	r1, #0
 8006602:	2204      	movs	r2, #4
 8006604:	f102 0514 	add.w	r5, r2, #20
 8006608:	429d      	cmp	r5, r3
 800660a:	d91f      	bls.n	800664c <_dtoa_r+0x2a4>
 800660c:	6041      	str	r1, [r0, #4]
 800660e:	4658      	mov	r0, fp
 8006610:	f000 fd8e 	bl	8007130 <_Balloc>
 8006614:	4682      	mov	sl, r0
 8006616:	2800      	cmp	r0, #0
 8006618:	d13c      	bne.n	8006694 <_dtoa_r+0x2ec>
 800661a:	4b1b      	ldr	r3, [pc, #108]	@ (8006688 <_dtoa_r+0x2e0>)
 800661c:	4602      	mov	r2, r0
 800661e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006622:	e6d8      	b.n	80063d6 <_dtoa_r+0x2e>
 8006624:	2301      	movs	r3, #1
 8006626:	e7e0      	b.n	80065ea <_dtoa_r+0x242>
 8006628:	2401      	movs	r4, #1
 800662a:	2300      	movs	r3, #0
 800662c:	9309      	str	r3, [sp, #36]	@ 0x24
 800662e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006630:	f04f 33ff 	mov.w	r3, #4294967295
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	9307      	str	r3, [sp, #28]
 8006638:	2200      	movs	r2, #0
 800663a:	2312      	movs	r3, #18
 800663c:	e7d0      	b.n	80065e0 <_dtoa_r+0x238>
 800663e:	2301      	movs	r3, #1
 8006640:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006642:	e7f5      	b.n	8006630 <_dtoa_r+0x288>
 8006644:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	9307      	str	r3, [sp, #28]
 800664a:	e7d7      	b.n	80065fc <_dtoa_r+0x254>
 800664c:	3101      	adds	r1, #1
 800664e:	0052      	lsls	r2, r2, #1
 8006650:	e7d8      	b.n	8006604 <_dtoa_r+0x25c>
 8006652:	bf00      	nop
 8006654:	f3af 8000 	nop.w
 8006658:	636f4361 	.word	0x636f4361
 800665c:	3fd287a7 	.word	0x3fd287a7
 8006660:	8b60c8b3 	.word	0x8b60c8b3
 8006664:	3fc68a28 	.word	0x3fc68a28
 8006668:	509f79fb 	.word	0x509f79fb
 800666c:	3fd34413 	.word	0x3fd34413
 8006670:	08008481 	.word	0x08008481
 8006674:	08008498 	.word	0x08008498
 8006678:	7ff00000 	.word	0x7ff00000
 800667c:	08008451 	.word	0x08008451
 8006680:	3ff80000 	.word	0x3ff80000
 8006684:	08008590 	.word	0x08008590
 8006688:	080084f0 	.word	0x080084f0
 800668c:	0800847d 	.word	0x0800847d
 8006690:	08008450 	.word	0x08008450
 8006694:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006698:	6018      	str	r0, [r3, #0]
 800669a:	9b07      	ldr	r3, [sp, #28]
 800669c:	2b0e      	cmp	r3, #14
 800669e:	f200 80a4 	bhi.w	80067ea <_dtoa_r+0x442>
 80066a2:	2c00      	cmp	r4, #0
 80066a4:	f000 80a1 	beq.w	80067ea <_dtoa_r+0x442>
 80066a8:	2f00      	cmp	r7, #0
 80066aa:	dd33      	ble.n	8006714 <_dtoa_r+0x36c>
 80066ac:	4bad      	ldr	r3, [pc, #692]	@ (8006964 <_dtoa_r+0x5bc>)
 80066ae:	f007 020f 	and.w	r2, r7, #15
 80066b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066b6:	ed93 7b00 	vldr	d7, [r3]
 80066ba:	05f8      	lsls	r0, r7, #23
 80066bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80066c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80066c4:	d516      	bpl.n	80066f4 <_dtoa_r+0x34c>
 80066c6:	4ba8      	ldr	r3, [pc, #672]	@ (8006968 <_dtoa_r+0x5c0>)
 80066c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80066d0:	f7fa f8e4 	bl	800089c <__aeabi_ddiv>
 80066d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066d8:	f004 040f 	and.w	r4, r4, #15
 80066dc:	2603      	movs	r6, #3
 80066de:	4da2      	ldr	r5, [pc, #648]	@ (8006968 <_dtoa_r+0x5c0>)
 80066e0:	b954      	cbnz	r4, 80066f8 <_dtoa_r+0x350>
 80066e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ea:	f7fa f8d7 	bl	800089c <__aeabi_ddiv>
 80066ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066f2:	e028      	b.n	8006746 <_dtoa_r+0x39e>
 80066f4:	2602      	movs	r6, #2
 80066f6:	e7f2      	b.n	80066de <_dtoa_r+0x336>
 80066f8:	07e1      	lsls	r1, r4, #31
 80066fa:	d508      	bpl.n	800670e <_dtoa_r+0x366>
 80066fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006700:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006704:	f7f9 ffa0 	bl	8000648 <__aeabi_dmul>
 8006708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800670c:	3601      	adds	r6, #1
 800670e:	1064      	asrs	r4, r4, #1
 8006710:	3508      	adds	r5, #8
 8006712:	e7e5      	b.n	80066e0 <_dtoa_r+0x338>
 8006714:	f000 80d2 	beq.w	80068bc <_dtoa_r+0x514>
 8006718:	427c      	negs	r4, r7
 800671a:	4b92      	ldr	r3, [pc, #584]	@ (8006964 <_dtoa_r+0x5bc>)
 800671c:	4d92      	ldr	r5, [pc, #584]	@ (8006968 <_dtoa_r+0x5c0>)
 800671e:	f004 020f 	and.w	r2, r4, #15
 8006722:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800672e:	f7f9 ff8b 	bl	8000648 <__aeabi_dmul>
 8006732:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006736:	1124      	asrs	r4, r4, #4
 8006738:	2300      	movs	r3, #0
 800673a:	2602      	movs	r6, #2
 800673c:	2c00      	cmp	r4, #0
 800673e:	f040 80b2 	bne.w	80068a6 <_dtoa_r+0x4fe>
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1d3      	bne.n	80066ee <_dtoa_r+0x346>
 8006746:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006748:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800674c:	2b00      	cmp	r3, #0
 800674e:	f000 80b7 	beq.w	80068c0 <_dtoa_r+0x518>
 8006752:	4b86      	ldr	r3, [pc, #536]	@ (800696c <_dtoa_r+0x5c4>)
 8006754:	2200      	movs	r2, #0
 8006756:	4620      	mov	r0, r4
 8006758:	4629      	mov	r1, r5
 800675a:	f7fa f9e7 	bl	8000b2c <__aeabi_dcmplt>
 800675e:	2800      	cmp	r0, #0
 8006760:	f000 80ae 	beq.w	80068c0 <_dtoa_r+0x518>
 8006764:	9b07      	ldr	r3, [sp, #28]
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 80aa 	beq.w	80068c0 <_dtoa_r+0x518>
 800676c:	9b00      	ldr	r3, [sp, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	dd37      	ble.n	80067e2 <_dtoa_r+0x43a>
 8006772:	1e7b      	subs	r3, r7, #1
 8006774:	9304      	str	r3, [sp, #16]
 8006776:	4620      	mov	r0, r4
 8006778:	4b7d      	ldr	r3, [pc, #500]	@ (8006970 <_dtoa_r+0x5c8>)
 800677a:	2200      	movs	r2, #0
 800677c:	4629      	mov	r1, r5
 800677e:	f7f9 ff63 	bl	8000648 <__aeabi_dmul>
 8006782:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006786:	9c00      	ldr	r4, [sp, #0]
 8006788:	3601      	adds	r6, #1
 800678a:	4630      	mov	r0, r6
 800678c:	f7f9 fef2 	bl	8000574 <__aeabi_i2d>
 8006790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006794:	f7f9 ff58 	bl	8000648 <__aeabi_dmul>
 8006798:	4b76      	ldr	r3, [pc, #472]	@ (8006974 <_dtoa_r+0x5cc>)
 800679a:	2200      	movs	r2, #0
 800679c:	f7f9 fd9e 	bl	80002dc <__adddf3>
 80067a0:	4605      	mov	r5, r0
 80067a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80067a6:	2c00      	cmp	r4, #0
 80067a8:	f040 808d 	bne.w	80068c6 <_dtoa_r+0x51e>
 80067ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067b0:	4b71      	ldr	r3, [pc, #452]	@ (8006978 <_dtoa_r+0x5d0>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	f7f9 fd90 	bl	80002d8 <__aeabi_dsub>
 80067b8:	4602      	mov	r2, r0
 80067ba:	460b      	mov	r3, r1
 80067bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067c0:	462a      	mov	r2, r5
 80067c2:	4633      	mov	r3, r6
 80067c4:	f7fa f9d0 	bl	8000b68 <__aeabi_dcmpgt>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	f040 828b 	bne.w	8006ce4 <_dtoa_r+0x93c>
 80067ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d2:	462a      	mov	r2, r5
 80067d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80067d8:	f7fa f9a8 	bl	8000b2c <__aeabi_dcmplt>
 80067dc:	2800      	cmp	r0, #0
 80067de:	f040 8128 	bne.w	8006a32 <_dtoa_r+0x68a>
 80067e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80067e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80067ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f2c0 815a 	blt.w	8006aa6 <_dtoa_r+0x6fe>
 80067f2:	2f0e      	cmp	r7, #14
 80067f4:	f300 8157 	bgt.w	8006aa6 <_dtoa_r+0x6fe>
 80067f8:	4b5a      	ldr	r3, [pc, #360]	@ (8006964 <_dtoa_r+0x5bc>)
 80067fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80067fe:	ed93 7b00 	vldr	d7, [r3]
 8006802:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006804:	2b00      	cmp	r3, #0
 8006806:	ed8d 7b00 	vstr	d7, [sp]
 800680a:	da03      	bge.n	8006814 <_dtoa_r+0x46c>
 800680c:	9b07      	ldr	r3, [sp, #28]
 800680e:	2b00      	cmp	r3, #0
 8006810:	f340 8101 	ble.w	8006a16 <_dtoa_r+0x66e>
 8006814:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006818:	4656      	mov	r6, sl
 800681a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800681e:	4620      	mov	r0, r4
 8006820:	4629      	mov	r1, r5
 8006822:	f7fa f83b 	bl	800089c <__aeabi_ddiv>
 8006826:	f7fa f9bf 	bl	8000ba8 <__aeabi_d2iz>
 800682a:	4680      	mov	r8, r0
 800682c:	f7f9 fea2 	bl	8000574 <__aeabi_i2d>
 8006830:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006834:	f7f9 ff08 	bl	8000648 <__aeabi_dmul>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4620      	mov	r0, r4
 800683e:	4629      	mov	r1, r5
 8006840:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006844:	f7f9 fd48 	bl	80002d8 <__aeabi_dsub>
 8006848:	f806 4b01 	strb.w	r4, [r6], #1
 800684c:	9d07      	ldr	r5, [sp, #28]
 800684e:	eba6 040a 	sub.w	r4, r6, sl
 8006852:	42a5      	cmp	r5, r4
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	f040 8117 	bne.w	8006a8a <_dtoa_r+0x6e2>
 800685c:	f7f9 fd3e 	bl	80002dc <__adddf3>
 8006860:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006864:	4604      	mov	r4, r0
 8006866:	460d      	mov	r5, r1
 8006868:	f7fa f97e 	bl	8000b68 <__aeabi_dcmpgt>
 800686c:	2800      	cmp	r0, #0
 800686e:	f040 80f9 	bne.w	8006a64 <_dtoa_r+0x6bc>
 8006872:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006876:	4620      	mov	r0, r4
 8006878:	4629      	mov	r1, r5
 800687a:	f7fa f94d 	bl	8000b18 <__aeabi_dcmpeq>
 800687e:	b118      	cbz	r0, 8006888 <_dtoa_r+0x4e0>
 8006880:	f018 0f01 	tst.w	r8, #1
 8006884:	f040 80ee 	bne.w	8006a64 <_dtoa_r+0x6bc>
 8006888:	4649      	mov	r1, r9
 800688a:	4658      	mov	r0, fp
 800688c:	f000 fc90 	bl	80071b0 <_Bfree>
 8006890:	2300      	movs	r3, #0
 8006892:	7033      	strb	r3, [r6, #0]
 8006894:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006896:	3701      	adds	r7, #1
 8006898:	601f      	str	r7, [r3, #0]
 800689a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800689c:	2b00      	cmp	r3, #0
 800689e:	f000 831d 	beq.w	8006edc <_dtoa_r+0xb34>
 80068a2:	601e      	str	r6, [r3, #0]
 80068a4:	e31a      	b.n	8006edc <_dtoa_r+0xb34>
 80068a6:	07e2      	lsls	r2, r4, #31
 80068a8:	d505      	bpl.n	80068b6 <_dtoa_r+0x50e>
 80068aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80068ae:	f7f9 fecb 	bl	8000648 <__aeabi_dmul>
 80068b2:	3601      	adds	r6, #1
 80068b4:	2301      	movs	r3, #1
 80068b6:	1064      	asrs	r4, r4, #1
 80068b8:	3508      	adds	r5, #8
 80068ba:	e73f      	b.n	800673c <_dtoa_r+0x394>
 80068bc:	2602      	movs	r6, #2
 80068be:	e742      	b.n	8006746 <_dtoa_r+0x39e>
 80068c0:	9c07      	ldr	r4, [sp, #28]
 80068c2:	9704      	str	r7, [sp, #16]
 80068c4:	e761      	b.n	800678a <_dtoa_r+0x3e2>
 80068c6:	4b27      	ldr	r3, [pc, #156]	@ (8006964 <_dtoa_r+0x5bc>)
 80068c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068d2:	4454      	add	r4, sl
 80068d4:	2900      	cmp	r1, #0
 80068d6:	d053      	beq.n	8006980 <_dtoa_r+0x5d8>
 80068d8:	4928      	ldr	r1, [pc, #160]	@ (800697c <_dtoa_r+0x5d4>)
 80068da:	2000      	movs	r0, #0
 80068dc:	f7f9 ffde 	bl	800089c <__aeabi_ddiv>
 80068e0:	4633      	mov	r3, r6
 80068e2:	462a      	mov	r2, r5
 80068e4:	f7f9 fcf8 	bl	80002d8 <__aeabi_dsub>
 80068e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80068ec:	4656      	mov	r6, sl
 80068ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068f2:	f7fa f959 	bl	8000ba8 <__aeabi_d2iz>
 80068f6:	4605      	mov	r5, r0
 80068f8:	f7f9 fe3c 	bl	8000574 <__aeabi_i2d>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006904:	f7f9 fce8 	bl	80002d8 <__aeabi_dsub>
 8006908:	3530      	adds	r5, #48	@ 0x30
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006912:	f806 5b01 	strb.w	r5, [r6], #1
 8006916:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800691a:	f7fa f907 	bl	8000b2c <__aeabi_dcmplt>
 800691e:	2800      	cmp	r0, #0
 8006920:	d171      	bne.n	8006a06 <_dtoa_r+0x65e>
 8006922:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006926:	4911      	ldr	r1, [pc, #68]	@ (800696c <_dtoa_r+0x5c4>)
 8006928:	2000      	movs	r0, #0
 800692a:	f7f9 fcd5 	bl	80002d8 <__aeabi_dsub>
 800692e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006932:	f7fa f8fb 	bl	8000b2c <__aeabi_dcmplt>
 8006936:	2800      	cmp	r0, #0
 8006938:	f040 8095 	bne.w	8006a66 <_dtoa_r+0x6be>
 800693c:	42a6      	cmp	r6, r4
 800693e:	f43f af50 	beq.w	80067e2 <_dtoa_r+0x43a>
 8006942:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006946:	4b0a      	ldr	r3, [pc, #40]	@ (8006970 <_dtoa_r+0x5c8>)
 8006948:	2200      	movs	r2, #0
 800694a:	f7f9 fe7d 	bl	8000648 <__aeabi_dmul>
 800694e:	4b08      	ldr	r3, [pc, #32]	@ (8006970 <_dtoa_r+0x5c8>)
 8006950:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006954:	2200      	movs	r2, #0
 8006956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800695a:	f7f9 fe75 	bl	8000648 <__aeabi_dmul>
 800695e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006962:	e7c4      	b.n	80068ee <_dtoa_r+0x546>
 8006964:	08008590 	.word	0x08008590
 8006968:	08008568 	.word	0x08008568
 800696c:	3ff00000 	.word	0x3ff00000
 8006970:	40240000 	.word	0x40240000
 8006974:	401c0000 	.word	0x401c0000
 8006978:	40140000 	.word	0x40140000
 800697c:	3fe00000 	.word	0x3fe00000
 8006980:	4631      	mov	r1, r6
 8006982:	4628      	mov	r0, r5
 8006984:	f7f9 fe60 	bl	8000648 <__aeabi_dmul>
 8006988:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800698c:	9415      	str	r4, [sp, #84]	@ 0x54
 800698e:	4656      	mov	r6, sl
 8006990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006994:	f7fa f908 	bl	8000ba8 <__aeabi_d2iz>
 8006998:	4605      	mov	r5, r0
 800699a:	f7f9 fdeb 	bl	8000574 <__aeabi_i2d>
 800699e:	4602      	mov	r2, r0
 80069a0:	460b      	mov	r3, r1
 80069a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069a6:	f7f9 fc97 	bl	80002d8 <__aeabi_dsub>
 80069aa:	3530      	adds	r5, #48	@ 0x30
 80069ac:	f806 5b01 	strb.w	r5, [r6], #1
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	42a6      	cmp	r6, r4
 80069b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80069ba:	f04f 0200 	mov.w	r2, #0
 80069be:	d124      	bne.n	8006a0a <_dtoa_r+0x662>
 80069c0:	4bac      	ldr	r3, [pc, #688]	@ (8006c74 <_dtoa_r+0x8cc>)
 80069c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80069c6:	f7f9 fc89 	bl	80002dc <__adddf3>
 80069ca:	4602      	mov	r2, r0
 80069cc:	460b      	mov	r3, r1
 80069ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069d2:	f7fa f8c9 	bl	8000b68 <__aeabi_dcmpgt>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	d145      	bne.n	8006a66 <_dtoa_r+0x6be>
 80069da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80069de:	49a5      	ldr	r1, [pc, #660]	@ (8006c74 <_dtoa_r+0x8cc>)
 80069e0:	2000      	movs	r0, #0
 80069e2:	f7f9 fc79 	bl	80002d8 <__aeabi_dsub>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80069ee:	f7fa f89d 	bl	8000b2c <__aeabi_dcmplt>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	f43f aef5 	beq.w	80067e2 <_dtoa_r+0x43a>
 80069f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80069fa:	1e73      	subs	r3, r6, #1
 80069fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80069fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006a02:	2b30      	cmp	r3, #48	@ 0x30
 8006a04:	d0f8      	beq.n	80069f8 <_dtoa_r+0x650>
 8006a06:	9f04      	ldr	r7, [sp, #16]
 8006a08:	e73e      	b.n	8006888 <_dtoa_r+0x4e0>
 8006a0a:	4b9b      	ldr	r3, [pc, #620]	@ (8006c78 <_dtoa_r+0x8d0>)
 8006a0c:	f7f9 fe1c 	bl	8000648 <__aeabi_dmul>
 8006a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a14:	e7bc      	b.n	8006990 <_dtoa_r+0x5e8>
 8006a16:	d10c      	bne.n	8006a32 <_dtoa_r+0x68a>
 8006a18:	4b98      	ldr	r3, [pc, #608]	@ (8006c7c <_dtoa_r+0x8d4>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a20:	f7f9 fe12 	bl	8000648 <__aeabi_dmul>
 8006a24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a28:	f7fa f894 	bl	8000b54 <__aeabi_dcmpge>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	f000 8157 	beq.w	8006ce0 <_dtoa_r+0x938>
 8006a32:	2400      	movs	r4, #0
 8006a34:	4625      	mov	r5, r4
 8006a36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a38:	43db      	mvns	r3, r3
 8006a3a:	9304      	str	r3, [sp, #16]
 8006a3c:	4656      	mov	r6, sl
 8006a3e:	2700      	movs	r7, #0
 8006a40:	4621      	mov	r1, r4
 8006a42:	4658      	mov	r0, fp
 8006a44:	f000 fbb4 	bl	80071b0 <_Bfree>
 8006a48:	2d00      	cmp	r5, #0
 8006a4a:	d0dc      	beq.n	8006a06 <_dtoa_r+0x65e>
 8006a4c:	b12f      	cbz	r7, 8006a5a <_dtoa_r+0x6b2>
 8006a4e:	42af      	cmp	r7, r5
 8006a50:	d003      	beq.n	8006a5a <_dtoa_r+0x6b2>
 8006a52:	4639      	mov	r1, r7
 8006a54:	4658      	mov	r0, fp
 8006a56:	f000 fbab 	bl	80071b0 <_Bfree>
 8006a5a:	4629      	mov	r1, r5
 8006a5c:	4658      	mov	r0, fp
 8006a5e:	f000 fba7 	bl	80071b0 <_Bfree>
 8006a62:	e7d0      	b.n	8006a06 <_dtoa_r+0x65e>
 8006a64:	9704      	str	r7, [sp, #16]
 8006a66:	4633      	mov	r3, r6
 8006a68:	461e      	mov	r6, r3
 8006a6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a6e:	2a39      	cmp	r2, #57	@ 0x39
 8006a70:	d107      	bne.n	8006a82 <_dtoa_r+0x6da>
 8006a72:	459a      	cmp	sl, r3
 8006a74:	d1f8      	bne.n	8006a68 <_dtoa_r+0x6c0>
 8006a76:	9a04      	ldr	r2, [sp, #16]
 8006a78:	3201      	adds	r2, #1
 8006a7a:	9204      	str	r2, [sp, #16]
 8006a7c:	2230      	movs	r2, #48	@ 0x30
 8006a7e:	f88a 2000 	strb.w	r2, [sl]
 8006a82:	781a      	ldrb	r2, [r3, #0]
 8006a84:	3201      	adds	r2, #1
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	e7bd      	b.n	8006a06 <_dtoa_r+0x65e>
 8006a8a:	4b7b      	ldr	r3, [pc, #492]	@ (8006c78 <_dtoa_r+0x8d0>)
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f7f9 fddb 	bl	8000648 <__aeabi_dmul>
 8006a92:	2200      	movs	r2, #0
 8006a94:	2300      	movs	r3, #0
 8006a96:	4604      	mov	r4, r0
 8006a98:	460d      	mov	r5, r1
 8006a9a:	f7fa f83d 	bl	8000b18 <__aeabi_dcmpeq>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	f43f aebb 	beq.w	800681a <_dtoa_r+0x472>
 8006aa4:	e6f0      	b.n	8006888 <_dtoa_r+0x4e0>
 8006aa6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006aa8:	2a00      	cmp	r2, #0
 8006aaa:	f000 80db 	beq.w	8006c64 <_dtoa_r+0x8bc>
 8006aae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ab0:	2a01      	cmp	r2, #1
 8006ab2:	f300 80bf 	bgt.w	8006c34 <_dtoa_r+0x88c>
 8006ab6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006ab8:	2a00      	cmp	r2, #0
 8006aba:	f000 80b7 	beq.w	8006c2c <_dtoa_r+0x884>
 8006abe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006ac2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006ac4:	4646      	mov	r6, r8
 8006ac6:	9a08      	ldr	r2, [sp, #32]
 8006ac8:	2101      	movs	r1, #1
 8006aca:	441a      	add	r2, r3
 8006acc:	4658      	mov	r0, fp
 8006ace:	4498      	add	r8, r3
 8006ad0:	9208      	str	r2, [sp, #32]
 8006ad2:	f000 fc21 	bl	8007318 <__i2b>
 8006ad6:	4605      	mov	r5, r0
 8006ad8:	b15e      	cbz	r6, 8006af2 <_dtoa_r+0x74a>
 8006ada:	9b08      	ldr	r3, [sp, #32]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	dd08      	ble.n	8006af2 <_dtoa_r+0x74a>
 8006ae0:	42b3      	cmp	r3, r6
 8006ae2:	9a08      	ldr	r2, [sp, #32]
 8006ae4:	bfa8      	it	ge
 8006ae6:	4633      	movge	r3, r6
 8006ae8:	eba8 0803 	sub.w	r8, r8, r3
 8006aec:	1af6      	subs	r6, r6, r3
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	9308      	str	r3, [sp, #32]
 8006af2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006af4:	b1f3      	cbz	r3, 8006b34 <_dtoa_r+0x78c>
 8006af6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 80b7 	beq.w	8006c6c <_dtoa_r+0x8c4>
 8006afe:	b18c      	cbz	r4, 8006b24 <_dtoa_r+0x77c>
 8006b00:	4629      	mov	r1, r5
 8006b02:	4622      	mov	r2, r4
 8006b04:	4658      	mov	r0, fp
 8006b06:	f000 fcc7 	bl	8007498 <__pow5mult>
 8006b0a:	464a      	mov	r2, r9
 8006b0c:	4601      	mov	r1, r0
 8006b0e:	4605      	mov	r5, r0
 8006b10:	4658      	mov	r0, fp
 8006b12:	f000 fc17 	bl	8007344 <__multiply>
 8006b16:	4649      	mov	r1, r9
 8006b18:	9004      	str	r0, [sp, #16]
 8006b1a:	4658      	mov	r0, fp
 8006b1c:	f000 fb48 	bl	80071b0 <_Bfree>
 8006b20:	9b04      	ldr	r3, [sp, #16]
 8006b22:	4699      	mov	r9, r3
 8006b24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b26:	1b1a      	subs	r2, r3, r4
 8006b28:	d004      	beq.n	8006b34 <_dtoa_r+0x78c>
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	4658      	mov	r0, fp
 8006b2e:	f000 fcb3 	bl	8007498 <__pow5mult>
 8006b32:	4681      	mov	r9, r0
 8006b34:	2101      	movs	r1, #1
 8006b36:	4658      	mov	r0, fp
 8006b38:	f000 fbee 	bl	8007318 <__i2b>
 8006b3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b3e:	4604      	mov	r4, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 81cf 	beq.w	8006ee4 <_dtoa_r+0xb3c>
 8006b46:	461a      	mov	r2, r3
 8006b48:	4601      	mov	r1, r0
 8006b4a:	4658      	mov	r0, fp
 8006b4c:	f000 fca4 	bl	8007498 <__pow5mult>
 8006b50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	4604      	mov	r4, r0
 8006b56:	f300 8095 	bgt.w	8006c84 <_dtoa_r+0x8dc>
 8006b5a:	9b02      	ldr	r3, [sp, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f040 8087 	bne.w	8006c70 <_dtoa_r+0x8c8>
 8006b62:	9b03      	ldr	r3, [sp, #12]
 8006b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f040 8089 	bne.w	8006c80 <_dtoa_r+0x8d8>
 8006b6e:	9b03      	ldr	r3, [sp, #12]
 8006b70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b74:	0d1b      	lsrs	r3, r3, #20
 8006b76:	051b      	lsls	r3, r3, #20
 8006b78:	b12b      	cbz	r3, 8006b86 <_dtoa_r+0x7de>
 8006b7a:	9b08      	ldr	r3, [sp, #32]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	9308      	str	r3, [sp, #32]
 8006b80:	f108 0801 	add.w	r8, r8, #1
 8006b84:	2301      	movs	r3, #1
 8006b86:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 81b0 	beq.w	8006ef0 <_dtoa_r+0xb48>
 8006b90:	6923      	ldr	r3, [r4, #16]
 8006b92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b96:	6918      	ldr	r0, [r3, #16]
 8006b98:	f000 fb72 	bl	8007280 <__hi0bits>
 8006b9c:	f1c0 0020 	rsb	r0, r0, #32
 8006ba0:	9b08      	ldr	r3, [sp, #32]
 8006ba2:	4418      	add	r0, r3
 8006ba4:	f010 001f 	ands.w	r0, r0, #31
 8006ba8:	d077      	beq.n	8006c9a <_dtoa_r+0x8f2>
 8006baa:	f1c0 0320 	rsb	r3, r0, #32
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	dd6b      	ble.n	8006c8a <_dtoa_r+0x8e2>
 8006bb2:	9b08      	ldr	r3, [sp, #32]
 8006bb4:	f1c0 001c 	rsb	r0, r0, #28
 8006bb8:	4403      	add	r3, r0
 8006bba:	4480      	add	r8, r0
 8006bbc:	4406      	add	r6, r0
 8006bbe:	9308      	str	r3, [sp, #32]
 8006bc0:	f1b8 0f00 	cmp.w	r8, #0
 8006bc4:	dd05      	ble.n	8006bd2 <_dtoa_r+0x82a>
 8006bc6:	4649      	mov	r1, r9
 8006bc8:	4642      	mov	r2, r8
 8006bca:	4658      	mov	r0, fp
 8006bcc:	f000 fcbe 	bl	800754c <__lshift>
 8006bd0:	4681      	mov	r9, r0
 8006bd2:	9b08      	ldr	r3, [sp, #32]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	dd05      	ble.n	8006be4 <_dtoa_r+0x83c>
 8006bd8:	4621      	mov	r1, r4
 8006bda:	461a      	mov	r2, r3
 8006bdc:	4658      	mov	r0, fp
 8006bde:	f000 fcb5 	bl	800754c <__lshift>
 8006be2:	4604      	mov	r4, r0
 8006be4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d059      	beq.n	8006c9e <_dtoa_r+0x8f6>
 8006bea:	4621      	mov	r1, r4
 8006bec:	4648      	mov	r0, r9
 8006bee:	f000 fd19 	bl	8007624 <__mcmp>
 8006bf2:	2800      	cmp	r0, #0
 8006bf4:	da53      	bge.n	8006c9e <_dtoa_r+0x8f6>
 8006bf6:	1e7b      	subs	r3, r7, #1
 8006bf8:	9304      	str	r3, [sp, #16]
 8006bfa:	4649      	mov	r1, r9
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	220a      	movs	r2, #10
 8006c00:	4658      	mov	r0, fp
 8006c02:	f000 faf7 	bl	80071f4 <__multadd>
 8006c06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c08:	4681      	mov	r9, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f000 8172 	beq.w	8006ef4 <_dtoa_r+0xb4c>
 8006c10:	2300      	movs	r3, #0
 8006c12:	4629      	mov	r1, r5
 8006c14:	220a      	movs	r2, #10
 8006c16:	4658      	mov	r0, fp
 8006c18:	f000 faec 	bl	80071f4 <__multadd>
 8006c1c:	9b00      	ldr	r3, [sp, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	4605      	mov	r5, r0
 8006c22:	dc67      	bgt.n	8006cf4 <_dtoa_r+0x94c>
 8006c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	dc41      	bgt.n	8006cae <_dtoa_r+0x906>
 8006c2a:	e063      	b.n	8006cf4 <_dtoa_r+0x94c>
 8006c2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006c2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006c32:	e746      	b.n	8006ac2 <_dtoa_r+0x71a>
 8006c34:	9b07      	ldr	r3, [sp, #28]
 8006c36:	1e5c      	subs	r4, r3, #1
 8006c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c3a:	42a3      	cmp	r3, r4
 8006c3c:	bfbf      	itttt	lt
 8006c3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006c40:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006c42:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006c44:	1ae3      	sublt	r3, r4, r3
 8006c46:	bfb4      	ite	lt
 8006c48:	18d2      	addlt	r2, r2, r3
 8006c4a:	1b1c      	subge	r4, r3, r4
 8006c4c:	9b07      	ldr	r3, [sp, #28]
 8006c4e:	bfbc      	itt	lt
 8006c50:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006c52:	2400      	movlt	r4, #0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	bfb5      	itete	lt
 8006c58:	eba8 0603 	sublt.w	r6, r8, r3
 8006c5c:	9b07      	ldrge	r3, [sp, #28]
 8006c5e:	2300      	movlt	r3, #0
 8006c60:	4646      	movge	r6, r8
 8006c62:	e730      	b.n	8006ac6 <_dtoa_r+0x71e>
 8006c64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006c68:	4646      	mov	r6, r8
 8006c6a:	e735      	b.n	8006ad8 <_dtoa_r+0x730>
 8006c6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c6e:	e75c      	b.n	8006b2a <_dtoa_r+0x782>
 8006c70:	2300      	movs	r3, #0
 8006c72:	e788      	b.n	8006b86 <_dtoa_r+0x7de>
 8006c74:	3fe00000 	.word	0x3fe00000
 8006c78:	40240000 	.word	0x40240000
 8006c7c:	40140000 	.word	0x40140000
 8006c80:	9b02      	ldr	r3, [sp, #8]
 8006c82:	e780      	b.n	8006b86 <_dtoa_r+0x7de>
 8006c84:	2300      	movs	r3, #0
 8006c86:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c88:	e782      	b.n	8006b90 <_dtoa_r+0x7e8>
 8006c8a:	d099      	beq.n	8006bc0 <_dtoa_r+0x818>
 8006c8c:	9a08      	ldr	r2, [sp, #32]
 8006c8e:	331c      	adds	r3, #28
 8006c90:	441a      	add	r2, r3
 8006c92:	4498      	add	r8, r3
 8006c94:	441e      	add	r6, r3
 8006c96:	9208      	str	r2, [sp, #32]
 8006c98:	e792      	b.n	8006bc0 <_dtoa_r+0x818>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	e7f6      	b.n	8006c8c <_dtoa_r+0x8e4>
 8006c9e:	9b07      	ldr	r3, [sp, #28]
 8006ca0:	9704      	str	r7, [sp, #16]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	dc20      	bgt.n	8006ce8 <_dtoa_r+0x940>
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	dd1e      	ble.n	8006cec <_dtoa_r+0x944>
 8006cae:	9b00      	ldr	r3, [sp, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f47f aec0 	bne.w	8006a36 <_dtoa_r+0x68e>
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	2205      	movs	r2, #5
 8006cba:	4658      	mov	r0, fp
 8006cbc:	f000 fa9a 	bl	80071f4 <__multadd>
 8006cc0:	4601      	mov	r1, r0
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	4648      	mov	r0, r9
 8006cc6:	f000 fcad 	bl	8007624 <__mcmp>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	f77f aeb3 	ble.w	8006a36 <_dtoa_r+0x68e>
 8006cd0:	4656      	mov	r6, sl
 8006cd2:	2331      	movs	r3, #49	@ 0x31
 8006cd4:	f806 3b01 	strb.w	r3, [r6], #1
 8006cd8:	9b04      	ldr	r3, [sp, #16]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	9304      	str	r3, [sp, #16]
 8006cde:	e6ae      	b.n	8006a3e <_dtoa_r+0x696>
 8006ce0:	9c07      	ldr	r4, [sp, #28]
 8006ce2:	9704      	str	r7, [sp, #16]
 8006ce4:	4625      	mov	r5, r4
 8006ce6:	e7f3      	b.n	8006cd0 <_dtoa_r+0x928>
 8006ce8:	9b07      	ldr	r3, [sp, #28]
 8006cea:	9300      	str	r3, [sp, #0]
 8006cec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 8104 	beq.w	8006efc <_dtoa_r+0xb54>
 8006cf4:	2e00      	cmp	r6, #0
 8006cf6:	dd05      	ble.n	8006d04 <_dtoa_r+0x95c>
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	4632      	mov	r2, r6
 8006cfc:	4658      	mov	r0, fp
 8006cfe:	f000 fc25 	bl	800754c <__lshift>
 8006d02:	4605      	mov	r5, r0
 8006d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d05a      	beq.n	8006dc0 <_dtoa_r+0xa18>
 8006d0a:	6869      	ldr	r1, [r5, #4]
 8006d0c:	4658      	mov	r0, fp
 8006d0e:	f000 fa0f 	bl	8007130 <_Balloc>
 8006d12:	4606      	mov	r6, r0
 8006d14:	b928      	cbnz	r0, 8006d22 <_dtoa_r+0x97a>
 8006d16:	4b84      	ldr	r3, [pc, #528]	@ (8006f28 <_dtoa_r+0xb80>)
 8006d18:	4602      	mov	r2, r0
 8006d1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006d1e:	f7ff bb5a 	b.w	80063d6 <_dtoa_r+0x2e>
 8006d22:	692a      	ldr	r2, [r5, #16]
 8006d24:	3202      	adds	r2, #2
 8006d26:	0092      	lsls	r2, r2, #2
 8006d28:	f105 010c 	add.w	r1, r5, #12
 8006d2c:	300c      	adds	r0, #12
 8006d2e:	f001 f813 	bl	8007d58 <memcpy>
 8006d32:	2201      	movs	r2, #1
 8006d34:	4631      	mov	r1, r6
 8006d36:	4658      	mov	r0, fp
 8006d38:	f000 fc08 	bl	800754c <__lshift>
 8006d3c:	f10a 0301 	add.w	r3, sl, #1
 8006d40:	9307      	str	r3, [sp, #28]
 8006d42:	9b00      	ldr	r3, [sp, #0]
 8006d44:	4453      	add	r3, sl
 8006d46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d48:	9b02      	ldr	r3, [sp, #8]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	462f      	mov	r7, r5
 8006d50:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d52:	4605      	mov	r5, r0
 8006d54:	9b07      	ldr	r3, [sp, #28]
 8006d56:	4621      	mov	r1, r4
 8006d58:	3b01      	subs	r3, #1
 8006d5a:	4648      	mov	r0, r9
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	f7ff fa98 	bl	8006292 <quorem>
 8006d62:	4639      	mov	r1, r7
 8006d64:	9002      	str	r0, [sp, #8]
 8006d66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d6a:	4648      	mov	r0, r9
 8006d6c:	f000 fc5a 	bl	8007624 <__mcmp>
 8006d70:	462a      	mov	r2, r5
 8006d72:	9008      	str	r0, [sp, #32]
 8006d74:	4621      	mov	r1, r4
 8006d76:	4658      	mov	r0, fp
 8006d78:	f000 fc70 	bl	800765c <__mdiff>
 8006d7c:	68c2      	ldr	r2, [r0, #12]
 8006d7e:	4606      	mov	r6, r0
 8006d80:	bb02      	cbnz	r2, 8006dc4 <_dtoa_r+0xa1c>
 8006d82:	4601      	mov	r1, r0
 8006d84:	4648      	mov	r0, r9
 8006d86:	f000 fc4d 	bl	8007624 <__mcmp>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	4631      	mov	r1, r6
 8006d8e:	4658      	mov	r0, fp
 8006d90:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d92:	f000 fa0d 	bl	80071b0 <_Bfree>
 8006d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d9a:	9e07      	ldr	r6, [sp, #28]
 8006d9c:	ea43 0102 	orr.w	r1, r3, r2
 8006da0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006da2:	4319      	orrs	r1, r3
 8006da4:	d110      	bne.n	8006dc8 <_dtoa_r+0xa20>
 8006da6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006daa:	d029      	beq.n	8006e00 <_dtoa_r+0xa58>
 8006dac:	9b08      	ldr	r3, [sp, #32]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	dd02      	ble.n	8006db8 <_dtoa_r+0xa10>
 8006db2:	9b02      	ldr	r3, [sp, #8]
 8006db4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006db8:	9b00      	ldr	r3, [sp, #0]
 8006dba:	f883 8000 	strb.w	r8, [r3]
 8006dbe:	e63f      	b.n	8006a40 <_dtoa_r+0x698>
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	e7bb      	b.n	8006d3c <_dtoa_r+0x994>
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	e7e1      	b.n	8006d8c <_dtoa_r+0x9e4>
 8006dc8:	9b08      	ldr	r3, [sp, #32]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	db04      	blt.n	8006dd8 <_dtoa_r+0xa30>
 8006dce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006dd4:	430b      	orrs	r3, r1
 8006dd6:	d120      	bne.n	8006e1a <_dtoa_r+0xa72>
 8006dd8:	2a00      	cmp	r2, #0
 8006dda:	dded      	ble.n	8006db8 <_dtoa_r+0xa10>
 8006ddc:	4649      	mov	r1, r9
 8006dde:	2201      	movs	r2, #1
 8006de0:	4658      	mov	r0, fp
 8006de2:	f000 fbb3 	bl	800754c <__lshift>
 8006de6:	4621      	mov	r1, r4
 8006de8:	4681      	mov	r9, r0
 8006dea:	f000 fc1b 	bl	8007624 <__mcmp>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	dc03      	bgt.n	8006dfa <_dtoa_r+0xa52>
 8006df2:	d1e1      	bne.n	8006db8 <_dtoa_r+0xa10>
 8006df4:	f018 0f01 	tst.w	r8, #1
 8006df8:	d0de      	beq.n	8006db8 <_dtoa_r+0xa10>
 8006dfa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006dfe:	d1d8      	bne.n	8006db2 <_dtoa_r+0xa0a>
 8006e00:	9a00      	ldr	r2, [sp, #0]
 8006e02:	2339      	movs	r3, #57	@ 0x39
 8006e04:	7013      	strb	r3, [r2, #0]
 8006e06:	4633      	mov	r3, r6
 8006e08:	461e      	mov	r6, r3
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006e10:	2a39      	cmp	r2, #57	@ 0x39
 8006e12:	d052      	beq.n	8006eba <_dtoa_r+0xb12>
 8006e14:	3201      	adds	r2, #1
 8006e16:	701a      	strb	r2, [r3, #0]
 8006e18:	e612      	b.n	8006a40 <_dtoa_r+0x698>
 8006e1a:	2a00      	cmp	r2, #0
 8006e1c:	dd07      	ble.n	8006e2e <_dtoa_r+0xa86>
 8006e1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006e22:	d0ed      	beq.n	8006e00 <_dtoa_r+0xa58>
 8006e24:	9a00      	ldr	r2, [sp, #0]
 8006e26:	f108 0301 	add.w	r3, r8, #1
 8006e2a:	7013      	strb	r3, [r2, #0]
 8006e2c:	e608      	b.n	8006a40 <_dtoa_r+0x698>
 8006e2e:	9b07      	ldr	r3, [sp, #28]
 8006e30:	9a07      	ldr	r2, [sp, #28]
 8006e32:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006e36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d028      	beq.n	8006e8e <_dtoa_r+0xae6>
 8006e3c:	4649      	mov	r1, r9
 8006e3e:	2300      	movs	r3, #0
 8006e40:	220a      	movs	r2, #10
 8006e42:	4658      	mov	r0, fp
 8006e44:	f000 f9d6 	bl	80071f4 <__multadd>
 8006e48:	42af      	cmp	r7, r5
 8006e4a:	4681      	mov	r9, r0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	f04f 020a 	mov.w	r2, #10
 8006e54:	4639      	mov	r1, r7
 8006e56:	4658      	mov	r0, fp
 8006e58:	d107      	bne.n	8006e6a <_dtoa_r+0xac2>
 8006e5a:	f000 f9cb 	bl	80071f4 <__multadd>
 8006e5e:	4607      	mov	r7, r0
 8006e60:	4605      	mov	r5, r0
 8006e62:	9b07      	ldr	r3, [sp, #28]
 8006e64:	3301      	adds	r3, #1
 8006e66:	9307      	str	r3, [sp, #28]
 8006e68:	e774      	b.n	8006d54 <_dtoa_r+0x9ac>
 8006e6a:	f000 f9c3 	bl	80071f4 <__multadd>
 8006e6e:	4629      	mov	r1, r5
 8006e70:	4607      	mov	r7, r0
 8006e72:	2300      	movs	r3, #0
 8006e74:	220a      	movs	r2, #10
 8006e76:	4658      	mov	r0, fp
 8006e78:	f000 f9bc 	bl	80071f4 <__multadd>
 8006e7c:	4605      	mov	r5, r0
 8006e7e:	e7f0      	b.n	8006e62 <_dtoa_r+0xaba>
 8006e80:	9b00      	ldr	r3, [sp, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	bfcc      	ite	gt
 8006e86:	461e      	movgt	r6, r3
 8006e88:	2601      	movle	r6, #1
 8006e8a:	4456      	add	r6, sl
 8006e8c:	2700      	movs	r7, #0
 8006e8e:	4649      	mov	r1, r9
 8006e90:	2201      	movs	r2, #1
 8006e92:	4658      	mov	r0, fp
 8006e94:	f000 fb5a 	bl	800754c <__lshift>
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4681      	mov	r9, r0
 8006e9c:	f000 fbc2 	bl	8007624 <__mcmp>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	dcb0      	bgt.n	8006e06 <_dtoa_r+0xa5e>
 8006ea4:	d102      	bne.n	8006eac <_dtoa_r+0xb04>
 8006ea6:	f018 0f01 	tst.w	r8, #1
 8006eaa:	d1ac      	bne.n	8006e06 <_dtoa_r+0xa5e>
 8006eac:	4633      	mov	r3, r6
 8006eae:	461e      	mov	r6, r3
 8006eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006eb4:	2a30      	cmp	r2, #48	@ 0x30
 8006eb6:	d0fa      	beq.n	8006eae <_dtoa_r+0xb06>
 8006eb8:	e5c2      	b.n	8006a40 <_dtoa_r+0x698>
 8006eba:	459a      	cmp	sl, r3
 8006ebc:	d1a4      	bne.n	8006e08 <_dtoa_r+0xa60>
 8006ebe:	9b04      	ldr	r3, [sp, #16]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	9304      	str	r3, [sp, #16]
 8006ec4:	2331      	movs	r3, #49	@ 0x31
 8006ec6:	f88a 3000 	strb.w	r3, [sl]
 8006eca:	e5b9      	b.n	8006a40 <_dtoa_r+0x698>
 8006ecc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ece:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006f2c <_dtoa_r+0xb84>
 8006ed2:	b11b      	cbz	r3, 8006edc <_dtoa_r+0xb34>
 8006ed4:	f10a 0308 	add.w	r3, sl, #8
 8006ed8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006eda:	6013      	str	r3, [r2, #0]
 8006edc:	4650      	mov	r0, sl
 8006ede:	b019      	add	sp, #100	@ 0x64
 8006ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	f77f ae37 	ble.w	8006b5a <_dtoa_r+0x7b2>
 8006eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	e655      	b.n	8006ba0 <_dtoa_r+0x7f8>
 8006ef4:	9b00      	ldr	r3, [sp, #0]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f77f aed6 	ble.w	8006ca8 <_dtoa_r+0x900>
 8006efc:	4656      	mov	r6, sl
 8006efe:	4621      	mov	r1, r4
 8006f00:	4648      	mov	r0, r9
 8006f02:	f7ff f9c6 	bl	8006292 <quorem>
 8006f06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006f0a:	f806 8b01 	strb.w	r8, [r6], #1
 8006f0e:	9b00      	ldr	r3, [sp, #0]
 8006f10:	eba6 020a 	sub.w	r2, r6, sl
 8006f14:	4293      	cmp	r3, r2
 8006f16:	ddb3      	ble.n	8006e80 <_dtoa_r+0xad8>
 8006f18:	4649      	mov	r1, r9
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	220a      	movs	r2, #10
 8006f1e:	4658      	mov	r0, fp
 8006f20:	f000 f968 	bl	80071f4 <__multadd>
 8006f24:	4681      	mov	r9, r0
 8006f26:	e7ea      	b.n	8006efe <_dtoa_r+0xb56>
 8006f28:	080084f0 	.word	0x080084f0
 8006f2c:	08008474 	.word	0x08008474

08006f30 <_free_r>:
 8006f30:	b538      	push	{r3, r4, r5, lr}
 8006f32:	4605      	mov	r5, r0
 8006f34:	2900      	cmp	r1, #0
 8006f36:	d041      	beq.n	8006fbc <_free_r+0x8c>
 8006f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f3c:	1f0c      	subs	r4, r1, #4
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	bfb8      	it	lt
 8006f42:	18e4      	addlt	r4, r4, r3
 8006f44:	f000 f8e8 	bl	8007118 <__malloc_lock>
 8006f48:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc0 <_free_r+0x90>)
 8006f4a:	6813      	ldr	r3, [r2, #0]
 8006f4c:	b933      	cbnz	r3, 8006f5c <_free_r+0x2c>
 8006f4e:	6063      	str	r3, [r4, #4]
 8006f50:	6014      	str	r4, [r2, #0]
 8006f52:	4628      	mov	r0, r5
 8006f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f58:	f000 b8e4 	b.w	8007124 <__malloc_unlock>
 8006f5c:	42a3      	cmp	r3, r4
 8006f5e:	d908      	bls.n	8006f72 <_free_r+0x42>
 8006f60:	6820      	ldr	r0, [r4, #0]
 8006f62:	1821      	adds	r1, r4, r0
 8006f64:	428b      	cmp	r3, r1
 8006f66:	bf01      	itttt	eq
 8006f68:	6819      	ldreq	r1, [r3, #0]
 8006f6a:	685b      	ldreq	r3, [r3, #4]
 8006f6c:	1809      	addeq	r1, r1, r0
 8006f6e:	6021      	streq	r1, [r4, #0]
 8006f70:	e7ed      	b.n	8006f4e <_free_r+0x1e>
 8006f72:	461a      	mov	r2, r3
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	b10b      	cbz	r3, 8006f7c <_free_r+0x4c>
 8006f78:	42a3      	cmp	r3, r4
 8006f7a:	d9fa      	bls.n	8006f72 <_free_r+0x42>
 8006f7c:	6811      	ldr	r1, [r2, #0]
 8006f7e:	1850      	adds	r0, r2, r1
 8006f80:	42a0      	cmp	r0, r4
 8006f82:	d10b      	bne.n	8006f9c <_free_r+0x6c>
 8006f84:	6820      	ldr	r0, [r4, #0]
 8006f86:	4401      	add	r1, r0
 8006f88:	1850      	adds	r0, r2, r1
 8006f8a:	4283      	cmp	r3, r0
 8006f8c:	6011      	str	r1, [r2, #0]
 8006f8e:	d1e0      	bne.n	8006f52 <_free_r+0x22>
 8006f90:	6818      	ldr	r0, [r3, #0]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	6053      	str	r3, [r2, #4]
 8006f96:	4408      	add	r0, r1
 8006f98:	6010      	str	r0, [r2, #0]
 8006f9a:	e7da      	b.n	8006f52 <_free_r+0x22>
 8006f9c:	d902      	bls.n	8006fa4 <_free_r+0x74>
 8006f9e:	230c      	movs	r3, #12
 8006fa0:	602b      	str	r3, [r5, #0]
 8006fa2:	e7d6      	b.n	8006f52 <_free_r+0x22>
 8006fa4:	6820      	ldr	r0, [r4, #0]
 8006fa6:	1821      	adds	r1, r4, r0
 8006fa8:	428b      	cmp	r3, r1
 8006faa:	bf04      	itt	eq
 8006fac:	6819      	ldreq	r1, [r3, #0]
 8006fae:	685b      	ldreq	r3, [r3, #4]
 8006fb0:	6063      	str	r3, [r4, #4]
 8006fb2:	bf04      	itt	eq
 8006fb4:	1809      	addeq	r1, r1, r0
 8006fb6:	6021      	streq	r1, [r4, #0]
 8006fb8:	6054      	str	r4, [r2, #4]
 8006fba:	e7ca      	b.n	8006f52 <_free_r+0x22>
 8006fbc:	bd38      	pop	{r3, r4, r5, pc}
 8006fbe:	bf00      	nop
 8006fc0:	200009f4 	.word	0x200009f4

08006fc4 <malloc>:
 8006fc4:	4b02      	ldr	r3, [pc, #8]	@ (8006fd0 <malloc+0xc>)
 8006fc6:	4601      	mov	r1, r0
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	f000 b825 	b.w	8007018 <_malloc_r>
 8006fce:	bf00      	nop
 8006fd0:	20000018 	.word	0x20000018

08006fd4 <sbrk_aligned>:
 8006fd4:	b570      	push	{r4, r5, r6, lr}
 8006fd6:	4e0f      	ldr	r6, [pc, #60]	@ (8007014 <sbrk_aligned+0x40>)
 8006fd8:	460c      	mov	r4, r1
 8006fda:	6831      	ldr	r1, [r6, #0]
 8006fdc:	4605      	mov	r5, r0
 8006fde:	b911      	cbnz	r1, 8006fe6 <sbrk_aligned+0x12>
 8006fe0:	f000 feaa 	bl	8007d38 <_sbrk_r>
 8006fe4:	6030      	str	r0, [r6, #0]
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4628      	mov	r0, r5
 8006fea:	f000 fea5 	bl	8007d38 <_sbrk_r>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	d103      	bne.n	8006ffa <sbrk_aligned+0x26>
 8006ff2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	bd70      	pop	{r4, r5, r6, pc}
 8006ffa:	1cc4      	adds	r4, r0, #3
 8006ffc:	f024 0403 	bic.w	r4, r4, #3
 8007000:	42a0      	cmp	r0, r4
 8007002:	d0f8      	beq.n	8006ff6 <sbrk_aligned+0x22>
 8007004:	1a21      	subs	r1, r4, r0
 8007006:	4628      	mov	r0, r5
 8007008:	f000 fe96 	bl	8007d38 <_sbrk_r>
 800700c:	3001      	adds	r0, #1
 800700e:	d1f2      	bne.n	8006ff6 <sbrk_aligned+0x22>
 8007010:	e7ef      	b.n	8006ff2 <sbrk_aligned+0x1e>
 8007012:	bf00      	nop
 8007014:	200009f0 	.word	0x200009f0

08007018 <_malloc_r>:
 8007018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800701c:	1ccd      	adds	r5, r1, #3
 800701e:	f025 0503 	bic.w	r5, r5, #3
 8007022:	3508      	adds	r5, #8
 8007024:	2d0c      	cmp	r5, #12
 8007026:	bf38      	it	cc
 8007028:	250c      	movcc	r5, #12
 800702a:	2d00      	cmp	r5, #0
 800702c:	4606      	mov	r6, r0
 800702e:	db01      	blt.n	8007034 <_malloc_r+0x1c>
 8007030:	42a9      	cmp	r1, r5
 8007032:	d904      	bls.n	800703e <_malloc_r+0x26>
 8007034:	230c      	movs	r3, #12
 8007036:	6033      	str	r3, [r6, #0]
 8007038:	2000      	movs	r0, #0
 800703a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800703e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007114 <_malloc_r+0xfc>
 8007042:	f000 f869 	bl	8007118 <__malloc_lock>
 8007046:	f8d8 3000 	ldr.w	r3, [r8]
 800704a:	461c      	mov	r4, r3
 800704c:	bb44      	cbnz	r4, 80070a0 <_malloc_r+0x88>
 800704e:	4629      	mov	r1, r5
 8007050:	4630      	mov	r0, r6
 8007052:	f7ff ffbf 	bl	8006fd4 <sbrk_aligned>
 8007056:	1c43      	adds	r3, r0, #1
 8007058:	4604      	mov	r4, r0
 800705a:	d158      	bne.n	800710e <_malloc_r+0xf6>
 800705c:	f8d8 4000 	ldr.w	r4, [r8]
 8007060:	4627      	mov	r7, r4
 8007062:	2f00      	cmp	r7, #0
 8007064:	d143      	bne.n	80070ee <_malloc_r+0xd6>
 8007066:	2c00      	cmp	r4, #0
 8007068:	d04b      	beq.n	8007102 <_malloc_r+0xea>
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	4639      	mov	r1, r7
 800706e:	4630      	mov	r0, r6
 8007070:	eb04 0903 	add.w	r9, r4, r3
 8007074:	f000 fe60 	bl	8007d38 <_sbrk_r>
 8007078:	4581      	cmp	r9, r0
 800707a:	d142      	bne.n	8007102 <_malloc_r+0xea>
 800707c:	6821      	ldr	r1, [r4, #0]
 800707e:	1a6d      	subs	r5, r5, r1
 8007080:	4629      	mov	r1, r5
 8007082:	4630      	mov	r0, r6
 8007084:	f7ff ffa6 	bl	8006fd4 <sbrk_aligned>
 8007088:	3001      	adds	r0, #1
 800708a:	d03a      	beq.n	8007102 <_malloc_r+0xea>
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	442b      	add	r3, r5
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	f8d8 3000 	ldr.w	r3, [r8]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	bb62      	cbnz	r2, 80070f4 <_malloc_r+0xdc>
 800709a:	f8c8 7000 	str.w	r7, [r8]
 800709e:	e00f      	b.n	80070c0 <_malloc_r+0xa8>
 80070a0:	6822      	ldr	r2, [r4, #0]
 80070a2:	1b52      	subs	r2, r2, r5
 80070a4:	d420      	bmi.n	80070e8 <_malloc_r+0xd0>
 80070a6:	2a0b      	cmp	r2, #11
 80070a8:	d917      	bls.n	80070da <_malloc_r+0xc2>
 80070aa:	1961      	adds	r1, r4, r5
 80070ac:	42a3      	cmp	r3, r4
 80070ae:	6025      	str	r5, [r4, #0]
 80070b0:	bf18      	it	ne
 80070b2:	6059      	strne	r1, [r3, #4]
 80070b4:	6863      	ldr	r3, [r4, #4]
 80070b6:	bf08      	it	eq
 80070b8:	f8c8 1000 	streq.w	r1, [r8]
 80070bc:	5162      	str	r2, [r4, r5]
 80070be:	604b      	str	r3, [r1, #4]
 80070c0:	4630      	mov	r0, r6
 80070c2:	f000 f82f 	bl	8007124 <__malloc_unlock>
 80070c6:	f104 000b 	add.w	r0, r4, #11
 80070ca:	1d23      	adds	r3, r4, #4
 80070cc:	f020 0007 	bic.w	r0, r0, #7
 80070d0:	1ac2      	subs	r2, r0, r3
 80070d2:	bf1c      	itt	ne
 80070d4:	1a1b      	subne	r3, r3, r0
 80070d6:	50a3      	strne	r3, [r4, r2]
 80070d8:	e7af      	b.n	800703a <_malloc_r+0x22>
 80070da:	6862      	ldr	r2, [r4, #4]
 80070dc:	42a3      	cmp	r3, r4
 80070de:	bf0c      	ite	eq
 80070e0:	f8c8 2000 	streq.w	r2, [r8]
 80070e4:	605a      	strne	r2, [r3, #4]
 80070e6:	e7eb      	b.n	80070c0 <_malloc_r+0xa8>
 80070e8:	4623      	mov	r3, r4
 80070ea:	6864      	ldr	r4, [r4, #4]
 80070ec:	e7ae      	b.n	800704c <_malloc_r+0x34>
 80070ee:	463c      	mov	r4, r7
 80070f0:	687f      	ldr	r7, [r7, #4]
 80070f2:	e7b6      	b.n	8007062 <_malloc_r+0x4a>
 80070f4:	461a      	mov	r2, r3
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	42a3      	cmp	r3, r4
 80070fa:	d1fb      	bne.n	80070f4 <_malloc_r+0xdc>
 80070fc:	2300      	movs	r3, #0
 80070fe:	6053      	str	r3, [r2, #4]
 8007100:	e7de      	b.n	80070c0 <_malloc_r+0xa8>
 8007102:	230c      	movs	r3, #12
 8007104:	6033      	str	r3, [r6, #0]
 8007106:	4630      	mov	r0, r6
 8007108:	f000 f80c 	bl	8007124 <__malloc_unlock>
 800710c:	e794      	b.n	8007038 <_malloc_r+0x20>
 800710e:	6005      	str	r5, [r0, #0]
 8007110:	e7d6      	b.n	80070c0 <_malloc_r+0xa8>
 8007112:	bf00      	nop
 8007114:	200009f4 	.word	0x200009f4

08007118 <__malloc_lock>:
 8007118:	4801      	ldr	r0, [pc, #4]	@ (8007120 <__malloc_lock+0x8>)
 800711a:	f7ff b8b8 	b.w	800628e <__retarget_lock_acquire_recursive>
 800711e:	bf00      	nop
 8007120:	200009ec 	.word	0x200009ec

08007124 <__malloc_unlock>:
 8007124:	4801      	ldr	r0, [pc, #4]	@ (800712c <__malloc_unlock+0x8>)
 8007126:	f7ff b8b3 	b.w	8006290 <__retarget_lock_release_recursive>
 800712a:	bf00      	nop
 800712c:	200009ec 	.word	0x200009ec

08007130 <_Balloc>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	69c6      	ldr	r6, [r0, #28]
 8007134:	4604      	mov	r4, r0
 8007136:	460d      	mov	r5, r1
 8007138:	b976      	cbnz	r6, 8007158 <_Balloc+0x28>
 800713a:	2010      	movs	r0, #16
 800713c:	f7ff ff42 	bl	8006fc4 <malloc>
 8007140:	4602      	mov	r2, r0
 8007142:	61e0      	str	r0, [r4, #28]
 8007144:	b920      	cbnz	r0, 8007150 <_Balloc+0x20>
 8007146:	4b18      	ldr	r3, [pc, #96]	@ (80071a8 <_Balloc+0x78>)
 8007148:	4818      	ldr	r0, [pc, #96]	@ (80071ac <_Balloc+0x7c>)
 800714a:	216b      	movs	r1, #107	@ 0x6b
 800714c:	f000 fe12 	bl	8007d74 <__assert_func>
 8007150:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007154:	6006      	str	r6, [r0, #0]
 8007156:	60c6      	str	r6, [r0, #12]
 8007158:	69e6      	ldr	r6, [r4, #28]
 800715a:	68f3      	ldr	r3, [r6, #12]
 800715c:	b183      	cbz	r3, 8007180 <_Balloc+0x50>
 800715e:	69e3      	ldr	r3, [r4, #28]
 8007160:	68db      	ldr	r3, [r3, #12]
 8007162:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007166:	b9b8      	cbnz	r0, 8007198 <_Balloc+0x68>
 8007168:	2101      	movs	r1, #1
 800716a:	fa01 f605 	lsl.w	r6, r1, r5
 800716e:	1d72      	adds	r2, r6, #5
 8007170:	0092      	lsls	r2, r2, #2
 8007172:	4620      	mov	r0, r4
 8007174:	f000 fe1c 	bl	8007db0 <_calloc_r>
 8007178:	b160      	cbz	r0, 8007194 <_Balloc+0x64>
 800717a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800717e:	e00e      	b.n	800719e <_Balloc+0x6e>
 8007180:	2221      	movs	r2, #33	@ 0x21
 8007182:	2104      	movs	r1, #4
 8007184:	4620      	mov	r0, r4
 8007186:	f000 fe13 	bl	8007db0 <_calloc_r>
 800718a:	69e3      	ldr	r3, [r4, #28]
 800718c:	60f0      	str	r0, [r6, #12]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1e4      	bne.n	800715e <_Balloc+0x2e>
 8007194:	2000      	movs	r0, #0
 8007196:	bd70      	pop	{r4, r5, r6, pc}
 8007198:	6802      	ldr	r2, [r0, #0]
 800719a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800719e:	2300      	movs	r3, #0
 80071a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80071a4:	e7f7      	b.n	8007196 <_Balloc+0x66>
 80071a6:	bf00      	nop
 80071a8:	08008481 	.word	0x08008481
 80071ac:	08008501 	.word	0x08008501

080071b0 <_Bfree>:
 80071b0:	b570      	push	{r4, r5, r6, lr}
 80071b2:	69c6      	ldr	r6, [r0, #28]
 80071b4:	4605      	mov	r5, r0
 80071b6:	460c      	mov	r4, r1
 80071b8:	b976      	cbnz	r6, 80071d8 <_Bfree+0x28>
 80071ba:	2010      	movs	r0, #16
 80071bc:	f7ff ff02 	bl	8006fc4 <malloc>
 80071c0:	4602      	mov	r2, r0
 80071c2:	61e8      	str	r0, [r5, #28]
 80071c4:	b920      	cbnz	r0, 80071d0 <_Bfree+0x20>
 80071c6:	4b09      	ldr	r3, [pc, #36]	@ (80071ec <_Bfree+0x3c>)
 80071c8:	4809      	ldr	r0, [pc, #36]	@ (80071f0 <_Bfree+0x40>)
 80071ca:	218f      	movs	r1, #143	@ 0x8f
 80071cc:	f000 fdd2 	bl	8007d74 <__assert_func>
 80071d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071d4:	6006      	str	r6, [r0, #0]
 80071d6:	60c6      	str	r6, [r0, #12]
 80071d8:	b13c      	cbz	r4, 80071ea <_Bfree+0x3a>
 80071da:	69eb      	ldr	r3, [r5, #28]
 80071dc:	6862      	ldr	r2, [r4, #4]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071e4:	6021      	str	r1, [r4, #0]
 80071e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071ea:	bd70      	pop	{r4, r5, r6, pc}
 80071ec:	08008481 	.word	0x08008481
 80071f0:	08008501 	.word	0x08008501

080071f4 <__multadd>:
 80071f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f8:	690d      	ldr	r5, [r1, #16]
 80071fa:	4607      	mov	r7, r0
 80071fc:	460c      	mov	r4, r1
 80071fe:	461e      	mov	r6, r3
 8007200:	f101 0c14 	add.w	ip, r1, #20
 8007204:	2000      	movs	r0, #0
 8007206:	f8dc 3000 	ldr.w	r3, [ip]
 800720a:	b299      	uxth	r1, r3
 800720c:	fb02 6101 	mla	r1, r2, r1, r6
 8007210:	0c1e      	lsrs	r6, r3, #16
 8007212:	0c0b      	lsrs	r3, r1, #16
 8007214:	fb02 3306 	mla	r3, r2, r6, r3
 8007218:	b289      	uxth	r1, r1
 800721a:	3001      	adds	r0, #1
 800721c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007220:	4285      	cmp	r5, r0
 8007222:	f84c 1b04 	str.w	r1, [ip], #4
 8007226:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800722a:	dcec      	bgt.n	8007206 <__multadd+0x12>
 800722c:	b30e      	cbz	r6, 8007272 <__multadd+0x7e>
 800722e:	68a3      	ldr	r3, [r4, #8]
 8007230:	42ab      	cmp	r3, r5
 8007232:	dc19      	bgt.n	8007268 <__multadd+0x74>
 8007234:	6861      	ldr	r1, [r4, #4]
 8007236:	4638      	mov	r0, r7
 8007238:	3101      	adds	r1, #1
 800723a:	f7ff ff79 	bl	8007130 <_Balloc>
 800723e:	4680      	mov	r8, r0
 8007240:	b928      	cbnz	r0, 800724e <__multadd+0x5a>
 8007242:	4602      	mov	r2, r0
 8007244:	4b0c      	ldr	r3, [pc, #48]	@ (8007278 <__multadd+0x84>)
 8007246:	480d      	ldr	r0, [pc, #52]	@ (800727c <__multadd+0x88>)
 8007248:	21ba      	movs	r1, #186	@ 0xba
 800724a:	f000 fd93 	bl	8007d74 <__assert_func>
 800724e:	6922      	ldr	r2, [r4, #16]
 8007250:	3202      	adds	r2, #2
 8007252:	f104 010c 	add.w	r1, r4, #12
 8007256:	0092      	lsls	r2, r2, #2
 8007258:	300c      	adds	r0, #12
 800725a:	f000 fd7d 	bl	8007d58 <memcpy>
 800725e:	4621      	mov	r1, r4
 8007260:	4638      	mov	r0, r7
 8007262:	f7ff ffa5 	bl	80071b0 <_Bfree>
 8007266:	4644      	mov	r4, r8
 8007268:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800726c:	3501      	adds	r5, #1
 800726e:	615e      	str	r6, [r3, #20]
 8007270:	6125      	str	r5, [r4, #16]
 8007272:	4620      	mov	r0, r4
 8007274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007278:	080084f0 	.word	0x080084f0
 800727c:	08008501 	.word	0x08008501

08007280 <__hi0bits>:
 8007280:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007284:	4603      	mov	r3, r0
 8007286:	bf36      	itet	cc
 8007288:	0403      	lslcc	r3, r0, #16
 800728a:	2000      	movcs	r0, #0
 800728c:	2010      	movcc	r0, #16
 800728e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007292:	bf3c      	itt	cc
 8007294:	021b      	lslcc	r3, r3, #8
 8007296:	3008      	addcc	r0, #8
 8007298:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800729c:	bf3c      	itt	cc
 800729e:	011b      	lslcc	r3, r3, #4
 80072a0:	3004      	addcc	r0, #4
 80072a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072a6:	bf3c      	itt	cc
 80072a8:	009b      	lslcc	r3, r3, #2
 80072aa:	3002      	addcc	r0, #2
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	db05      	blt.n	80072bc <__hi0bits+0x3c>
 80072b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80072b4:	f100 0001 	add.w	r0, r0, #1
 80072b8:	bf08      	it	eq
 80072ba:	2020      	moveq	r0, #32
 80072bc:	4770      	bx	lr

080072be <__lo0bits>:
 80072be:	6803      	ldr	r3, [r0, #0]
 80072c0:	4602      	mov	r2, r0
 80072c2:	f013 0007 	ands.w	r0, r3, #7
 80072c6:	d00b      	beq.n	80072e0 <__lo0bits+0x22>
 80072c8:	07d9      	lsls	r1, r3, #31
 80072ca:	d421      	bmi.n	8007310 <__lo0bits+0x52>
 80072cc:	0798      	lsls	r0, r3, #30
 80072ce:	bf49      	itett	mi
 80072d0:	085b      	lsrmi	r3, r3, #1
 80072d2:	089b      	lsrpl	r3, r3, #2
 80072d4:	2001      	movmi	r0, #1
 80072d6:	6013      	strmi	r3, [r2, #0]
 80072d8:	bf5c      	itt	pl
 80072da:	6013      	strpl	r3, [r2, #0]
 80072dc:	2002      	movpl	r0, #2
 80072de:	4770      	bx	lr
 80072e0:	b299      	uxth	r1, r3
 80072e2:	b909      	cbnz	r1, 80072e8 <__lo0bits+0x2a>
 80072e4:	0c1b      	lsrs	r3, r3, #16
 80072e6:	2010      	movs	r0, #16
 80072e8:	b2d9      	uxtb	r1, r3
 80072ea:	b909      	cbnz	r1, 80072f0 <__lo0bits+0x32>
 80072ec:	3008      	adds	r0, #8
 80072ee:	0a1b      	lsrs	r3, r3, #8
 80072f0:	0719      	lsls	r1, r3, #28
 80072f2:	bf04      	itt	eq
 80072f4:	091b      	lsreq	r3, r3, #4
 80072f6:	3004      	addeq	r0, #4
 80072f8:	0799      	lsls	r1, r3, #30
 80072fa:	bf04      	itt	eq
 80072fc:	089b      	lsreq	r3, r3, #2
 80072fe:	3002      	addeq	r0, #2
 8007300:	07d9      	lsls	r1, r3, #31
 8007302:	d403      	bmi.n	800730c <__lo0bits+0x4e>
 8007304:	085b      	lsrs	r3, r3, #1
 8007306:	f100 0001 	add.w	r0, r0, #1
 800730a:	d003      	beq.n	8007314 <__lo0bits+0x56>
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	4770      	bx	lr
 8007310:	2000      	movs	r0, #0
 8007312:	4770      	bx	lr
 8007314:	2020      	movs	r0, #32
 8007316:	4770      	bx	lr

08007318 <__i2b>:
 8007318:	b510      	push	{r4, lr}
 800731a:	460c      	mov	r4, r1
 800731c:	2101      	movs	r1, #1
 800731e:	f7ff ff07 	bl	8007130 <_Balloc>
 8007322:	4602      	mov	r2, r0
 8007324:	b928      	cbnz	r0, 8007332 <__i2b+0x1a>
 8007326:	4b05      	ldr	r3, [pc, #20]	@ (800733c <__i2b+0x24>)
 8007328:	4805      	ldr	r0, [pc, #20]	@ (8007340 <__i2b+0x28>)
 800732a:	f240 1145 	movw	r1, #325	@ 0x145
 800732e:	f000 fd21 	bl	8007d74 <__assert_func>
 8007332:	2301      	movs	r3, #1
 8007334:	6144      	str	r4, [r0, #20]
 8007336:	6103      	str	r3, [r0, #16]
 8007338:	bd10      	pop	{r4, pc}
 800733a:	bf00      	nop
 800733c:	080084f0 	.word	0x080084f0
 8007340:	08008501 	.word	0x08008501

08007344 <__multiply>:
 8007344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007348:	4614      	mov	r4, r2
 800734a:	690a      	ldr	r2, [r1, #16]
 800734c:	6923      	ldr	r3, [r4, #16]
 800734e:	429a      	cmp	r2, r3
 8007350:	bfa8      	it	ge
 8007352:	4623      	movge	r3, r4
 8007354:	460f      	mov	r7, r1
 8007356:	bfa4      	itt	ge
 8007358:	460c      	movge	r4, r1
 800735a:	461f      	movge	r7, r3
 800735c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007360:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007364:	68a3      	ldr	r3, [r4, #8]
 8007366:	6861      	ldr	r1, [r4, #4]
 8007368:	eb0a 0609 	add.w	r6, sl, r9
 800736c:	42b3      	cmp	r3, r6
 800736e:	b085      	sub	sp, #20
 8007370:	bfb8      	it	lt
 8007372:	3101      	addlt	r1, #1
 8007374:	f7ff fedc 	bl	8007130 <_Balloc>
 8007378:	b930      	cbnz	r0, 8007388 <__multiply+0x44>
 800737a:	4602      	mov	r2, r0
 800737c:	4b44      	ldr	r3, [pc, #272]	@ (8007490 <__multiply+0x14c>)
 800737e:	4845      	ldr	r0, [pc, #276]	@ (8007494 <__multiply+0x150>)
 8007380:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007384:	f000 fcf6 	bl	8007d74 <__assert_func>
 8007388:	f100 0514 	add.w	r5, r0, #20
 800738c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007390:	462b      	mov	r3, r5
 8007392:	2200      	movs	r2, #0
 8007394:	4543      	cmp	r3, r8
 8007396:	d321      	bcc.n	80073dc <__multiply+0x98>
 8007398:	f107 0114 	add.w	r1, r7, #20
 800739c:	f104 0214 	add.w	r2, r4, #20
 80073a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80073a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80073a8:	9302      	str	r3, [sp, #8]
 80073aa:	1b13      	subs	r3, r2, r4
 80073ac:	3b15      	subs	r3, #21
 80073ae:	f023 0303 	bic.w	r3, r3, #3
 80073b2:	3304      	adds	r3, #4
 80073b4:	f104 0715 	add.w	r7, r4, #21
 80073b8:	42ba      	cmp	r2, r7
 80073ba:	bf38      	it	cc
 80073bc:	2304      	movcc	r3, #4
 80073be:	9301      	str	r3, [sp, #4]
 80073c0:	9b02      	ldr	r3, [sp, #8]
 80073c2:	9103      	str	r1, [sp, #12]
 80073c4:	428b      	cmp	r3, r1
 80073c6:	d80c      	bhi.n	80073e2 <__multiply+0x9e>
 80073c8:	2e00      	cmp	r6, #0
 80073ca:	dd03      	ble.n	80073d4 <__multiply+0x90>
 80073cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d05b      	beq.n	800748c <__multiply+0x148>
 80073d4:	6106      	str	r6, [r0, #16]
 80073d6:	b005      	add	sp, #20
 80073d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073dc:	f843 2b04 	str.w	r2, [r3], #4
 80073e0:	e7d8      	b.n	8007394 <__multiply+0x50>
 80073e2:	f8b1 a000 	ldrh.w	sl, [r1]
 80073e6:	f1ba 0f00 	cmp.w	sl, #0
 80073ea:	d024      	beq.n	8007436 <__multiply+0xf2>
 80073ec:	f104 0e14 	add.w	lr, r4, #20
 80073f0:	46a9      	mov	r9, r5
 80073f2:	f04f 0c00 	mov.w	ip, #0
 80073f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80073fa:	f8d9 3000 	ldr.w	r3, [r9]
 80073fe:	fa1f fb87 	uxth.w	fp, r7
 8007402:	b29b      	uxth	r3, r3
 8007404:	fb0a 330b 	mla	r3, sl, fp, r3
 8007408:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800740c:	f8d9 7000 	ldr.w	r7, [r9]
 8007410:	4463      	add	r3, ip
 8007412:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007416:	fb0a c70b 	mla	r7, sl, fp, ip
 800741a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800741e:	b29b      	uxth	r3, r3
 8007420:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007424:	4572      	cmp	r2, lr
 8007426:	f849 3b04 	str.w	r3, [r9], #4
 800742a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800742e:	d8e2      	bhi.n	80073f6 <__multiply+0xb2>
 8007430:	9b01      	ldr	r3, [sp, #4]
 8007432:	f845 c003 	str.w	ip, [r5, r3]
 8007436:	9b03      	ldr	r3, [sp, #12]
 8007438:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800743c:	3104      	adds	r1, #4
 800743e:	f1b9 0f00 	cmp.w	r9, #0
 8007442:	d021      	beq.n	8007488 <__multiply+0x144>
 8007444:	682b      	ldr	r3, [r5, #0]
 8007446:	f104 0c14 	add.w	ip, r4, #20
 800744a:	46ae      	mov	lr, r5
 800744c:	f04f 0a00 	mov.w	sl, #0
 8007450:	f8bc b000 	ldrh.w	fp, [ip]
 8007454:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007458:	fb09 770b 	mla	r7, r9, fp, r7
 800745c:	4457      	add	r7, sl
 800745e:	b29b      	uxth	r3, r3
 8007460:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007464:	f84e 3b04 	str.w	r3, [lr], #4
 8007468:	f85c 3b04 	ldr.w	r3, [ip], #4
 800746c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007470:	f8be 3000 	ldrh.w	r3, [lr]
 8007474:	fb09 330a 	mla	r3, r9, sl, r3
 8007478:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800747c:	4562      	cmp	r2, ip
 800747e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007482:	d8e5      	bhi.n	8007450 <__multiply+0x10c>
 8007484:	9f01      	ldr	r7, [sp, #4]
 8007486:	51eb      	str	r3, [r5, r7]
 8007488:	3504      	adds	r5, #4
 800748a:	e799      	b.n	80073c0 <__multiply+0x7c>
 800748c:	3e01      	subs	r6, #1
 800748e:	e79b      	b.n	80073c8 <__multiply+0x84>
 8007490:	080084f0 	.word	0x080084f0
 8007494:	08008501 	.word	0x08008501

08007498 <__pow5mult>:
 8007498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800749c:	4615      	mov	r5, r2
 800749e:	f012 0203 	ands.w	r2, r2, #3
 80074a2:	4607      	mov	r7, r0
 80074a4:	460e      	mov	r6, r1
 80074a6:	d007      	beq.n	80074b8 <__pow5mult+0x20>
 80074a8:	4c25      	ldr	r4, [pc, #148]	@ (8007540 <__pow5mult+0xa8>)
 80074aa:	3a01      	subs	r2, #1
 80074ac:	2300      	movs	r3, #0
 80074ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074b2:	f7ff fe9f 	bl	80071f4 <__multadd>
 80074b6:	4606      	mov	r6, r0
 80074b8:	10ad      	asrs	r5, r5, #2
 80074ba:	d03d      	beq.n	8007538 <__pow5mult+0xa0>
 80074bc:	69fc      	ldr	r4, [r7, #28]
 80074be:	b97c      	cbnz	r4, 80074e0 <__pow5mult+0x48>
 80074c0:	2010      	movs	r0, #16
 80074c2:	f7ff fd7f 	bl	8006fc4 <malloc>
 80074c6:	4602      	mov	r2, r0
 80074c8:	61f8      	str	r0, [r7, #28]
 80074ca:	b928      	cbnz	r0, 80074d8 <__pow5mult+0x40>
 80074cc:	4b1d      	ldr	r3, [pc, #116]	@ (8007544 <__pow5mult+0xac>)
 80074ce:	481e      	ldr	r0, [pc, #120]	@ (8007548 <__pow5mult+0xb0>)
 80074d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80074d4:	f000 fc4e 	bl	8007d74 <__assert_func>
 80074d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074dc:	6004      	str	r4, [r0, #0]
 80074de:	60c4      	str	r4, [r0, #12]
 80074e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80074e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074e8:	b94c      	cbnz	r4, 80074fe <__pow5mult+0x66>
 80074ea:	f240 2171 	movw	r1, #625	@ 0x271
 80074ee:	4638      	mov	r0, r7
 80074f0:	f7ff ff12 	bl	8007318 <__i2b>
 80074f4:	2300      	movs	r3, #0
 80074f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80074fa:	4604      	mov	r4, r0
 80074fc:	6003      	str	r3, [r0, #0]
 80074fe:	f04f 0900 	mov.w	r9, #0
 8007502:	07eb      	lsls	r3, r5, #31
 8007504:	d50a      	bpl.n	800751c <__pow5mult+0x84>
 8007506:	4631      	mov	r1, r6
 8007508:	4622      	mov	r2, r4
 800750a:	4638      	mov	r0, r7
 800750c:	f7ff ff1a 	bl	8007344 <__multiply>
 8007510:	4631      	mov	r1, r6
 8007512:	4680      	mov	r8, r0
 8007514:	4638      	mov	r0, r7
 8007516:	f7ff fe4b 	bl	80071b0 <_Bfree>
 800751a:	4646      	mov	r6, r8
 800751c:	106d      	asrs	r5, r5, #1
 800751e:	d00b      	beq.n	8007538 <__pow5mult+0xa0>
 8007520:	6820      	ldr	r0, [r4, #0]
 8007522:	b938      	cbnz	r0, 8007534 <__pow5mult+0x9c>
 8007524:	4622      	mov	r2, r4
 8007526:	4621      	mov	r1, r4
 8007528:	4638      	mov	r0, r7
 800752a:	f7ff ff0b 	bl	8007344 <__multiply>
 800752e:	6020      	str	r0, [r4, #0]
 8007530:	f8c0 9000 	str.w	r9, [r0]
 8007534:	4604      	mov	r4, r0
 8007536:	e7e4      	b.n	8007502 <__pow5mult+0x6a>
 8007538:	4630      	mov	r0, r6
 800753a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800753e:	bf00      	nop
 8007540:	0800855c 	.word	0x0800855c
 8007544:	08008481 	.word	0x08008481
 8007548:	08008501 	.word	0x08008501

0800754c <__lshift>:
 800754c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007550:	460c      	mov	r4, r1
 8007552:	6849      	ldr	r1, [r1, #4]
 8007554:	6923      	ldr	r3, [r4, #16]
 8007556:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800755a:	68a3      	ldr	r3, [r4, #8]
 800755c:	4607      	mov	r7, r0
 800755e:	4691      	mov	r9, r2
 8007560:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007564:	f108 0601 	add.w	r6, r8, #1
 8007568:	42b3      	cmp	r3, r6
 800756a:	db0b      	blt.n	8007584 <__lshift+0x38>
 800756c:	4638      	mov	r0, r7
 800756e:	f7ff fddf 	bl	8007130 <_Balloc>
 8007572:	4605      	mov	r5, r0
 8007574:	b948      	cbnz	r0, 800758a <__lshift+0x3e>
 8007576:	4602      	mov	r2, r0
 8007578:	4b28      	ldr	r3, [pc, #160]	@ (800761c <__lshift+0xd0>)
 800757a:	4829      	ldr	r0, [pc, #164]	@ (8007620 <__lshift+0xd4>)
 800757c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007580:	f000 fbf8 	bl	8007d74 <__assert_func>
 8007584:	3101      	adds	r1, #1
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	e7ee      	b.n	8007568 <__lshift+0x1c>
 800758a:	2300      	movs	r3, #0
 800758c:	f100 0114 	add.w	r1, r0, #20
 8007590:	f100 0210 	add.w	r2, r0, #16
 8007594:	4618      	mov	r0, r3
 8007596:	4553      	cmp	r3, sl
 8007598:	db33      	blt.n	8007602 <__lshift+0xb6>
 800759a:	6920      	ldr	r0, [r4, #16]
 800759c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80075a0:	f104 0314 	add.w	r3, r4, #20
 80075a4:	f019 091f 	ands.w	r9, r9, #31
 80075a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075b0:	d02b      	beq.n	800760a <__lshift+0xbe>
 80075b2:	f1c9 0e20 	rsb	lr, r9, #32
 80075b6:	468a      	mov	sl, r1
 80075b8:	2200      	movs	r2, #0
 80075ba:	6818      	ldr	r0, [r3, #0]
 80075bc:	fa00 f009 	lsl.w	r0, r0, r9
 80075c0:	4310      	orrs	r0, r2
 80075c2:	f84a 0b04 	str.w	r0, [sl], #4
 80075c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80075ca:	459c      	cmp	ip, r3
 80075cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80075d0:	d8f3      	bhi.n	80075ba <__lshift+0x6e>
 80075d2:	ebac 0304 	sub.w	r3, ip, r4
 80075d6:	3b15      	subs	r3, #21
 80075d8:	f023 0303 	bic.w	r3, r3, #3
 80075dc:	3304      	adds	r3, #4
 80075de:	f104 0015 	add.w	r0, r4, #21
 80075e2:	4584      	cmp	ip, r0
 80075e4:	bf38      	it	cc
 80075e6:	2304      	movcc	r3, #4
 80075e8:	50ca      	str	r2, [r1, r3]
 80075ea:	b10a      	cbz	r2, 80075f0 <__lshift+0xa4>
 80075ec:	f108 0602 	add.w	r6, r8, #2
 80075f0:	3e01      	subs	r6, #1
 80075f2:	4638      	mov	r0, r7
 80075f4:	612e      	str	r6, [r5, #16]
 80075f6:	4621      	mov	r1, r4
 80075f8:	f7ff fdda 	bl	80071b0 <_Bfree>
 80075fc:	4628      	mov	r0, r5
 80075fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007602:	f842 0f04 	str.w	r0, [r2, #4]!
 8007606:	3301      	adds	r3, #1
 8007608:	e7c5      	b.n	8007596 <__lshift+0x4a>
 800760a:	3904      	subs	r1, #4
 800760c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007610:	f841 2f04 	str.w	r2, [r1, #4]!
 8007614:	459c      	cmp	ip, r3
 8007616:	d8f9      	bhi.n	800760c <__lshift+0xc0>
 8007618:	e7ea      	b.n	80075f0 <__lshift+0xa4>
 800761a:	bf00      	nop
 800761c:	080084f0 	.word	0x080084f0
 8007620:	08008501 	.word	0x08008501

08007624 <__mcmp>:
 8007624:	690a      	ldr	r2, [r1, #16]
 8007626:	4603      	mov	r3, r0
 8007628:	6900      	ldr	r0, [r0, #16]
 800762a:	1a80      	subs	r0, r0, r2
 800762c:	b530      	push	{r4, r5, lr}
 800762e:	d10e      	bne.n	800764e <__mcmp+0x2a>
 8007630:	3314      	adds	r3, #20
 8007632:	3114      	adds	r1, #20
 8007634:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007638:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800763c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007640:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007644:	4295      	cmp	r5, r2
 8007646:	d003      	beq.n	8007650 <__mcmp+0x2c>
 8007648:	d205      	bcs.n	8007656 <__mcmp+0x32>
 800764a:	f04f 30ff 	mov.w	r0, #4294967295
 800764e:	bd30      	pop	{r4, r5, pc}
 8007650:	42a3      	cmp	r3, r4
 8007652:	d3f3      	bcc.n	800763c <__mcmp+0x18>
 8007654:	e7fb      	b.n	800764e <__mcmp+0x2a>
 8007656:	2001      	movs	r0, #1
 8007658:	e7f9      	b.n	800764e <__mcmp+0x2a>
	...

0800765c <__mdiff>:
 800765c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007660:	4689      	mov	r9, r1
 8007662:	4606      	mov	r6, r0
 8007664:	4611      	mov	r1, r2
 8007666:	4648      	mov	r0, r9
 8007668:	4614      	mov	r4, r2
 800766a:	f7ff ffdb 	bl	8007624 <__mcmp>
 800766e:	1e05      	subs	r5, r0, #0
 8007670:	d112      	bne.n	8007698 <__mdiff+0x3c>
 8007672:	4629      	mov	r1, r5
 8007674:	4630      	mov	r0, r6
 8007676:	f7ff fd5b 	bl	8007130 <_Balloc>
 800767a:	4602      	mov	r2, r0
 800767c:	b928      	cbnz	r0, 800768a <__mdiff+0x2e>
 800767e:	4b3f      	ldr	r3, [pc, #252]	@ (800777c <__mdiff+0x120>)
 8007680:	f240 2137 	movw	r1, #567	@ 0x237
 8007684:	483e      	ldr	r0, [pc, #248]	@ (8007780 <__mdiff+0x124>)
 8007686:	f000 fb75 	bl	8007d74 <__assert_func>
 800768a:	2301      	movs	r3, #1
 800768c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007690:	4610      	mov	r0, r2
 8007692:	b003      	add	sp, #12
 8007694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007698:	bfbc      	itt	lt
 800769a:	464b      	movlt	r3, r9
 800769c:	46a1      	movlt	r9, r4
 800769e:	4630      	mov	r0, r6
 80076a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80076a4:	bfba      	itte	lt
 80076a6:	461c      	movlt	r4, r3
 80076a8:	2501      	movlt	r5, #1
 80076aa:	2500      	movge	r5, #0
 80076ac:	f7ff fd40 	bl	8007130 <_Balloc>
 80076b0:	4602      	mov	r2, r0
 80076b2:	b918      	cbnz	r0, 80076bc <__mdiff+0x60>
 80076b4:	4b31      	ldr	r3, [pc, #196]	@ (800777c <__mdiff+0x120>)
 80076b6:	f240 2145 	movw	r1, #581	@ 0x245
 80076ba:	e7e3      	b.n	8007684 <__mdiff+0x28>
 80076bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80076c0:	6926      	ldr	r6, [r4, #16]
 80076c2:	60c5      	str	r5, [r0, #12]
 80076c4:	f109 0310 	add.w	r3, r9, #16
 80076c8:	f109 0514 	add.w	r5, r9, #20
 80076cc:	f104 0e14 	add.w	lr, r4, #20
 80076d0:	f100 0b14 	add.w	fp, r0, #20
 80076d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80076d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	46d9      	mov	r9, fp
 80076e0:	f04f 0c00 	mov.w	ip, #0
 80076e4:	9b01      	ldr	r3, [sp, #4]
 80076e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80076ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80076ee:	9301      	str	r3, [sp, #4]
 80076f0:	fa1f f38a 	uxth.w	r3, sl
 80076f4:	4619      	mov	r1, r3
 80076f6:	b283      	uxth	r3, r0
 80076f8:	1acb      	subs	r3, r1, r3
 80076fa:	0c00      	lsrs	r0, r0, #16
 80076fc:	4463      	add	r3, ip
 80076fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007702:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007706:	b29b      	uxth	r3, r3
 8007708:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800770c:	4576      	cmp	r6, lr
 800770e:	f849 3b04 	str.w	r3, [r9], #4
 8007712:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007716:	d8e5      	bhi.n	80076e4 <__mdiff+0x88>
 8007718:	1b33      	subs	r3, r6, r4
 800771a:	3b15      	subs	r3, #21
 800771c:	f023 0303 	bic.w	r3, r3, #3
 8007720:	3415      	adds	r4, #21
 8007722:	3304      	adds	r3, #4
 8007724:	42a6      	cmp	r6, r4
 8007726:	bf38      	it	cc
 8007728:	2304      	movcc	r3, #4
 800772a:	441d      	add	r5, r3
 800772c:	445b      	add	r3, fp
 800772e:	461e      	mov	r6, r3
 8007730:	462c      	mov	r4, r5
 8007732:	4544      	cmp	r4, r8
 8007734:	d30e      	bcc.n	8007754 <__mdiff+0xf8>
 8007736:	f108 0103 	add.w	r1, r8, #3
 800773a:	1b49      	subs	r1, r1, r5
 800773c:	f021 0103 	bic.w	r1, r1, #3
 8007740:	3d03      	subs	r5, #3
 8007742:	45a8      	cmp	r8, r5
 8007744:	bf38      	it	cc
 8007746:	2100      	movcc	r1, #0
 8007748:	440b      	add	r3, r1
 800774a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800774e:	b191      	cbz	r1, 8007776 <__mdiff+0x11a>
 8007750:	6117      	str	r7, [r2, #16]
 8007752:	e79d      	b.n	8007690 <__mdiff+0x34>
 8007754:	f854 1b04 	ldr.w	r1, [r4], #4
 8007758:	46e6      	mov	lr, ip
 800775a:	0c08      	lsrs	r0, r1, #16
 800775c:	fa1c fc81 	uxtah	ip, ip, r1
 8007760:	4471      	add	r1, lr
 8007762:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007766:	b289      	uxth	r1, r1
 8007768:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800776c:	f846 1b04 	str.w	r1, [r6], #4
 8007770:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007774:	e7dd      	b.n	8007732 <__mdiff+0xd6>
 8007776:	3f01      	subs	r7, #1
 8007778:	e7e7      	b.n	800774a <__mdiff+0xee>
 800777a:	bf00      	nop
 800777c:	080084f0 	.word	0x080084f0
 8007780:	08008501 	.word	0x08008501

08007784 <__d2b>:
 8007784:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007788:	460f      	mov	r7, r1
 800778a:	2101      	movs	r1, #1
 800778c:	ec59 8b10 	vmov	r8, r9, d0
 8007790:	4616      	mov	r6, r2
 8007792:	f7ff fccd 	bl	8007130 <_Balloc>
 8007796:	4604      	mov	r4, r0
 8007798:	b930      	cbnz	r0, 80077a8 <__d2b+0x24>
 800779a:	4602      	mov	r2, r0
 800779c:	4b23      	ldr	r3, [pc, #140]	@ (800782c <__d2b+0xa8>)
 800779e:	4824      	ldr	r0, [pc, #144]	@ (8007830 <__d2b+0xac>)
 80077a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80077a4:	f000 fae6 	bl	8007d74 <__assert_func>
 80077a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80077ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077b0:	b10d      	cbz	r5, 80077b6 <__d2b+0x32>
 80077b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077b6:	9301      	str	r3, [sp, #4]
 80077b8:	f1b8 0300 	subs.w	r3, r8, #0
 80077bc:	d023      	beq.n	8007806 <__d2b+0x82>
 80077be:	4668      	mov	r0, sp
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	f7ff fd7c 	bl	80072be <__lo0bits>
 80077c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80077ca:	b1d0      	cbz	r0, 8007802 <__d2b+0x7e>
 80077cc:	f1c0 0320 	rsb	r3, r0, #32
 80077d0:	fa02 f303 	lsl.w	r3, r2, r3
 80077d4:	430b      	orrs	r3, r1
 80077d6:	40c2      	lsrs	r2, r0
 80077d8:	6163      	str	r3, [r4, #20]
 80077da:	9201      	str	r2, [sp, #4]
 80077dc:	9b01      	ldr	r3, [sp, #4]
 80077de:	61a3      	str	r3, [r4, #24]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	bf0c      	ite	eq
 80077e4:	2201      	moveq	r2, #1
 80077e6:	2202      	movne	r2, #2
 80077e8:	6122      	str	r2, [r4, #16]
 80077ea:	b1a5      	cbz	r5, 8007816 <__d2b+0x92>
 80077ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80077f0:	4405      	add	r5, r0
 80077f2:	603d      	str	r5, [r7, #0]
 80077f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80077f8:	6030      	str	r0, [r6, #0]
 80077fa:	4620      	mov	r0, r4
 80077fc:	b003      	add	sp, #12
 80077fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007802:	6161      	str	r1, [r4, #20]
 8007804:	e7ea      	b.n	80077dc <__d2b+0x58>
 8007806:	a801      	add	r0, sp, #4
 8007808:	f7ff fd59 	bl	80072be <__lo0bits>
 800780c:	9b01      	ldr	r3, [sp, #4]
 800780e:	6163      	str	r3, [r4, #20]
 8007810:	3020      	adds	r0, #32
 8007812:	2201      	movs	r2, #1
 8007814:	e7e8      	b.n	80077e8 <__d2b+0x64>
 8007816:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800781a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800781e:	6038      	str	r0, [r7, #0]
 8007820:	6918      	ldr	r0, [r3, #16]
 8007822:	f7ff fd2d 	bl	8007280 <__hi0bits>
 8007826:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800782a:	e7e5      	b.n	80077f8 <__d2b+0x74>
 800782c:	080084f0 	.word	0x080084f0
 8007830:	08008501 	.word	0x08008501

08007834 <__sfputc_r>:
 8007834:	6893      	ldr	r3, [r2, #8]
 8007836:	3b01      	subs	r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	b410      	push	{r4}
 800783c:	6093      	str	r3, [r2, #8]
 800783e:	da08      	bge.n	8007852 <__sfputc_r+0x1e>
 8007840:	6994      	ldr	r4, [r2, #24]
 8007842:	42a3      	cmp	r3, r4
 8007844:	db01      	blt.n	800784a <__sfputc_r+0x16>
 8007846:	290a      	cmp	r1, #10
 8007848:	d103      	bne.n	8007852 <__sfputc_r+0x1e>
 800784a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800784e:	f000 b9df 	b.w	8007c10 <__swbuf_r>
 8007852:	6813      	ldr	r3, [r2, #0]
 8007854:	1c58      	adds	r0, r3, #1
 8007856:	6010      	str	r0, [r2, #0]
 8007858:	7019      	strb	r1, [r3, #0]
 800785a:	4608      	mov	r0, r1
 800785c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007860:	4770      	bx	lr

08007862 <__sfputs_r>:
 8007862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007864:	4606      	mov	r6, r0
 8007866:	460f      	mov	r7, r1
 8007868:	4614      	mov	r4, r2
 800786a:	18d5      	adds	r5, r2, r3
 800786c:	42ac      	cmp	r4, r5
 800786e:	d101      	bne.n	8007874 <__sfputs_r+0x12>
 8007870:	2000      	movs	r0, #0
 8007872:	e007      	b.n	8007884 <__sfputs_r+0x22>
 8007874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007878:	463a      	mov	r2, r7
 800787a:	4630      	mov	r0, r6
 800787c:	f7ff ffda 	bl	8007834 <__sfputc_r>
 8007880:	1c43      	adds	r3, r0, #1
 8007882:	d1f3      	bne.n	800786c <__sfputs_r+0xa>
 8007884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007888 <_vfiprintf_r>:
 8007888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788c:	460d      	mov	r5, r1
 800788e:	b09d      	sub	sp, #116	@ 0x74
 8007890:	4614      	mov	r4, r2
 8007892:	4698      	mov	r8, r3
 8007894:	4606      	mov	r6, r0
 8007896:	b118      	cbz	r0, 80078a0 <_vfiprintf_r+0x18>
 8007898:	6a03      	ldr	r3, [r0, #32]
 800789a:	b90b      	cbnz	r3, 80078a0 <_vfiprintf_r+0x18>
 800789c:	f7fe fbee 	bl	800607c <__sinit>
 80078a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078a2:	07d9      	lsls	r1, r3, #31
 80078a4:	d405      	bmi.n	80078b2 <_vfiprintf_r+0x2a>
 80078a6:	89ab      	ldrh	r3, [r5, #12]
 80078a8:	059a      	lsls	r2, r3, #22
 80078aa:	d402      	bmi.n	80078b2 <_vfiprintf_r+0x2a>
 80078ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ae:	f7fe fcee 	bl	800628e <__retarget_lock_acquire_recursive>
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	071b      	lsls	r3, r3, #28
 80078b6:	d501      	bpl.n	80078bc <_vfiprintf_r+0x34>
 80078b8:	692b      	ldr	r3, [r5, #16]
 80078ba:	b99b      	cbnz	r3, 80078e4 <_vfiprintf_r+0x5c>
 80078bc:	4629      	mov	r1, r5
 80078be:	4630      	mov	r0, r6
 80078c0:	f000 f9e4 	bl	8007c8c <__swsetup_r>
 80078c4:	b170      	cbz	r0, 80078e4 <_vfiprintf_r+0x5c>
 80078c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078c8:	07dc      	lsls	r4, r3, #31
 80078ca:	d504      	bpl.n	80078d6 <_vfiprintf_r+0x4e>
 80078cc:	f04f 30ff 	mov.w	r0, #4294967295
 80078d0:	b01d      	add	sp, #116	@ 0x74
 80078d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d6:	89ab      	ldrh	r3, [r5, #12]
 80078d8:	0598      	lsls	r0, r3, #22
 80078da:	d4f7      	bmi.n	80078cc <_vfiprintf_r+0x44>
 80078dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078de:	f7fe fcd7 	bl	8006290 <__retarget_lock_release_recursive>
 80078e2:	e7f3      	b.n	80078cc <_vfiprintf_r+0x44>
 80078e4:	2300      	movs	r3, #0
 80078e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80078e8:	2320      	movs	r3, #32
 80078ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80078f2:	2330      	movs	r3, #48	@ 0x30
 80078f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007aa4 <_vfiprintf_r+0x21c>
 80078f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078fc:	f04f 0901 	mov.w	r9, #1
 8007900:	4623      	mov	r3, r4
 8007902:	469a      	mov	sl, r3
 8007904:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007908:	b10a      	cbz	r2, 800790e <_vfiprintf_r+0x86>
 800790a:	2a25      	cmp	r2, #37	@ 0x25
 800790c:	d1f9      	bne.n	8007902 <_vfiprintf_r+0x7a>
 800790e:	ebba 0b04 	subs.w	fp, sl, r4
 8007912:	d00b      	beq.n	800792c <_vfiprintf_r+0xa4>
 8007914:	465b      	mov	r3, fp
 8007916:	4622      	mov	r2, r4
 8007918:	4629      	mov	r1, r5
 800791a:	4630      	mov	r0, r6
 800791c:	f7ff ffa1 	bl	8007862 <__sfputs_r>
 8007920:	3001      	adds	r0, #1
 8007922:	f000 80a7 	beq.w	8007a74 <_vfiprintf_r+0x1ec>
 8007926:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007928:	445a      	add	r2, fp
 800792a:	9209      	str	r2, [sp, #36]	@ 0x24
 800792c:	f89a 3000 	ldrb.w	r3, [sl]
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 809f 	beq.w	8007a74 <_vfiprintf_r+0x1ec>
 8007936:	2300      	movs	r3, #0
 8007938:	f04f 32ff 	mov.w	r2, #4294967295
 800793c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007940:	f10a 0a01 	add.w	sl, sl, #1
 8007944:	9304      	str	r3, [sp, #16]
 8007946:	9307      	str	r3, [sp, #28]
 8007948:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800794c:	931a      	str	r3, [sp, #104]	@ 0x68
 800794e:	4654      	mov	r4, sl
 8007950:	2205      	movs	r2, #5
 8007952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007956:	4853      	ldr	r0, [pc, #332]	@ (8007aa4 <_vfiprintf_r+0x21c>)
 8007958:	f7f8 fc62 	bl	8000220 <memchr>
 800795c:	9a04      	ldr	r2, [sp, #16]
 800795e:	b9d8      	cbnz	r0, 8007998 <_vfiprintf_r+0x110>
 8007960:	06d1      	lsls	r1, r2, #27
 8007962:	bf44      	itt	mi
 8007964:	2320      	movmi	r3, #32
 8007966:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800796a:	0713      	lsls	r3, r2, #28
 800796c:	bf44      	itt	mi
 800796e:	232b      	movmi	r3, #43	@ 0x2b
 8007970:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007974:	f89a 3000 	ldrb.w	r3, [sl]
 8007978:	2b2a      	cmp	r3, #42	@ 0x2a
 800797a:	d015      	beq.n	80079a8 <_vfiprintf_r+0x120>
 800797c:	9a07      	ldr	r2, [sp, #28]
 800797e:	4654      	mov	r4, sl
 8007980:	2000      	movs	r0, #0
 8007982:	f04f 0c0a 	mov.w	ip, #10
 8007986:	4621      	mov	r1, r4
 8007988:	f811 3b01 	ldrb.w	r3, [r1], #1
 800798c:	3b30      	subs	r3, #48	@ 0x30
 800798e:	2b09      	cmp	r3, #9
 8007990:	d94b      	bls.n	8007a2a <_vfiprintf_r+0x1a2>
 8007992:	b1b0      	cbz	r0, 80079c2 <_vfiprintf_r+0x13a>
 8007994:	9207      	str	r2, [sp, #28]
 8007996:	e014      	b.n	80079c2 <_vfiprintf_r+0x13a>
 8007998:	eba0 0308 	sub.w	r3, r0, r8
 800799c:	fa09 f303 	lsl.w	r3, r9, r3
 80079a0:	4313      	orrs	r3, r2
 80079a2:	9304      	str	r3, [sp, #16]
 80079a4:	46a2      	mov	sl, r4
 80079a6:	e7d2      	b.n	800794e <_vfiprintf_r+0xc6>
 80079a8:	9b03      	ldr	r3, [sp, #12]
 80079aa:	1d19      	adds	r1, r3, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	9103      	str	r1, [sp, #12]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	bfbb      	ittet	lt
 80079b4:	425b      	neglt	r3, r3
 80079b6:	f042 0202 	orrlt.w	r2, r2, #2
 80079ba:	9307      	strge	r3, [sp, #28]
 80079bc:	9307      	strlt	r3, [sp, #28]
 80079be:	bfb8      	it	lt
 80079c0:	9204      	strlt	r2, [sp, #16]
 80079c2:	7823      	ldrb	r3, [r4, #0]
 80079c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80079c6:	d10a      	bne.n	80079de <_vfiprintf_r+0x156>
 80079c8:	7863      	ldrb	r3, [r4, #1]
 80079ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80079cc:	d132      	bne.n	8007a34 <_vfiprintf_r+0x1ac>
 80079ce:	9b03      	ldr	r3, [sp, #12]
 80079d0:	1d1a      	adds	r2, r3, #4
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	9203      	str	r2, [sp, #12]
 80079d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079da:	3402      	adds	r4, #2
 80079dc:	9305      	str	r3, [sp, #20]
 80079de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ab4 <_vfiprintf_r+0x22c>
 80079e2:	7821      	ldrb	r1, [r4, #0]
 80079e4:	2203      	movs	r2, #3
 80079e6:	4650      	mov	r0, sl
 80079e8:	f7f8 fc1a 	bl	8000220 <memchr>
 80079ec:	b138      	cbz	r0, 80079fe <_vfiprintf_r+0x176>
 80079ee:	9b04      	ldr	r3, [sp, #16]
 80079f0:	eba0 000a 	sub.w	r0, r0, sl
 80079f4:	2240      	movs	r2, #64	@ 0x40
 80079f6:	4082      	lsls	r2, r0
 80079f8:	4313      	orrs	r3, r2
 80079fa:	3401      	adds	r4, #1
 80079fc:	9304      	str	r3, [sp, #16]
 80079fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a02:	4829      	ldr	r0, [pc, #164]	@ (8007aa8 <_vfiprintf_r+0x220>)
 8007a04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a08:	2206      	movs	r2, #6
 8007a0a:	f7f8 fc09 	bl	8000220 <memchr>
 8007a0e:	2800      	cmp	r0, #0
 8007a10:	d03f      	beq.n	8007a92 <_vfiprintf_r+0x20a>
 8007a12:	4b26      	ldr	r3, [pc, #152]	@ (8007aac <_vfiprintf_r+0x224>)
 8007a14:	bb1b      	cbnz	r3, 8007a5e <_vfiprintf_r+0x1d6>
 8007a16:	9b03      	ldr	r3, [sp, #12]
 8007a18:	3307      	adds	r3, #7
 8007a1a:	f023 0307 	bic.w	r3, r3, #7
 8007a1e:	3308      	adds	r3, #8
 8007a20:	9303      	str	r3, [sp, #12]
 8007a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a24:	443b      	add	r3, r7
 8007a26:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a28:	e76a      	b.n	8007900 <_vfiprintf_r+0x78>
 8007a2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a2e:	460c      	mov	r4, r1
 8007a30:	2001      	movs	r0, #1
 8007a32:	e7a8      	b.n	8007986 <_vfiprintf_r+0xfe>
 8007a34:	2300      	movs	r3, #0
 8007a36:	3401      	adds	r4, #1
 8007a38:	9305      	str	r3, [sp, #20]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	f04f 0c0a 	mov.w	ip, #10
 8007a40:	4620      	mov	r0, r4
 8007a42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a46:	3a30      	subs	r2, #48	@ 0x30
 8007a48:	2a09      	cmp	r2, #9
 8007a4a:	d903      	bls.n	8007a54 <_vfiprintf_r+0x1cc>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d0c6      	beq.n	80079de <_vfiprintf_r+0x156>
 8007a50:	9105      	str	r1, [sp, #20]
 8007a52:	e7c4      	b.n	80079de <_vfiprintf_r+0x156>
 8007a54:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a58:	4604      	mov	r4, r0
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e7f0      	b.n	8007a40 <_vfiprintf_r+0x1b8>
 8007a5e:	ab03      	add	r3, sp, #12
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	462a      	mov	r2, r5
 8007a64:	4b12      	ldr	r3, [pc, #72]	@ (8007ab0 <_vfiprintf_r+0x228>)
 8007a66:	a904      	add	r1, sp, #16
 8007a68:	4630      	mov	r0, r6
 8007a6a:	f7fd fec3 	bl	80057f4 <_printf_float>
 8007a6e:	4607      	mov	r7, r0
 8007a70:	1c78      	adds	r0, r7, #1
 8007a72:	d1d6      	bne.n	8007a22 <_vfiprintf_r+0x19a>
 8007a74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a76:	07d9      	lsls	r1, r3, #31
 8007a78:	d405      	bmi.n	8007a86 <_vfiprintf_r+0x1fe>
 8007a7a:	89ab      	ldrh	r3, [r5, #12]
 8007a7c:	059a      	lsls	r2, r3, #22
 8007a7e:	d402      	bmi.n	8007a86 <_vfiprintf_r+0x1fe>
 8007a80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a82:	f7fe fc05 	bl	8006290 <__retarget_lock_release_recursive>
 8007a86:	89ab      	ldrh	r3, [r5, #12]
 8007a88:	065b      	lsls	r3, r3, #25
 8007a8a:	f53f af1f 	bmi.w	80078cc <_vfiprintf_r+0x44>
 8007a8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a90:	e71e      	b.n	80078d0 <_vfiprintf_r+0x48>
 8007a92:	ab03      	add	r3, sp, #12
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	462a      	mov	r2, r5
 8007a98:	4b05      	ldr	r3, [pc, #20]	@ (8007ab0 <_vfiprintf_r+0x228>)
 8007a9a:	a904      	add	r1, sp, #16
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f7fe f941 	bl	8005d24 <_printf_i>
 8007aa2:	e7e4      	b.n	8007a6e <_vfiprintf_r+0x1e6>
 8007aa4:	08008658 	.word	0x08008658
 8007aa8:	08008662 	.word	0x08008662
 8007aac:	080057f5 	.word	0x080057f5
 8007ab0:	08007863 	.word	0x08007863
 8007ab4:	0800865e 	.word	0x0800865e

08007ab8 <__sflush_r>:
 8007ab8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac0:	0716      	lsls	r6, r2, #28
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	460c      	mov	r4, r1
 8007ac6:	d454      	bmi.n	8007b72 <__sflush_r+0xba>
 8007ac8:	684b      	ldr	r3, [r1, #4]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	dc02      	bgt.n	8007ad4 <__sflush_r+0x1c>
 8007ace:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	dd48      	ble.n	8007b66 <__sflush_r+0xae>
 8007ad4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ad6:	2e00      	cmp	r6, #0
 8007ad8:	d045      	beq.n	8007b66 <__sflush_r+0xae>
 8007ada:	2300      	movs	r3, #0
 8007adc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007ae0:	682f      	ldr	r7, [r5, #0]
 8007ae2:	6a21      	ldr	r1, [r4, #32]
 8007ae4:	602b      	str	r3, [r5, #0]
 8007ae6:	d030      	beq.n	8007b4a <__sflush_r+0x92>
 8007ae8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	0759      	lsls	r1, r3, #29
 8007aee:	d505      	bpl.n	8007afc <__sflush_r+0x44>
 8007af0:	6863      	ldr	r3, [r4, #4]
 8007af2:	1ad2      	subs	r2, r2, r3
 8007af4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007af6:	b10b      	cbz	r3, 8007afc <__sflush_r+0x44>
 8007af8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007afa:	1ad2      	subs	r2, r2, r3
 8007afc:	2300      	movs	r3, #0
 8007afe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b00:	6a21      	ldr	r1, [r4, #32]
 8007b02:	4628      	mov	r0, r5
 8007b04:	47b0      	blx	r6
 8007b06:	1c43      	adds	r3, r0, #1
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	d106      	bne.n	8007b1a <__sflush_r+0x62>
 8007b0c:	6829      	ldr	r1, [r5, #0]
 8007b0e:	291d      	cmp	r1, #29
 8007b10:	d82b      	bhi.n	8007b6a <__sflush_r+0xb2>
 8007b12:	4a2a      	ldr	r2, [pc, #168]	@ (8007bbc <__sflush_r+0x104>)
 8007b14:	410a      	asrs	r2, r1
 8007b16:	07d6      	lsls	r6, r2, #31
 8007b18:	d427      	bmi.n	8007b6a <__sflush_r+0xb2>
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	6062      	str	r2, [r4, #4]
 8007b1e:	04d9      	lsls	r1, r3, #19
 8007b20:	6922      	ldr	r2, [r4, #16]
 8007b22:	6022      	str	r2, [r4, #0]
 8007b24:	d504      	bpl.n	8007b30 <__sflush_r+0x78>
 8007b26:	1c42      	adds	r2, r0, #1
 8007b28:	d101      	bne.n	8007b2e <__sflush_r+0x76>
 8007b2a:	682b      	ldr	r3, [r5, #0]
 8007b2c:	b903      	cbnz	r3, 8007b30 <__sflush_r+0x78>
 8007b2e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b32:	602f      	str	r7, [r5, #0]
 8007b34:	b1b9      	cbz	r1, 8007b66 <__sflush_r+0xae>
 8007b36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b3a:	4299      	cmp	r1, r3
 8007b3c:	d002      	beq.n	8007b44 <__sflush_r+0x8c>
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f7ff f9f6 	bl	8006f30 <_free_r>
 8007b44:	2300      	movs	r3, #0
 8007b46:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b48:	e00d      	b.n	8007b66 <__sflush_r+0xae>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	4628      	mov	r0, r5
 8007b4e:	47b0      	blx	r6
 8007b50:	4602      	mov	r2, r0
 8007b52:	1c50      	adds	r0, r2, #1
 8007b54:	d1c9      	bne.n	8007aea <__sflush_r+0x32>
 8007b56:	682b      	ldr	r3, [r5, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d0c6      	beq.n	8007aea <__sflush_r+0x32>
 8007b5c:	2b1d      	cmp	r3, #29
 8007b5e:	d001      	beq.n	8007b64 <__sflush_r+0xac>
 8007b60:	2b16      	cmp	r3, #22
 8007b62:	d11e      	bne.n	8007ba2 <__sflush_r+0xea>
 8007b64:	602f      	str	r7, [r5, #0]
 8007b66:	2000      	movs	r0, #0
 8007b68:	e022      	b.n	8007bb0 <__sflush_r+0xf8>
 8007b6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b6e:	b21b      	sxth	r3, r3
 8007b70:	e01b      	b.n	8007baa <__sflush_r+0xf2>
 8007b72:	690f      	ldr	r7, [r1, #16]
 8007b74:	2f00      	cmp	r7, #0
 8007b76:	d0f6      	beq.n	8007b66 <__sflush_r+0xae>
 8007b78:	0793      	lsls	r3, r2, #30
 8007b7a:	680e      	ldr	r6, [r1, #0]
 8007b7c:	bf08      	it	eq
 8007b7e:	694b      	ldreq	r3, [r1, #20]
 8007b80:	600f      	str	r7, [r1, #0]
 8007b82:	bf18      	it	ne
 8007b84:	2300      	movne	r3, #0
 8007b86:	eba6 0807 	sub.w	r8, r6, r7
 8007b8a:	608b      	str	r3, [r1, #8]
 8007b8c:	f1b8 0f00 	cmp.w	r8, #0
 8007b90:	dde9      	ble.n	8007b66 <__sflush_r+0xae>
 8007b92:	6a21      	ldr	r1, [r4, #32]
 8007b94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b96:	4643      	mov	r3, r8
 8007b98:	463a      	mov	r2, r7
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	47b0      	blx	r6
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	dc08      	bgt.n	8007bb4 <__sflush_r+0xfc>
 8007ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ba6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007baa:	81a3      	strh	r3, [r4, #12]
 8007bac:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bb4:	4407      	add	r7, r0
 8007bb6:	eba8 0800 	sub.w	r8, r8, r0
 8007bba:	e7e7      	b.n	8007b8c <__sflush_r+0xd4>
 8007bbc:	dfbffffe 	.word	0xdfbffffe

08007bc0 <_fflush_r>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	690b      	ldr	r3, [r1, #16]
 8007bc4:	4605      	mov	r5, r0
 8007bc6:	460c      	mov	r4, r1
 8007bc8:	b913      	cbnz	r3, 8007bd0 <_fflush_r+0x10>
 8007bca:	2500      	movs	r5, #0
 8007bcc:	4628      	mov	r0, r5
 8007bce:	bd38      	pop	{r3, r4, r5, pc}
 8007bd0:	b118      	cbz	r0, 8007bda <_fflush_r+0x1a>
 8007bd2:	6a03      	ldr	r3, [r0, #32]
 8007bd4:	b90b      	cbnz	r3, 8007bda <_fflush_r+0x1a>
 8007bd6:	f7fe fa51 	bl	800607c <__sinit>
 8007bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0f3      	beq.n	8007bca <_fflush_r+0xa>
 8007be2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007be4:	07d0      	lsls	r0, r2, #31
 8007be6:	d404      	bmi.n	8007bf2 <_fflush_r+0x32>
 8007be8:	0599      	lsls	r1, r3, #22
 8007bea:	d402      	bmi.n	8007bf2 <_fflush_r+0x32>
 8007bec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bee:	f7fe fb4e 	bl	800628e <__retarget_lock_acquire_recursive>
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	f7ff ff5f 	bl	8007ab8 <__sflush_r>
 8007bfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bfc:	07da      	lsls	r2, r3, #31
 8007bfe:	4605      	mov	r5, r0
 8007c00:	d4e4      	bmi.n	8007bcc <_fflush_r+0xc>
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	059b      	lsls	r3, r3, #22
 8007c06:	d4e1      	bmi.n	8007bcc <_fflush_r+0xc>
 8007c08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c0a:	f7fe fb41 	bl	8006290 <__retarget_lock_release_recursive>
 8007c0e:	e7dd      	b.n	8007bcc <_fflush_r+0xc>

08007c10 <__swbuf_r>:
 8007c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c12:	460e      	mov	r6, r1
 8007c14:	4614      	mov	r4, r2
 8007c16:	4605      	mov	r5, r0
 8007c18:	b118      	cbz	r0, 8007c22 <__swbuf_r+0x12>
 8007c1a:	6a03      	ldr	r3, [r0, #32]
 8007c1c:	b90b      	cbnz	r3, 8007c22 <__swbuf_r+0x12>
 8007c1e:	f7fe fa2d 	bl	800607c <__sinit>
 8007c22:	69a3      	ldr	r3, [r4, #24]
 8007c24:	60a3      	str	r3, [r4, #8]
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	071a      	lsls	r2, r3, #28
 8007c2a:	d501      	bpl.n	8007c30 <__swbuf_r+0x20>
 8007c2c:	6923      	ldr	r3, [r4, #16]
 8007c2e:	b943      	cbnz	r3, 8007c42 <__swbuf_r+0x32>
 8007c30:	4621      	mov	r1, r4
 8007c32:	4628      	mov	r0, r5
 8007c34:	f000 f82a 	bl	8007c8c <__swsetup_r>
 8007c38:	b118      	cbz	r0, 8007c42 <__swbuf_r+0x32>
 8007c3a:	f04f 37ff 	mov.w	r7, #4294967295
 8007c3e:	4638      	mov	r0, r7
 8007c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	6922      	ldr	r2, [r4, #16]
 8007c46:	1a98      	subs	r0, r3, r2
 8007c48:	6963      	ldr	r3, [r4, #20]
 8007c4a:	b2f6      	uxtb	r6, r6
 8007c4c:	4283      	cmp	r3, r0
 8007c4e:	4637      	mov	r7, r6
 8007c50:	dc05      	bgt.n	8007c5e <__swbuf_r+0x4e>
 8007c52:	4621      	mov	r1, r4
 8007c54:	4628      	mov	r0, r5
 8007c56:	f7ff ffb3 	bl	8007bc0 <_fflush_r>
 8007c5a:	2800      	cmp	r0, #0
 8007c5c:	d1ed      	bne.n	8007c3a <__swbuf_r+0x2a>
 8007c5e:	68a3      	ldr	r3, [r4, #8]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	60a3      	str	r3, [r4, #8]
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	6022      	str	r2, [r4, #0]
 8007c6a:	701e      	strb	r6, [r3, #0]
 8007c6c:	6962      	ldr	r2, [r4, #20]
 8007c6e:	1c43      	adds	r3, r0, #1
 8007c70:	429a      	cmp	r2, r3
 8007c72:	d004      	beq.n	8007c7e <__swbuf_r+0x6e>
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	07db      	lsls	r3, r3, #31
 8007c78:	d5e1      	bpl.n	8007c3e <__swbuf_r+0x2e>
 8007c7a:	2e0a      	cmp	r6, #10
 8007c7c:	d1df      	bne.n	8007c3e <__swbuf_r+0x2e>
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4628      	mov	r0, r5
 8007c82:	f7ff ff9d 	bl	8007bc0 <_fflush_r>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d0d9      	beq.n	8007c3e <__swbuf_r+0x2e>
 8007c8a:	e7d6      	b.n	8007c3a <__swbuf_r+0x2a>

08007c8c <__swsetup_r>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	4b29      	ldr	r3, [pc, #164]	@ (8007d34 <__swsetup_r+0xa8>)
 8007c90:	4605      	mov	r5, r0
 8007c92:	6818      	ldr	r0, [r3, #0]
 8007c94:	460c      	mov	r4, r1
 8007c96:	b118      	cbz	r0, 8007ca0 <__swsetup_r+0x14>
 8007c98:	6a03      	ldr	r3, [r0, #32]
 8007c9a:	b90b      	cbnz	r3, 8007ca0 <__swsetup_r+0x14>
 8007c9c:	f7fe f9ee 	bl	800607c <__sinit>
 8007ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca4:	0719      	lsls	r1, r3, #28
 8007ca6:	d422      	bmi.n	8007cee <__swsetup_r+0x62>
 8007ca8:	06da      	lsls	r2, r3, #27
 8007caa:	d407      	bmi.n	8007cbc <__swsetup_r+0x30>
 8007cac:	2209      	movs	r2, #9
 8007cae:	602a      	str	r2, [r5, #0]
 8007cb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cb4:	81a3      	strh	r3, [r4, #12]
 8007cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007cba:	e033      	b.n	8007d24 <__swsetup_r+0x98>
 8007cbc:	0758      	lsls	r0, r3, #29
 8007cbe:	d512      	bpl.n	8007ce6 <__swsetup_r+0x5a>
 8007cc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cc2:	b141      	cbz	r1, 8007cd6 <__swsetup_r+0x4a>
 8007cc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cc8:	4299      	cmp	r1, r3
 8007cca:	d002      	beq.n	8007cd2 <__swsetup_r+0x46>
 8007ccc:	4628      	mov	r0, r5
 8007cce:	f7ff f92f 	bl	8006f30 <_free_r>
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cd6:	89a3      	ldrh	r3, [r4, #12]
 8007cd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007cdc:	81a3      	strh	r3, [r4, #12]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	6063      	str	r3, [r4, #4]
 8007ce2:	6923      	ldr	r3, [r4, #16]
 8007ce4:	6023      	str	r3, [r4, #0]
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	f043 0308 	orr.w	r3, r3, #8
 8007cec:	81a3      	strh	r3, [r4, #12]
 8007cee:	6923      	ldr	r3, [r4, #16]
 8007cf0:	b94b      	cbnz	r3, 8007d06 <__swsetup_r+0x7a>
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cfc:	d003      	beq.n	8007d06 <__swsetup_r+0x7a>
 8007cfe:	4621      	mov	r1, r4
 8007d00:	4628      	mov	r0, r5
 8007d02:	f000 f8c1 	bl	8007e88 <__smakebuf_r>
 8007d06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d0a:	f013 0201 	ands.w	r2, r3, #1
 8007d0e:	d00a      	beq.n	8007d26 <__swsetup_r+0x9a>
 8007d10:	2200      	movs	r2, #0
 8007d12:	60a2      	str	r2, [r4, #8]
 8007d14:	6962      	ldr	r2, [r4, #20]
 8007d16:	4252      	negs	r2, r2
 8007d18:	61a2      	str	r2, [r4, #24]
 8007d1a:	6922      	ldr	r2, [r4, #16]
 8007d1c:	b942      	cbnz	r2, 8007d30 <__swsetup_r+0xa4>
 8007d1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007d22:	d1c5      	bne.n	8007cb0 <__swsetup_r+0x24>
 8007d24:	bd38      	pop	{r3, r4, r5, pc}
 8007d26:	0799      	lsls	r1, r3, #30
 8007d28:	bf58      	it	pl
 8007d2a:	6962      	ldrpl	r2, [r4, #20]
 8007d2c:	60a2      	str	r2, [r4, #8]
 8007d2e:	e7f4      	b.n	8007d1a <__swsetup_r+0x8e>
 8007d30:	2000      	movs	r0, #0
 8007d32:	e7f7      	b.n	8007d24 <__swsetup_r+0x98>
 8007d34:	20000018 	.word	0x20000018

08007d38 <_sbrk_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d06      	ldr	r5, [pc, #24]	@ (8007d54 <_sbrk_r+0x1c>)
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4604      	mov	r4, r0
 8007d40:	4608      	mov	r0, r1
 8007d42:	602b      	str	r3, [r5, #0]
 8007d44:	f7f9 ffc4 	bl	8001cd0 <_sbrk>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d102      	bne.n	8007d52 <_sbrk_r+0x1a>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	b103      	cbz	r3, 8007d52 <_sbrk_r+0x1a>
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	200009e8 	.word	0x200009e8

08007d58 <memcpy>:
 8007d58:	440a      	add	r2, r1
 8007d5a:	4291      	cmp	r1, r2
 8007d5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d60:	d100      	bne.n	8007d64 <memcpy+0xc>
 8007d62:	4770      	bx	lr
 8007d64:	b510      	push	{r4, lr}
 8007d66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d6e:	4291      	cmp	r1, r2
 8007d70:	d1f9      	bne.n	8007d66 <memcpy+0xe>
 8007d72:	bd10      	pop	{r4, pc}

08007d74 <__assert_func>:
 8007d74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d76:	4614      	mov	r4, r2
 8007d78:	461a      	mov	r2, r3
 8007d7a:	4b09      	ldr	r3, [pc, #36]	@ (8007da0 <__assert_func+0x2c>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4605      	mov	r5, r0
 8007d80:	68d8      	ldr	r0, [r3, #12]
 8007d82:	b954      	cbnz	r4, 8007d9a <__assert_func+0x26>
 8007d84:	4b07      	ldr	r3, [pc, #28]	@ (8007da4 <__assert_func+0x30>)
 8007d86:	461c      	mov	r4, r3
 8007d88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d8c:	9100      	str	r1, [sp, #0]
 8007d8e:	462b      	mov	r3, r5
 8007d90:	4905      	ldr	r1, [pc, #20]	@ (8007da8 <__assert_func+0x34>)
 8007d92:	f000 f841 	bl	8007e18 <fiprintf>
 8007d96:	f000 f8d5 	bl	8007f44 <abort>
 8007d9a:	4b04      	ldr	r3, [pc, #16]	@ (8007dac <__assert_func+0x38>)
 8007d9c:	e7f4      	b.n	8007d88 <__assert_func+0x14>
 8007d9e:	bf00      	nop
 8007da0:	20000018 	.word	0x20000018
 8007da4:	080086ae 	.word	0x080086ae
 8007da8:	08008680 	.word	0x08008680
 8007dac:	08008673 	.word	0x08008673

08007db0 <_calloc_r>:
 8007db0:	b570      	push	{r4, r5, r6, lr}
 8007db2:	fba1 5402 	umull	r5, r4, r1, r2
 8007db6:	b93c      	cbnz	r4, 8007dc8 <_calloc_r+0x18>
 8007db8:	4629      	mov	r1, r5
 8007dba:	f7ff f92d 	bl	8007018 <_malloc_r>
 8007dbe:	4606      	mov	r6, r0
 8007dc0:	b928      	cbnz	r0, 8007dce <_calloc_r+0x1e>
 8007dc2:	2600      	movs	r6, #0
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	bd70      	pop	{r4, r5, r6, pc}
 8007dc8:	220c      	movs	r2, #12
 8007dca:	6002      	str	r2, [r0, #0]
 8007dcc:	e7f9      	b.n	8007dc2 <_calloc_r+0x12>
 8007dce:	462a      	mov	r2, r5
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	f7fe f9de 	bl	8006192 <memset>
 8007dd6:	e7f5      	b.n	8007dc4 <_calloc_r+0x14>

08007dd8 <__ascii_mbtowc>:
 8007dd8:	b082      	sub	sp, #8
 8007dda:	b901      	cbnz	r1, 8007dde <__ascii_mbtowc+0x6>
 8007ddc:	a901      	add	r1, sp, #4
 8007dde:	b142      	cbz	r2, 8007df2 <__ascii_mbtowc+0x1a>
 8007de0:	b14b      	cbz	r3, 8007df6 <__ascii_mbtowc+0x1e>
 8007de2:	7813      	ldrb	r3, [r2, #0]
 8007de4:	600b      	str	r3, [r1, #0]
 8007de6:	7812      	ldrb	r2, [r2, #0]
 8007de8:	1e10      	subs	r0, r2, #0
 8007dea:	bf18      	it	ne
 8007dec:	2001      	movne	r0, #1
 8007dee:	b002      	add	sp, #8
 8007df0:	4770      	bx	lr
 8007df2:	4610      	mov	r0, r2
 8007df4:	e7fb      	b.n	8007dee <__ascii_mbtowc+0x16>
 8007df6:	f06f 0001 	mvn.w	r0, #1
 8007dfa:	e7f8      	b.n	8007dee <__ascii_mbtowc+0x16>

08007dfc <__ascii_wctomb>:
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	4608      	mov	r0, r1
 8007e00:	b141      	cbz	r1, 8007e14 <__ascii_wctomb+0x18>
 8007e02:	2aff      	cmp	r2, #255	@ 0xff
 8007e04:	d904      	bls.n	8007e10 <__ascii_wctomb+0x14>
 8007e06:	228a      	movs	r2, #138	@ 0x8a
 8007e08:	601a      	str	r2, [r3, #0]
 8007e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0e:	4770      	bx	lr
 8007e10:	700a      	strb	r2, [r1, #0]
 8007e12:	2001      	movs	r0, #1
 8007e14:	4770      	bx	lr
	...

08007e18 <fiprintf>:
 8007e18:	b40e      	push	{r1, r2, r3}
 8007e1a:	b503      	push	{r0, r1, lr}
 8007e1c:	4601      	mov	r1, r0
 8007e1e:	ab03      	add	r3, sp, #12
 8007e20:	4805      	ldr	r0, [pc, #20]	@ (8007e38 <fiprintf+0x20>)
 8007e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e26:	6800      	ldr	r0, [r0, #0]
 8007e28:	9301      	str	r3, [sp, #4]
 8007e2a:	f7ff fd2d 	bl	8007888 <_vfiprintf_r>
 8007e2e:	b002      	add	sp, #8
 8007e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e34:	b003      	add	sp, #12
 8007e36:	4770      	bx	lr
 8007e38:	20000018 	.word	0x20000018

08007e3c <__swhatbuf_r>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	460c      	mov	r4, r1
 8007e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e44:	2900      	cmp	r1, #0
 8007e46:	b096      	sub	sp, #88	@ 0x58
 8007e48:	4615      	mov	r5, r2
 8007e4a:	461e      	mov	r6, r3
 8007e4c:	da0d      	bge.n	8007e6a <__swhatbuf_r+0x2e>
 8007e4e:	89a3      	ldrh	r3, [r4, #12]
 8007e50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e54:	f04f 0100 	mov.w	r1, #0
 8007e58:	bf14      	ite	ne
 8007e5a:	2340      	movne	r3, #64	@ 0x40
 8007e5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e60:	2000      	movs	r0, #0
 8007e62:	6031      	str	r1, [r6, #0]
 8007e64:	602b      	str	r3, [r5, #0]
 8007e66:	b016      	add	sp, #88	@ 0x58
 8007e68:	bd70      	pop	{r4, r5, r6, pc}
 8007e6a:	466a      	mov	r2, sp
 8007e6c:	f000 f848 	bl	8007f00 <_fstat_r>
 8007e70:	2800      	cmp	r0, #0
 8007e72:	dbec      	blt.n	8007e4e <__swhatbuf_r+0x12>
 8007e74:	9901      	ldr	r1, [sp, #4]
 8007e76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e7e:	4259      	negs	r1, r3
 8007e80:	4159      	adcs	r1, r3
 8007e82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e86:	e7eb      	b.n	8007e60 <__swhatbuf_r+0x24>

08007e88 <__smakebuf_r>:
 8007e88:	898b      	ldrh	r3, [r1, #12]
 8007e8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e8c:	079d      	lsls	r5, r3, #30
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460c      	mov	r4, r1
 8007e92:	d507      	bpl.n	8007ea4 <__smakebuf_r+0x1c>
 8007e94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e98:	6023      	str	r3, [r4, #0]
 8007e9a:	6123      	str	r3, [r4, #16]
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	6163      	str	r3, [r4, #20]
 8007ea0:	b003      	add	sp, #12
 8007ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ea4:	ab01      	add	r3, sp, #4
 8007ea6:	466a      	mov	r2, sp
 8007ea8:	f7ff ffc8 	bl	8007e3c <__swhatbuf_r>
 8007eac:	9f00      	ldr	r7, [sp, #0]
 8007eae:	4605      	mov	r5, r0
 8007eb0:	4639      	mov	r1, r7
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7ff f8b0 	bl	8007018 <_malloc_r>
 8007eb8:	b948      	cbnz	r0, 8007ece <__smakebuf_r+0x46>
 8007eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ebe:	059a      	lsls	r2, r3, #22
 8007ec0:	d4ee      	bmi.n	8007ea0 <__smakebuf_r+0x18>
 8007ec2:	f023 0303 	bic.w	r3, r3, #3
 8007ec6:	f043 0302 	orr.w	r3, r3, #2
 8007eca:	81a3      	strh	r3, [r4, #12]
 8007ecc:	e7e2      	b.n	8007e94 <__smakebuf_r+0xc>
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	6020      	str	r0, [r4, #0]
 8007ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ed6:	81a3      	strh	r3, [r4, #12]
 8007ed8:	9b01      	ldr	r3, [sp, #4]
 8007eda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ede:	b15b      	cbz	r3, 8007ef8 <__smakebuf_r+0x70>
 8007ee0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ee4:	4630      	mov	r0, r6
 8007ee6:	f000 f81d 	bl	8007f24 <_isatty_r>
 8007eea:	b128      	cbz	r0, 8007ef8 <__smakebuf_r+0x70>
 8007eec:	89a3      	ldrh	r3, [r4, #12]
 8007eee:	f023 0303 	bic.w	r3, r3, #3
 8007ef2:	f043 0301 	orr.w	r3, r3, #1
 8007ef6:	81a3      	strh	r3, [r4, #12]
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	431d      	orrs	r5, r3
 8007efc:	81a5      	strh	r5, [r4, #12]
 8007efe:	e7cf      	b.n	8007ea0 <__smakebuf_r+0x18>

08007f00 <_fstat_r>:
 8007f00:	b538      	push	{r3, r4, r5, lr}
 8007f02:	4d07      	ldr	r5, [pc, #28]	@ (8007f20 <_fstat_r+0x20>)
 8007f04:	2300      	movs	r3, #0
 8007f06:	4604      	mov	r4, r0
 8007f08:	4608      	mov	r0, r1
 8007f0a:	4611      	mov	r1, r2
 8007f0c:	602b      	str	r3, [r5, #0]
 8007f0e:	f7f9 feb6 	bl	8001c7e <_fstat>
 8007f12:	1c43      	adds	r3, r0, #1
 8007f14:	d102      	bne.n	8007f1c <_fstat_r+0x1c>
 8007f16:	682b      	ldr	r3, [r5, #0]
 8007f18:	b103      	cbz	r3, 8007f1c <_fstat_r+0x1c>
 8007f1a:	6023      	str	r3, [r4, #0]
 8007f1c:	bd38      	pop	{r3, r4, r5, pc}
 8007f1e:	bf00      	nop
 8007f20:	200009e8 	.word	0x200009e8

08007f24 <_isatty_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4d06      	ldr	r5, [pc, #24]	@ (8007f40 <_isatty_r+0x1c>)
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	602b      	str	r3, [r5, #0]
 8007f30:	f7f9 feb5 	bl	8001c9e <_isatty>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_isatty_r+0x1a>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_isatty_r+0x1a>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	200009e8 	.word	0x200009e8

08007f44 <abort>:
 8007f44:	b508      	push	{r3, lr}
 8007f46:	2006      	movs	r0, #6
 8007f48:	f000 f82c 	bl	8007fa4 <raise>
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	f7f9 fe46 	bl	8001bde <_exit>

08007f52 <_raise_r>:
 8007f52:	291f      	cmp	r1, #31
 8007f54:	b538      	push	{r3, r4, r5, lr}
 8007f56:	4605      	mov	r5, r0
 8007f58:	460c      	mov	r4, r1
 8007f5a:	d904      	bls.n	8007f66 <_raise_r+0x14>
 8007f5c:	2316      	movs	r3, #22
 8007f5e:	6003      	str	r3, [r0, #0]
 8007f60:	f04f 30ff 	mov.w	r0, #4294967295
 8007f64:	bd38      	pop	{r3, r4, r5, pc}
 8007f66:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f68:	b112      	cbz	r2, 8007f70 <_raise_r+0x1e>
 8007f6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f6e:	b94b      	cbnz	r3, 8007f84 <_raise_r+0x32>
 8007f70:	4628      	mov	r0, r5
 8007f72:	f000 f831 	bl	8007fd8 <_getpid_r>
 8007f76:	4622      	mov	r2, r4
 8007f78:	4601      	mov	r1, r0
 8007f7a:	4628      	mov	r0, r5
 8007f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f80:	f000 b818 	b.w	8007fb4 <_kill_r>
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d00a      	beq.n	8007f9e <_raise_r+0x4c>
 8007f88:	1c59      	adds	r1, r3, #1
 8007f8a:	d103      	bne.n	8007f94 <_raise_r+0x42>
 8007f8c:	2316      	movs	r3, #22
 8007f8e:	6003      	str	r3, [r0, #0]
 8007f90:	2001      	movs	r0, #1
 8007f92:	e7e7      	b.n	8007f64 <_raise_r+0x12>
 8007f94:	2100      	movs	r1, #0
 8007f96:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	4798      	blx	r3
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	e7e0      	b.n	8007f64 <_raise_r+0x12>
	...

08007fa4 <raise>:
 8007fa4:	4b02      	ldr	r3, [pc, #8]	@ (8007fb0 <raise+0xc>)
 8007fa6:	4601      	mov	r1, r0
 8007fa8:	6818      	ldr	r0, [r3, #0]
 8007faa:	f7ff bfd2 	b.w	8007f52 <_raise_r>
 8007fae:	bf00      	nop
 8007fb0:	20000018 	.word	0x20000018

08007fb4 <_kill_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4d07      	ldr	r5, [pc, #28]	@ (8007fd4 <_kill_r+0x20>)
 8007fb8:	2300      	movs	r3, #0
 8007fba:	4604      	mov	r4, r0
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	602b      	str	r3, [r5, #0]
 8007fc2:	f7f9 fdfc 	bl	8001bbe <_kill>
 8007fc6:	1c43      	adds	r3, r0, #1
 8007fc8:	d102      	bne.n	8007fd0 <_kill_r+0x1c>
 8007fca:	682b      	ldr	r3, [r5, #0]
 8007fcc:	b103      	cbz	r3, 8007fd0 <_kill_r+0x1c>
 8007fce:	6023      	str	r3, [r4, #0]
 8007fd0:	bd38      	pop	{r3, r4, r5, pc}
 8007fd2:	bf00      	nop
 8007fd4:	200009e8 	.word	0x200009e8

08007fd8 <_getpid_r>:
 8007fd8:	f7f9 bde9 	b.w	8001bae <_getpid>

08007fdc <_init>:
 8007fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fde:	bf00      	nop
 8007fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fe2:	bc08      	pop	{r3}
 8007fe4:	469e      	mov	lr, r3
 8007fe6:	4770      	bx	lr

08007fe8 <_fini>:
 8007fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fea:	bf00      	nop
 8007fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fee:	bc08      	pop	{r3}
 8007ff0:	469e      	mov	lr, r3
 8007ff2:	4770      	bx	lr
